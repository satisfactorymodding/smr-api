// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package conv

import (
	conversion "github.com/satisfactorymodding/smr-api/conversion"
	generated "github.com/satisfactorymodding/smr-api/generated"
	ent "github.com/satisfactorymodding/smr-api/generated/ent"
)

type GuideImpl struct{}

func (c *GuideImpl) Convert(source *ent.Guide) *generated.Guide {
	var pGeneratedGuide *generated.Guide
	if source != nil {
		var generatedGuide generated.Guide
		generatedGuide.ID = (*source).ID
		generatedGuide.Name = (*source).Name
		generatedGuide.ShortDescription = (*source).ShortDescription
		generatedGuide.Guide = (*source).Guide
		generatedGuide.Views = (*source).Views
		generatedGuide.UserID = (*source).UserID
		generatedGuide.UpdatedAt = conversion.TimeToString((*source).UpdatedAt)
		generatedGuide.CreatedAt = conversion.TimeToString((*source).CreatedAt)
		var pGeneratedTagList []*generated.Tag
		if (*source).Edges.Tags != nil {
			pGeneratedTagList = make([]*generated.Tag, len((*source).Edges.Tags))
			for i := 0; i < len((*source).Edges.Tags); i++ {
				pGeneratedTagList[i] = c.pEntTagToPGeneratedTag((*source).Edges.Tags[i])
			}
		}
		generatedGuide.Tags = pGeneratedTagList
		pGeneratedGuide = &generatedGuide
	}
	return pGeneratedGuide
}
func (c *GuideImpl) ConvertSlice(source []*ent.Guide) []*generated.Guide {
	var pGeneratedGuideList []*generated.Guide
	if source != nil {
		pGeneratedGuideList = make([]*generated.Guide, len(source))
		for i := 0; i < len(source); i++ {
			pGeneratedGuideList[i] = c.Convert(source[i])
		}
	}
	return pGeneratedGuideList
}
func (c *GuideImpl) pEntTagToPGeneratedTag(source *ent.Tag) *generated.Tag {
	var pGeneratedTag *generated.Tag
	if source != nil {
		var generatedTag generated.Tag
		generatedTag.ID = (*source).ID
		generatedTag.Name = (*source).Name
		generatedTag.Description = (*source).Description
		pGeneratedTag = &generatedTag
	}
	return pGeneratedTag
}
