// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package conv

import (
	conversion "github.com/satisfactorymodding/smr-api/conversion"
	generated "github.com/satisfactorymodding/smr-api/generated"
	ent "github.com/satisfactorymodding/smr-api/generated/ent"
)

type UserImpl struct{}

func (c *UserImpl) Convert(source *ent.User) *generated.User {
	var pGeneratedUser *generated.User
	if source != nil {
		var generatedUser generated.User
		generatedUser.ID = (*source).ID
		pString := (*source).Email
		generatedUser.Email = &pString
		generatedUser.Username = (*source).Username
		pString2 := (*source).Avatar
		generatedUser.Avatar = &pString2
		pString3 := (*source).AvatarThumbhash
		generatedUser.AvatarThumbhash = &pString3
		generatedUser.CreatedAt = conversion.TimeToString((*source).CreatedAt)
		pString4 := (*source).GithubID
		generatedUser.GithubID = &pString4
		pString5 := (*source).GoogleID
		generatedUser.GoogleID = &pString5
		pString6 := (*source).FacebookID
		generatedUser.FacebookID = &pString6
		pGeneratedUser = &generatedUser
	}
	return pGeneratedUser
}
func (c *UserImpl) ConvertSlice(source []*ent.User) []*generated.User {
	var pGeneratedUserList []*generated.User
	if source != nil {
		pGeneratedUserList = make([]*generated.User, len(source))
		for i := 0; i < len(source); i++ {
			pGeneratedUserList[i] = c.Convert(source[i])
		}
	}
	return pGeneratedUserList
}
