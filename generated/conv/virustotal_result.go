// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package conv

import (
	conversion "github.com/satisfactorymodding/smr-api/conversion"
	generated "github.com/satisfactorymodding/smr-api/generated"
	ent "github.com/satisfactorymodding/smr-api/generated/ent"
	"time"
)

type VirustotalResultImpl struct{}

func (c *VirustotalResultImpl) Convert(source *ent.VirustotalResult) *generated.VirustotalResult {
	var pGeneratedVirustotalResult *generated.VirustotalResult
	if source != nil {
		var generatedVirustotalResult generated.VirustotalResult
		pString := (*source).ID
		generatedVirustotalResult.ID = &pString
		generatedVirustotalResult.Hash = (*source).Hash
		generatedVirustotalResult.Safe = (*source).Safe
		generatedVirustotalResult.FileName = (*source).FileName
		generatedVirustotalResult.VersionID = (*source).VersionID
		generatedVirustotalResult.CreatedAt = conversion.TimeToString((*source).CreatedAt)
		generatedVirustotalResult.UpdatedAt = c.timeTimeToPString((*source).UpdatedAt)
		pGeneratedVirustotalResult = &generatedVirustotalResult
	}
	return pGeneratedVirustotalResult
}
func (c *VirustotalResultImpl) ConvertSlice(source []*ent.VirustotalResult) []*generated.VirustotalResult {
	var pGeneratedVirustotalResultList []*generated.VirustotalResult
	if source != nil {
		pGeneratedVirustotalResultList = make([]*generated.VirustotalResult, len(source))
		for i := 0; i < len(source); i++ {
			pGeneratedVirustotalResultList[i] = c.Convert(source[i])
		}
	}
	return pGeneratedVirustotalResultList
}
func (c *VirustotalResultImpl) timeTimeToPString(source time.Time) *string {
	xstring := conversion.TimeToString(source)
	return &xstring
}
