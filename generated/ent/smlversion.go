// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversion"
)

// SmlVersion is the model entity for the SmlVersion schema.
type SmlVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// SatisfactoryVersion holds the value of the "satisfactory_version" field.
	SatisfactoryVersion int `json:"satisfactory_version,omitempty"`
	// Stability holds the value of the "stability" field.
	Stability smlversion.Stability `json:"stability,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Changelog holds the value of the "changelog" field.
	Changelog string `json:"changelog,omitempty"`
	// BootstrapVersion holds the value of the "bootstrap_version" field.
	BootstrapVersion string `json:"bootstrap_version,omitempty"`
	// EngineVersion holds the value of the "engine_version" field.
	EngineVersion string `json:"engine_version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SmlVersionQuery when eager-loading is set.
	Edges        SmlVersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SmlVersionEdges holds the relations/edges for other nodes in the graph.
type SmlVersionEdges struct {
	// Targets holds the value of the targets edge.
	Targets []*SmlVersionTarget `json:"targets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TargetsOrErr returns the Targets value or an error if the edge
// was not loaded in eager-loading.
func (e SmlVersionEdges) TargetsOrErr() ([]*SmlVersionTarget, error) {
	if e.loadedTypes[0] {
		return e.Targets, nil
	}
	return nil, &NotLoadedError{edge: "targets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SmlVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case smlversion.FieldSatisfactoryVersion:
			values[i] = new(sql.NullInt64)
		case smlversion.FieldID, smlversion.FieldVersion, smlversion.FieldStability, smlversion.FieldLink, smlversion.FieldChangelog, smlversion.FieldBootstrapVersion, smlversion.FieldEngineVersion:
			values[i] = new(sql.NullString)
		case smlversion.FieldCreatedAt, smlversion.FieldUpdatedAt, smlversion.FieldDeletedAt, smlversion.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SmlVersion fields.
func (sv *SmlVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smlversion.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sv.ID = value.String
			}
		case smlversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sv.CreatedAt = value.Time
			}
		case smlversion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sv.UpdatedAt = value.Time
			}
		case smlversion.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sv.DeletedAt = value.Time
			}
		case smlversion.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sv.Version = value.String
			}
		case smlversion.FieldSatisfactoryVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field satisfactory_version", values[i])
			} else if value.Valid {
				sv.SatisfactoryVersion = int(value.Int64)
			}
		case smlversion.FieldStability:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stability", values[i])
			} else if value.Valid {
				sv.Stability = smlversion.Stability(value.String)
			}
		case smlversion.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				sv.Date = value.Time
			}
		case smlversion.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				sv.Link = value.String
			}
		case smlversion.FieldChangelog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field changelog", values[i])
			} else if value.Valid {
				sv.Changelog = value.String
			}
		case smlversion.FieldBootstrapVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bootstrap_version", values[i])
			} else if value.Valid {
				sv.BootstrapVersion = value.String
			}
		case smlversion.FieldEngineVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine_version", values[i])
			} else if value.Valid {
				sv.EngineVersion = value.String
			}
		default:
			sv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SmlVersion.
// This includes values selected through modifiers, order, etc.
func (sv *SmlVersion) Value(name string) (ent.Value, error) {
	return sv.selectValues.Get(name)
}

// QueryTargets queries the "targets" edge of the SmlVersion entity.
func (sv *SmlVersion) QueryTargets() *SmlVersionTargetQuery {
	return NewSmlVersionClient(sv.config).QueryTargets(sv)
}

// Update returns a builder for updating this SmlVersion.
// Note that you need to call SmlVersion.Unwrap() before calling this method if this SmlVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (sv *SmlVersion) Update() *SmlVersionUpdateOne {
	return NewSmlVersionClient(sv.config).UpdateOne(sv)
}

// Unwrap unwraps the SmlVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sv *SmlVersion) Unwrap() *SmlVersion {
	_tx, ok := sv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SmlVersion is not a transactional entity")
	}
	sv.config.driver = _tx.drv
	return sv
}

// String implements the fmt.Stringer.
func (sv *SmlVersion) String() string {
	var builder strings.Builder
	builder.WriteString("SmlVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sv.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sv.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sv.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(sv.Version)
	builder.WriteString(", ")
	builder.WriteString("satisfactory_version=")
	builder.WriteString(fmt.Sprintf("%v", sv.SatisfactoryVersion))
	builder.WriteString(", ")
	builder.WriteString("stability=")
	builder.WriteString(fmt.Sprintf("%v", sv.Stability))
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(sv.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(sv.Link)
	builder.WriteString(", ")
	builder.WriteString("changelog=")
	builder.WriteString(sv.Changelog)
	builder.WriteString(", ")
	builder.WriteString("bootstrap_version=")
	builder.WriteString(sv.BootstrapVersion)
	builder.WriteString(", ")
	builder.WriteString("engine_version=")
	builder.WriteString(sv.EngineVersion)
	builder.WriteByte(')')
	return builder.String()
}

// SmlVersions is a parsable slice of SmlVersion.
type SmlVersions []*SmlVersion
