// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiontarget"
)

// VersionTargetUpdate is the builder for updating VersionTarget entities.
type VersionTargetUpdate struct {
	config
	hooks     []Hook
	mutation  *VersionTargetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VersionTargetUpdate builder.
func (vtu *VersionTargetUpdate) Where(ps ...predicate.VersionTarget) *VersionTargetUpdate {
	vtu.mutation.Where(ps...)
	return vtu
}

// SetVersionID sets the "version_id" field.
func (vtu *VersionTargetUpdate) SetVersionID(s string) *VersionTargetUpdate {
	vtu.mutation.SetVersionID(s)
	return vtu
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (vtu *VersionTargetUpdate) SetNillableVersionID(s *string) *VersionTargetUpdate {
	if s != nil {
		vtu.SetVersionID(*s)
	}
	return vtu
}

// SetTargetName sets the "target_name" field.
func (vtu *VersionTargetUpdate) SetTargetName(s string) *VersionTargetUpdate {
	vtu.mutation.SetTargetName(s)
	return vtu
}

// SetNillableTargetName sets the "target_name" field if the given value is not nil.
func (vtu *VersionTargetUpdate) SetNillableTargetName(s *string) *VersionTargetUpdate {
	if s != nil {
		vtu.SetTargetName(*s)
	}
	return vtu
}

// SetKey sets the "key" field.
func (vtu *VersionTargetUpdate) SetKey(s string) *VersionTargetUpdate {
	vtu.mutation.SetKey(s)
	return vtu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (vtu *VersionTargetUpdate) SetNillableKey(s *string) *VersionTargetUpdate {
	if s != nil {
		vtu.SetKey(*s)
	}
	return vtu
}

// ClearKey clears the value of the "key" field.
func (vtu *VersionTargetUpdate) ClearKey() *VersionTargetUpdate {
	vtu.mutation.ClearKey()
	return vtu
}

// SetHash sets the "hash" field.
func (vtu *VersionTargetUpdate) SetHash(s string) *VersionTargetUpdate {
	vtu.mutation.SetHash(s)
	return vtu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vtu *VersionTargetUpdate) SetNillableHash(s *string) *VersionTargetUpdate {
	if s != nil {
		vtu.SetHash(*s)
	}
	return vtu
}

// ClearHash clears the value of the "hash" field.
func (vtu *VersionTargetUpdate) ClearHash() *VersionTargetUpdate {
	vtu.mutation.ClearHash()
	return vtu
}

// SetSize sets the "size" field.
func (vtu *VersionTargetUpdate) SetSize(i int64) *VersionTargetUpdate {
	vtu.mutation.ResetSize()
	vtu.mutation.SetSize(i)
	return vtu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vtu *VersionTargetUpdate) SetNillableSize(i *int64) *VersionTargetUpdate {
	if i != nil {
		vtu.SetSize(*i)
	}
	return vtu
}

// AddSize adds i to the "size" field.
func (vtu *VersionTargetUpdate) AddSize(i int64) *VersionTargetUpdate {
	vtu.mutation.AddSize(i)
	return vtu
}

// ClearSize clears the value of the "size" field.
func (vtu *VersionTargetUpdate) ClearSize() *VersionTargetUpdate {
	vtu.mutation.ClearSize()
	return vtu
}

// SetVersion sets the "version" edge to the Version entity.
func (vtu *VersionTargetUpdate) SetVersion(v *Version) *VersionTargetUpdate {
	return vtu.SetVersionID(v.ID)
}

// Mutation returns the VersionTargetMutation object of the builder.
func (vtu *VersionTargetUpdate) Mutation() *VersionTargetMutation {
	return vtu.mutation
}

// ClearVersion clears the "version" edge to the Version entity.
func (vtu *VersionTargetUpdate) ClearVersion() *VersionTargetUpdate {
	vtu.mutation.ClearVersion()
	return vtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vtu *VersionTargetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vtu.sqlSave, vtu.mutation, vtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtu *VersionTargetUpdate) SaveX(ctx context.Context) int {
	affected, err := vtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vtu *VersionTargetUpdate) Exec(ctx context.Context) error {
	_, err := vtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtu *VersionTargetUpdate) ExecX(ctx context.Context) {
	if err := vtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtu *VersionTargetUpdate) check() error {
	if vtu.mutation.VersionCleared() && len(vtu.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VersionTarget.version"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vtu *VersionTargetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionTargetUpdate {
	vtu.modifiers = append(vtu.modifiers, modifiers...)
	return vtu
}

func (vtu *VersionTargetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(versiontarget.Table, versiontarget.Columns, sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString))
	if ps := vtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtu.mutation.TargetName(); ok {
		_spec.SetField(versiontarget.FieldTargetName, field.TypeString, value)
	}
	if value, ok := vtu.mutation.Key(); ok {
		_spec.SetField(versiontarget.FieldKey, field.TypeString, value)
	}
	if vtu.mutation.KeyCleared() {
		_spec.ClearField(versiontarget.FieldKey, field.TypeString)
	}
	if value, ok := vtu.mutation.Hash(); ok {
		_spec.SetField(versiontarget.FieldHash, field.TypeString, value)
	}
	if vtu.mutation.HashCleared() {
		_spec.ClearField(versiontarget.FieldHash, field.TypeString)
	}
	if value, ok := vtu.mutation.Size(); ok {
		_spec.SetField(versiontarget.FieldSize, field.TypeInt64, value)
	}
	if value, ok := vtu.mutation.AddedSize(); ok {
		_spec.AddField(versiontarget.FieldSize, field.TypeInt64, value)
	}
	if vtu.mutation.SizeCleared() {
		_spec.ClearField(versiontarget.FieldSize, field.TypeInt64)
	}
	if vtu.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   versiontarget.VersionTable,
			Columns: []string{versiontarget.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtu.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   versiontarget.VersionTable,
			Columns: []string{versiontarget.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vtu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{versiontarget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vtu.mutation.done = true
	return n, nil
}

// VersionTargetUpdateOne is the builder for updating a single VersionTarget entity.
type VersionTargetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VersionTargetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVersionID sets the "version_id" field.
func (vtuo *VersionTargetUpdateOne) SetVersionID(s string) *VersionTargetUpdateOne {
	vtuo.mutation.SetVersionID(s)
	return vtuo
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (vtuo *VersionTargetUpdateOne) SetNillableVersionID(s *string) *VersionTargetUpdateOne {
	if s != nil {
		vtuo.SetVersionID(*s)
	}
	return vtuo
}

// SetTargetName sets the "target_name" field.
func (vtuo *VersionTargetUpdateOne) SetTargetName(s string) *VersionTargetUpdateOne {
	vtuo.mutation.SetTargetName(s)
	return vtuo
}

// SetNillableTargetName sets the "target_name" field if the given value is not nil.
func (vtuo *VersionTargetUpdateOne) SetNillableTargetName(s *string) *VersionTargetUpdateOne {
	if s != nil {
		vtuo.SetTargetName(*s)
	}
	return vtuo
}

// SetKey sets the "key" field.
func (vtuo *VersionTargetUpdateOne) SetKey(s string) *VersionTargetUpdateOne {
	vtuo.mutation.SetKey(s)
	return vtuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (vtuo *VersionTargetUpdateOne) SetNillableKey(s *string) *VersionTargetUpdateOne {
	if s != nil {
		vtuo.SetKey(*s)
	}
	return vtuo
}

// ClearKey clears the value of the "key" field.
func (vtuo *VersionTargetUpdateOne) ClearKey() *VersionTargetUpdateOne {
	vtuo.mutation.ClearKey()
	return vtuo
}

// SetHash sets the "hash" field.
func (vtuo *VersionTargetUpdateOne) SetHash(s string) *VersionTargetUpdateOne {
	vtuo.mutation.SetHash(s)
	return vtuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vtuo *VersionTargetUpdateOne) SetNillableHash(s *string) *VersionTargetUpdateOne {
	if s != nil {
		vtuo.SetHash(*s)
	}
	return vtuo
}

// ClearHash clears the value of the "hash" field.
func (vtuo *VersionTargetUpdateOne) ClearHash() *VersionTargetUpdateOne {
	vtuo.mutation.ClearHash()
	return vtuo
}

// SetSize sets the "size" field.
func (vtuo *VersionTargetUpdateOne) SetSize(i int64) *VersionTargetUpdateOne {
	vtuo.mutation.ResetSize()
	vtuo.mutation.SetSize(i)
	return vtuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vtuo *VersionTargetUpdateOne) SetNillableSize(i *int64) *VersionTargetUpdateOne {
	if i != nil {
		vtuo.SetSize(*i)
	}
	return vtuo
}

// AddSize adds i to the "size" field.
func (vtuo *VersionTargetUpdateOne) AddSize(i int64) *VersionTargetUpdateOne {
	vtuo.mutation.AddSize(i)
	return vtuo
}

// ClearSize clears the value of the "size" field.
func (vtuo *VersionTargetUpdateOne) ClearSize() *VersionTargetUpdateOne {
	vtuo.mutation.ClearSize()
	return vtuo
}

// SetVersion sets the "version" edge to the Version entity.
func (vtuo *VersionTargetUpdateOne) SetVersion(v *Version) *VersionTargetUpdateOne {
	return vtuo.SetVersionID(v.ID)
}

// Mutation returns the VersionTargetMutation object of the builder.
func (vtuo *VersionTargetUpdateOne) Mutation() *VersionTargetMutation {
	return vtuo.mutation
}

// ClearVersion clears the "version" edge to the Version entity.
func (vtuo *VersionTargetUpdateOne) ClearVersion() *VersionTargetUpdateOne {
	vtuo.mutation.ClearVersion()
	return vtuo
}

// Where appends a list predicates to the VersionTargetUpdate builder.
func (vtuo *VersionTargetUpdateOne) Where(ps ...predicate.VersionTarget) *VersionTargetUpdateOne {
	vtuo.mutation.Where(ps...)
	return vtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vtuo *VersionTargetUpdateOne) Select(field string, fields ...string) *VersionTargetUpdateOne {
	vtuo.fields = append([]string{field}, fields...)
	return vtuo
}

// Save executes the query and returns the updated VersionTarget entity.
func (vtuo *VersionTargetUpdateOne) Save(ctx context.Context) (*VersionTarget, error) {
	return withHooks(ctx, vtuo.sqlSave, vtuo.mutation, vtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtuo *VersionTargetUpdateOne) SaveX(ctx context.Context) *VersionTarget {
	node, err := vtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vtuo *VersionTargetUpdateOne) Exec(ctx context.Context) error {
	_, err := vtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtuo *VersionTargetUpdateOne) ExecX(ctx context.Context) {
	if err := vtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtuo *VersionTargetUpdateOne) check() error {
	if vtuo.mutation.VersionCleared() && len(vtuo.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VersionTarget.version"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vtuo *VersionTargetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionTargetUpdateOne {
	vtuo.modifiers = append(vtuo.modifiers, modifiers...)
	return vtuo
}

func (vtuo *VersionTargetUpdateOne) sqlSave(ctx context.Context) (_node *VersionTarget, err error) {
	if err := vtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(versiontarget.Table, versiontarget.Columns, sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString))
	id, ok := vtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VersionTarget.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, versiontarget.FieldID)
		for _, f := range fields {
			if !versiontarget.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != versiontarget.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtuo.mutation.TargetName(); ok {
		_spec.SetField(versiontarget.FieldTargetName, field.TypeString, value)
	}
	if value, ok := vtuo.mutation.Key(); ok {
		_spec.SetField(versiontarget.FieldKey, field.TypeString, value)
	}
	if vtuo.mutation.KeyCleared() {
		_spec.ClearField(versiontarget.FieldKey, field.TypeString)
	}
	if value, ok := vtuo.mutation.Hash(); ok {
		_spec.SetField(versiontarget.FieldHash, field.TypeString, value)
	}
	if vtuo.mutation.HashCleared() {
		_spec.ClearField(versiontarget.FieldHash, field.TypeString)
	}
	if value, ok := vtuo.mutation.Size(); ok {
		_spec.SetField(versiontarget.FieldSize, field.TypeInt64, value)
	}
	if value, ok := vtuo.mutation.AddedSize(); ok {
		_spec.AddField(versiontarget.FieldSize, field.TypeInt64, value)
	}
	if vtuo.mutation.SizeCleared() {
		_spec.ClearField(versiontarget.FieldSize, field.TypeInt64)
	}
	if vtuo.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   versiontarget.VersionTable,
			Columns: []string{versiontarget.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vtuo.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   versiontarget.VersionTable,
			Columns: []string{versiontarget.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vtuo.modifiers...)
	_node = &VersionTarget{config: vtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{versiontarget.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vtuo.mutation.done = true
	return _node, nil
}
