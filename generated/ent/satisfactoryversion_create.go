// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/satisfactoryversion"
)

// SatisfactoryVersionCreate is the builder for creating a SatisfactoryVersion entity.
type SatisfactoryVersionCreate struct {
	config
	mutation *SatisfactoryVersionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (svc *SatisfactoryVersionCreate) SetCreatedAt(t time.Time) *SatisfactoryVersionCreate {
	svc.mutation.SetCreatedAt(t)
	return svc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svc *SatisfactoryVersionCreate) SetNillableCreatedAt(t *time.Time) *SatisfactoryVersionCreate {
	if t != nil {
		svc.SetCreatedAt(*t)
	}
	return svc
}

// SetUpdatedAt sets the "updated_at" field.
func (svc *SatisfactoryVersionCreate) SetUpdatedAt(t time.Time) *SatisfactoryVersionCreate {
	svc.mutation.SetUpdatedAt(t)
	return svc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (svc *SatisfactoryVersionCreate) SetNillableUpdatedAt(t *time.Time) *SatisfactoryVersionCreate {
	if t != nil {
		svc.SetUpdatedAt(*t)
	}
	return svc
}

// SetDeletedAt sets the "deleted_at" field.
func (svc *SatisfactoryVersionCreate) SetDeletedAt(t time.Time) *SatisfactoryVersionCreate {
	svc.mutation.SetDeletedAt(t)
	return svc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (svc *SatisfactoryVersionCreate) SetNillableDeletedAt(t *time.Time) *SatisfactoryVersionCreate {
	if t != nil {
		svc.SetDeletedAt(*t)
	}
	return svc
}

// SetVersion sets the "version" field.
func (svc *SatisfactoryVersionCreate) SetVersion(i int) *SatisfactoryVersionCreate {
	svc.mutation.SetVersion(i)
	return svc
}

// SetEngineVersion sets the "engine_version" field.
func (svc *SatisfactoryVersionCreate) SetEngineVersion(s string) *SatisfactoryVersionCreate {
	svc.mutation.SetEngineVersion(s)
	return svc
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (svc *SatisfactoryVersionCreate) SetNillableEngineVersion(s *string) *SatisfactoryVersionCreate {
	if s != nil {
		svc.SetEngineVersion(*s)
	}
	return svc
}

// SetID sets the "id" field.
func (svc *SatisfactoryVersionCreate) SetID(s string) *SatisfactoryVersionCreate {
	svc.mutation.SetID(s)
	return svc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (svc *SatisfactoryVersionCreate) SetNillableID(s *string) *SatisfactoryVersionCreate {
	if s != nil {
		svc.SetID(*s)
	}
	return svc
}

// Mutation returns the SatisfactoryVersionMutation object of the builder.
func (svc *SatisfactoryVersionCreate) Mutation() *SatisfactoryVersionMutation {
	return svc.mutation
}

// Save creates the SatisfactoryVersion in the database.
func (svc *SatisfactoryVersionCreate) Save(ctx context.Context) (*SatisfactoryVersion, error) {
	if err := svc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *SatisfactoryVersionCreate) SaveX(ctx context.Context) *SatisfactoryVersion {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *SatisfactoryVersionCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *SatisfactoryVersionCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svc *SatisfactoryVersionCreate) defaults() error {
	if _, ok := svc.mutation.CreatedAt(); !ok {
		if satisfactoryversion.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized satisfactoryversion.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := satisfactoryversion.DefaultCreatedAt()
		svc.mutation.SetCreatedAt(v)
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		if satisfactoryversion.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized satisfactoryversion.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := satisfactoryversion.DefaultUpdatedAt()
		svc.mutation.SetUpdatedAt(v)
	}
	if _, ok := svc.mutation.EngineVersion(); !ok {
		v := satisfactoryversion.DefaultEngineVersion
		svc.mutation.SetEngineVersion(v)
	}
	if _, ok := svc.mutation.ID(); !ok {
		if satisfactoryversion.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized satisfactoryversion.DefaultID (forgotten import ent/runtime?)")
		}
		v := satisfactoryversion.DefaultID()
		svc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (svc *SatisfactoryVersionCreate) check() error {
	if _, ok := svc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SatisfactoryVersion.created_at"`)}
	}
	if _, ok := svc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SatisfactoryVersion.updated_at"`)}
	}
	if _, ok := svc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "SatisfactoryVersion.version"`)}
	}
	if _, ok := svc.mutation.EngineVersion(); !ok {
		return &ValidationError{Name: "engine_version", err: errors.New(`ent: missing required field "SatisfactoryVersion.engine_version"`)}
	}
	if v, ok := svc.mutation.EngineVersion(); ok {
		if err := satisfactoryversion.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "SatisfactoryVersion.engine_version": %w`, err)}
		}
	}
	return nil
}

func (svc *SatisfactoryVersionCreate) sqlSave(ctx context.Context) (*SatisfactoryVersion, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SatisfactoryVersion.ID type: %T", _spec.ID.Value)
		}
	}
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *SatisfactoryVersionCreate) createSpec() (*SatisfactoryVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &SatisfactoryVersion{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(satisfactoryversion.Table, sqlgraph.NewFieldSpec(satisfactoryversion.FieldID, field.TypeString))
	)
	_spec.OnConflict = svc.conflict
	if id, ok := svc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := svc.mutation.CreatedAt(); ok {
		_spec.SetField(satisfactoryversion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := svc.mutation.UpdatedAt(); ok {
		_spec.SetField(satisfactoryversion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := svc.mutation.DeletedAt(); ok {
		_spec.SetField(satisfactoryversion.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := svc.mutation.Version(); ok {
		_spec.SetField(satisfactoryversion.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := svc.mutation.EngineVersion(); ok {
		_spec.SetField(satisfactoryversion.FieldEngineVersion, field.TypeString, value)
		_node.EngineVersion = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SatisfactoryVersion.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SatisfactoryVersionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (svc *SatisfactoryVersionCreate) OnConflict(opts ...sql.ConflictOption) *SatisfactoryVersionUpsertOne {
	svc.conflict = opts
	return &SatisfactoryVersionUpsertOne{
		create: svc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SatisfactoryVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (svc *SatisfactoryVersionCreate) OnConflictColumns(columns ...string) *SatisfactoryVersionUpsertOne {
	svc.conflict = append(svc.conflict, sql.ConflictColumns(columns...))
	return &SatisfactoryVersionUpsertOne{
		create: svc,
	}
}

type (
	// SatisfactoryVersionUpsertOne is the builder for "upsert"-ing
	//  one SatisfactoryVersion node.
	SatisfactoryVersionUpsertOne struct {
		create *SatisfactoryVersionCreate
	}

	// SatisfactoryVersionUpsert is the "OnConflict" setter.
	SatisfactoryVersionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SatisfactoryVersionUpsert) SetUpdatedAt(v time.Time) *SatisfactoryVersionUpsert {
	u.Set(satisfactoryversion.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsert) UpdateUpdatedAt() *SatisfactoryVersionUpsert {
	u.SetExcluded(satisfactoryversion.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SatisfactoryVersionUpsert) SetDeletedAt(v time.Time) *SatisfactoryVersionUpsert {
	u.Set(satisfactoryversion.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsert) UpdateDeletedAt() *SatisfactoryVersionUpsert {
	u.SetExcluded(satisfactoryversion.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SatisfactoryVersionUpsert) ClearDeletedAt() *SatisfactoryVersionUpsert {
	u.SetNull(satisfactoryversion.FieldDeletedAt)
	return u
}

// SetVersion sets the "version" field.
func (u *SatisfactoryVersionUpsert) SetVersion(v int) *SatisfactoryVersionUpsert {
	u.Set(satisfactoryversion.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsert) UpdateVersion() *SatisfactoryVersionUpsert {
	u.SetExcluded(satisfactoryversion.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *SatisfactoryVersionUpsert) AddVersion(v int) *SatisfactoryVersionUpsert {
	u.Add(satisfactoryversion.FieldVersion, v)
	return u
}

// SetEngineVersion sets the "engine_version" field.
func (u *SatisfactoryVersionUpsert) SetEngineVersion(v string) *SatisfactoryVersionUpsert {
	u.Set(satisfactoryversion.FieldEngineVersion, v)
	return u
}

// UpdateEngineVersion sets the "engine_version" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsert) UpdateEngineVersion() *SatisfactoryVersionUpsert {
	u.SetExcluded(satisfactoryversion.FieldEngineVersion)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SatisfactoryVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(satisfactoryversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SatisfactoryVersionUpsertOne) UpdateNewValues() *SatisfactoryVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(satisfactoryversion.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(satisfactoryversion.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SatisfactoryVersion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SatisfactoryVersionUpsertOne) Ignore() *SatisfactoryVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SatisfactoryVersionUpsertOne) DoNothing() *SatisfactoryVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SatisfactoryVersionCreate.OnConflict
// documentation for more info.
func (u *SatisfactoryVersionUpsertOne) Update(set func(*SatisfactoryVersionUpsert)) *SatisfactoryVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SatisfactoryVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SatisfactoryVersionUpsertOne) SetUpdatedAt(v time.Time) *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertOne) UpdateUpdatedAt() *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SatisfactoryVersionUpsertOne) SetDeletedAt(v time.Time) *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertOne) UpdateDeletedAt() *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SatisfactoryVersionUpsertOne) ClearDeletedAt() *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetVersion sets the "version" field.
func (u *SatisfactoryVersionUpsertOne) SetVersion(v int) *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *SatisfactoryVersionUpsertOne) AddVersion(v int) *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertOne) UpdateVersion() *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateVersion()
	})
}

// SetEngineVersion sets the "engine_version" field.
func (u *SatisfactoryVersionUpsertOne) SetEngineVersion(v string) *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetEngineVersion(v)
	})
}

// UpdateEngineVersion sets the "engine_version" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertOne) UpdateEngineVersion() *SatisfactoryVersionUpsertOne {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateEngineVersion()
	})
}

// Exec executes the query.
func (u *SatisfactoryVersionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SatisfactoryVersionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SatisfactoryVersionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SatisfactoryVersionUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SatisfactoryVersionUpsertOne.ID is not supported by MySQL driver. Use SatisfactoryVersionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SatisfactoryVersionUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SatisfactoryVersionCreateBulk is the builder for creating many SatisfactoryVersion entities in bulk.
type SatisfactoryVersionCreateBulk struct {
	config
	err      error
	builders []*SatisfactoryVersionCreate
	conflict []sql.ConflictOption
}

// Save creates the SatisfactoryVersion entities in the database.
func (svcb *SatisfactoryVersionCreateBulk) Save(ctx context.Context) ([]*SatisfactoryVersion, error) {
	if svcb.err != nil {
		return nil, svcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*SatisfactoryVersion, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SatisfactoryVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = svcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *SatisfactoryVersionCreateBulk) SaveX(ctx context.Context) []*SatisfactoryVersion {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *SatisfactoryVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *SatisfactoryVersionCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SatisfactoryVersion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SatisfactoryVersionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (svcb *SatisfactoryVersionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SatisfactoryVersionUpsertBulk {
	svcb.conflict = opts
	return &SatisfactoryVersionUpsertBulk{
		create: svcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SatisfactoryVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (svcb *SatisfactoryVersionCreateBulk) OnConflictColumns(columns ...string) *SatisfactoryVersionUpsertBulk {
	svcb.conflict = append(svcb.conflict, sql.ConflictColumns(columns...))
	return &SatisfactoryVersionUpsertBulk{
		create: svcb,
	}
}

// SatisfactoryVersionUpsertBulk is the builder for "upsert"-ing
// a bulk of SatisfactoryVersion nodes.
type SatisfactoryVersionUpsertBulk struct {
	create *SatisfactoryVersionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SatisfactoryVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(satisfactoryversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SatisfactoryVersionUpsertBulk) UpdateNewValues() *SatisfactoryVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(satisfactoryversion.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(satisfactoryversion.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SatisfactoryVersion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SatisfactoryVersionUpsertBulk) Ignore() *SatisfactoryVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SatisfactoryVersionUpsertBulk) DoNothing() *SatisfactoryVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SatisfactoryVersionCreateBulk.OnConflict
// documentation for more info.
func (u *SatisfactoryVersionUpsertBulk) Update(set func(*SatisfactoryVersionUpsert)) *SatisfactoryVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SatisfactoryVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SatisfactoryVersionUpsertBulk) SetUpdatedAt(v time.Time) *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertBulk) UpdateUpdatedAt() *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SatisfactoryVersionUpsertBulk) SetDeletedAt(v time.Time) *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertBulk) UpdateDeletedAt() *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SatisfactoryVersionUpsertBulk) ClearDeletedAt() *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetVersion sets the "version" field.
func (u *SatisfactoryVersionUpsertBulk) SetVersion(v int) *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *SatisfactoryVersionUpsertBulk) AddVersion(v int) *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertBulk) UpdateVersion() *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateVersion()
	})
}

// SetEngineVersion sets the "engine_version" field.
func (u *SatisfactoryVersionUpsertBulk) SetEngineVersion(v string) *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.SetEngineVersion(v)
	})
}

// UpdateEngineVersion sets the "engine_version" field to the value that was provided on create.
func (u *SatisfactoryVersionUpsertBulk) UpdateEngineVersion() *SatisfactoryVersionUpsertBulk {
	return u.Update(func(s *SatisfactoryVersionUpsert) {
		s.UpdateEngineVersion()
	})
}

// Exec executes the query.
func (u *SatisfactoryVersionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SatisfactoryVersionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SatisfactoryVersionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SatisfactoryVersionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
