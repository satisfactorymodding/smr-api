// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent"
	"github.com/satisfactorymodding/smr-api/generated/ent/announcement"
	"github.com/satisfactorymodding/smr-api/generated/ent/guide"
	"github.com/satisfactorymodding/smr-api/generated/ent/guidetag"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/modtag"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/satisfactoryversion"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
	"github.com/satisfactorymodding/smr-api/generated/ent/usergroup"
	"github.com/satisfactorymodding/smr-api/generated/ent/usermod"
	"github.com/satisfactorymodding/smr-api/generated/ent/usersession"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiondependency"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiontarget"
	"github.com/satisfactorymodding/smr-api/generated/ent/virustotalresult"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The AnnouncementFunc type is an adapter to allow the use of ordinary function as a Querier.
type AnnouncementFunc func(context.Context, *ent.AnnouncementQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AnnouncementFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AnnouncementQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AnnouncementQuery", q)
}

// The TraverseAnnouncement type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAnnouncement func(context.Context, *ent.AnnouncementQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAnnouncement) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAnnouncement) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AnnouncementQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AnnouncementQuery", q)
}

// The GuideFunc type is an adapter to allow the use of ordinary function as a Querier.
type GuideFunc func(context.Context, *ent.GuideQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f GuideFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.GuideQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.GuideQuery", q)
}

// The TraverseGuide type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGuide func(context.Context, *ent.GuideQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGuide) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGuide) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GuideQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.GuideQuery", q)
}

// The GuideTagFunc type is an adapter to allow the use of ordinary function as a Querier.
type GuideTagFunc func(context.Context, *ent.GuideTagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f GuideTagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.GuideTagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.GuideTagQuery", q)
}

// The TraverseGuideTag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseGuideTag func(context.Context, *ent.GuideTagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseGuideTag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseGuideTag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.GuideTagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.GuideTagQuery", q)
}

// The ModFunc type is an adapter to allow the use of ordinary function as a Querier.
type ModFunc func(context.Context, *ent.ModQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ModFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ModQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ModQuery", q)
}

// The TraverseMod type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMod func(context.Context, *ent.ModQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMod) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMod) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ModQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ModQuery", q)
}

// The ModTagFunc type is an adapter to allow the use of ordinary function as a Querier.
type ModTagFunc func(context.Context, *ent.ModTagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ModTagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ModTagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ModTagQuery", q)
}

// The TraverseModTag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseModTag func(context.Context, *ent.ModTagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseModTag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseModTag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ModTagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ModTagQuery", q)
}

// The SatisfactoryVersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type SatisfactoryVersionFunc func(context.Context, *ent.SatisfactoryVersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SatisfactoryVersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SatisfactoryVersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SatisfactoryVersionQuery", q)
}

// The TraverseSatisfactoryVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSatisfactoryVersion func(context.Context, *ent.SatisfactoryVersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSatisfactoryVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSatisfactoryVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SatisfactoryVersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SatisfactoryVersionQuery", q)
}

// The TagFunc type is an adapter to allow the use of ordinary function as a Querier.
type TagFunc func(context.Context, *ent.TagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TagQuery", q)
}

// The TraverseTag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTag func(context.Context, *ent.TagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TagQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserGroupFunc func(context.Context, *ent.UserGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserGroupQuery", q)
}

// The TraverseUserGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserGroup func(context.Context, *ent.UserGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserGroupQuery", q)
}

// The UserModFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserModFunc func(context.Context, *ent.UserModQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserModFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserModQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserModQuery", q)
}

// The TraverseUserMod type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserMod func(context.Context, *ent.UserModQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserMod) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserMod) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserModQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserModQuery", q)
}

// The UserSessionFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserSessionFunc func(context.Context, *ent.UserSessionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserSessionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserSessionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserSessionQuery", q)
}

// The TraverseUserSession type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserSession func(context.Context, *ent.UserSessionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserSession) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserSession) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserSessionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserSessionQuery", q)
}

// The VersionFunc type is an adapter to allow the use of ordinary function as a Querier.
type VersionFunc func(context.Context, *ent.VersionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VersionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VersionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VersionQuery", q)
}

// The TraverseVersion type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVersion func(context.Context, *ent.VersionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVersion) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVersion) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VersionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VersionQuery", q)
}

// The VersionDependencyFunc type is an adapter to allow the use of ordinary function as a Querier.
type VersionDependencyFunc func(context.Context, *ent.VersionDependencyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VersionDependencyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VersionDependencyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VersionDependencyQuery", q)
}

// The TraverseVersionDependency type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVersionDependency func(context.Context, *ent.VersionDependencyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVersionDependency) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVersionDependency) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VersionDependencyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VersionDependencyQuery", q)
}

// The VersionTargetFunc type is an adapter to allow the use of ordinary function as a Querier.
type VersionTargetFunc func(context.Context, *ent.VersionTargetQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VersionTargetFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VersionTargetQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VersionTargetQuery", q)
}

// The TraverseVersionTarget type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVersionTarget func(context.Context, *ent.VersionTargetQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVersionTarget) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVersionTarget) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VersionTargetQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VersionTargetQuery", q)
}

// The VirustotalResultFunc type is an adapter to allow the use of ordinary function as a Querier.
type VirustotalResultFunc func(context.Context, *ent.VirustotalResultQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f VirustotalResultFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.VirustotalResultQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.VirustotalResultQuery", q)
}

// The TraverseVirustotalResult type is an adapter to allow the use of ordinary function as Traverser.
type TraverseVirustotalResult func(context.Context, *ent.VirustotalResultQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseVirustotalResult) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseVirustotalResult) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VirustotalResultQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.VirustotalResultQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.AnnouncementQuery:
		return &query[*ent.AnnouncementQuery, predicate.Announcement, announcement.OrderOption]{typ: ent.TypeAnnouncement, tq: q}, nil
	case *ent.GuideQuery:
		return &query[*ent.GuideQuery, predicate.Guide, guide.OrderOption]{typ: ent.TypeGuide, tq: q}, nil
	case *ent.GuideTagQuery:
		return &query[*ent.GuideTagQuery, predicate.GuideTag, guidetag.OrderOption]{typ: ent.TypeGuideTag, tq: q}, nil
	case *ent.ModQuery:
		return &query[*ent.ModQuery, predicate.Mod, mod.OrderOption]{typ: ent.TypeMod, tq: q}, nil
	case *ent.ModTagQuery:
		return &query[*ent.ModTagQuery, predicate.ModTag, modtag.OrderOption]{typ: ent.TypeModTag, tq: q}, nil
	case *ent.SatisfactoryVersionQuery:
		return &query[*ent.SatisfactoryVersionQuery, predicate.SatisfactoryVersion, satisfactoryversion.OrderOption]{typ: ent.TypeSatisfactoryVersion, tq: q}, nil
	case *ent.TagQuery:
		return &query[*ent.TagQuery, predicate.Tag, tag.OrderOption]{typ: ent.TypeTag, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserGroupQuery:
		return &query[*ent.UserGroupQuery, predicate.UserGroup, usergroup.OrderOption]{typ: ent.TypeUserGroup, tq: q}, nil
	case *ent.UserModQuery:
		return &query[*ent.UserModQuery, predicate.UserMod, usermod.OrderOption]{typ: ent.TypeUserMod, tq: q}, nil
	case *ent.UserSessionQuery:
		return &query[*ent.UserSessionQuery, predicate.UserSession, usersession.OrderOption]{typ: ent.TypeUserSession, tq: q}, nil
	case *ent.VersionQuery:
		return &query[*ent.VersionQuery, predicate.Version, version.OrderOption]{typ: ent.TypeVersion, tq: q}, nil
	case *ent.VersionDependencyQuery:
		return &query[*ent.VersionDependencyQuery, predicate.VersionDependency, versiondependency.OrderOption]{typ: ent.TypeVersionDependency, tq: q}, nil
	case *ent.VersionTargetQuery:
		return &query[*ent.VersionTargetQuery, predicate.VersionTarget, versiontarget.OrderOption]{typ: ent.TypeVersionTarget, tq: q}, nil
	case *ent.VirustotalResultQuery:
		return &query[*ent.VirustotalResultQuery, predicate.VirustotalResult, virustotalresult.OrderOption]{typ: ent.TypeVirustotalResult, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
