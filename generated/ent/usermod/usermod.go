// Code generated by ent, DO NOT EDIT.

package usermod

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usermod type in the database.
	Label = "user_mod"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldModID holds the string denoting the mod_id field in the database.
	FieldModID = "mod_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeMod holds the string denoting the mod edge name in mutations.
	EdgeMod = "mod"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// ModFieldID holds the string denoting the ID field of the Mod.
	ModFieldID = "id"
	// Table holds the table name of the usermod in the database.
	Table = "user_mods"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_mods"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ModTable is the table that holds the mod relation/edge.
	ModTable = "user_mods"
	// ModInverseTable is the table name for the Mod entity.
	// It exists in this package in order to avoid circular dependency with the "mod" package.
	ModInverseTable = "mods"
	// ModColumn is the table column denoting the mod relation/edge.
	ModColumn = "mod_id"
)

// Columns holds all SQL columns for usermod fields.
var Columns = []string{
	FieldUserID,
	FieldModID,
	FieldRole,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserMod queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByModID orders the results by the mod_id field.
func ByModID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModID, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByModField orders the results by mod field.
func ByModField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newModStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ModColumn),
		sqlgraph.To(ModInverseTable, ModFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ModTable, ModColumn),
	)
}
