// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/guide"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
)

// Guide is the model entity for the Guide schema.
type Guide struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ShortDescription holds the value of the "short_description" field.
	ShortDescription string `json:"short_description,omitempty"`
	// Guide holds the value of the "guide" field.
	Guide string `json:"guide,omitempty"`
	// Views holds the value of the "views" field.
	Views int `json:"views,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuideQuery when eager-loading is set.
	Edges        GuideEdges `json:"edges"`
	user_id      *string
	selectValues sql.SelectValues
}

// GuideEdges holds the relations/edges for other nodes in the graph.
type GuideEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// GuideTags holds the value of the guide_tags edge.
	GuideTags []*GuideTag `json:"guide_tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuideEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e GuideEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// GuideTagsOrErr returns the GuideTags value or an error if the edge
// was not loaded in eager-loading.
func (e GuideEdges) GuideTagsOrErr() ([]*GuideTag, error) {
	if e.loadedTypes[2] {
		return e.GuideTags, nil
	}
	return nil, &NotLoadedError{edge: "guide_tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Guide) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guide.FieldViews:
			values[i] = new(sql.NullInt64)
		case guide.FieldID, guide.FieldName, guide.FieldShortDescription, guide.FieldGuide:
			values[i] = new(sql.NullString)
		case guide.FieldCreatedAt, guide.FieldUpdatedAt, guide.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case guide.ForeignKeys[0]: // user_id
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Guide fields.
func (gu *Guide) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guide.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gu.ID = value.String
			}
		case guide.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gu.CreatedAt = value.Time
			}
		case guide.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gu.UpdatedAt = value.Time
			}
		case guide.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gu.DeletedAt = value.Time
			}
		case guide.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gu.Name = value.String
			}
		case guide.FieldShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_description", values[i])
			} else if value.Valid {
				gu.ShortDescription = value.String
			}
		case guide.FieldGuide:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guide", values[i])
			} else if value.Valid {
				gu.Guide = value.String
			}
		case guide.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				gu.Views = int(value.Int64)
			}
		case guide.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				gu.user_id = new(string)
				*gu.user_id = value.String
			}
		default:
			gu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Guide.
// This includes values selected through modifiers, order, etc.
func (gu *Guide) Value(name string) (ent.Value, error) {
	return gu.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Guide entity.
func (gu *Guide) QueryUser() *UserQuery {
	return NewGuideClient(gu.config).QueryUser(gu)
}

// QueryTags queries the "tags" edge of the Guide entity.
func (gu *Guide) QueryTags() *TagQuery {
	return NewGuideClient(gu.config).QueryTags(gu)
}

// QueryGuideTags queries the "guide_tags" edge of the Guide entity.
func (gu *Guide) QueryGuideTags() *GuideTagQuery {
	return NewGuideClient(gu.config).QueryGuideTags(gu)
}

// Update returns a builder for updating this Guide.
// Note that you need to call Guide.Unwrap() before calling this method if this Guide
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *Guide) Update() *GuideUpdateOne {
	return NewGuideClient(gu.config).UpdateOne(gu)
}

// Unwrap unwraps the Guide entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gu *Guide) Unwrap() *Guide {
	_tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Guide is not a transactional entity")
	}
	gu.config.driver = _tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *Guide) String() string {
	var builder strings.Builder
	builder.WriteString("Guide(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(gu.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gu.Name)
	builder.WriteString(", ")
	builder.WriteString("short_description=")
	builder.WriteString(gu.ShortDescription)
	builder.WriteString(", ")
	builder.WriteString("guide=")
	builder.WriteString(gu.Guide)
	builder.WriteString(", ")
	builder.WriteString("views=")
	builder.WriteString(fmt.Sprintf("%v", gu.Views))
	builder.WriteByte(')')
	return builder.String()
}

// Guides is a parsable slice of Guide.
type Guides []*Guide
