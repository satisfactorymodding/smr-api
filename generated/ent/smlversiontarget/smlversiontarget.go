// Code generated by ent, DO NOT EDIT.

package smlversiontarget

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the smlversiontarget type in the database.
	Label = "sml_version_target"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersionID holds the string denoting the version_id field in the database.
	FieldVersionID = "version_id"
	// FieldTargetName holds the string denoting the target_name field in the database.
	FieldTargetName = "target_name"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// EdgeSmlVersion holds the string denoting the sml_version edge name in mutations.
	EdgeSmlVersion = "sml_version"
	// Table holds the table name of the smlversiontarget in the database.
	Table = "sml_version_targets"
	// SmlVersionTable is the table that holds the sml_version relation/edge.
	SmlVersionTable = "sml_version_targets"
	// SmlVersionInverseTable is the table name for the SmlVersion entity.
	// It exists in this package in order to avoid circular dependency with the "smlversion" package.
	SmlVersionInverseTable = "sml_versions"
	// SmlVersionColumn is the table column denoting the sml_version relation/edge.
	SmlVersionColumn = "version_id"
)

// Columns holds all SQL columns for smlversiontarget fields.
var Columns = []string{
	FieldID,
	FieldVersionID,
	FieldTargetName,
	FieldLink,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the SmlVersionTarget queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersionID orders the results by the version_id field.
func ByVersionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionID, opts...).ToFunc()
}

// ByTargetName orders the results by the target_name field.
func ByTargetName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetName, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// BySmlVersionField orders the results by sml_version field.
func BySmlVersionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSmlVersionStep(), sql.OrderByField(field, opts...))
	}
}
func newSmlVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SmlVersionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SmlVersionTable, SmlVersionColumn),
	)
}
