// Code generated by ent, DO NOT EDIT.

package versiontarget

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContainsFold(FieldID, id))
}

// VersionID applies equality check predicate on the "version_id" field. It's identical to VersionIDEQ.
func VersionID(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldVersionID, v))
}

// TargetName applies equality check predicate on the "target_name" field. It's identical to TargetNameEQ.
func TargetName(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldTargetName, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldKey, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldHash, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldSize, v))
}

// VersionIDEQ applies the EQ predicate on the "version_id" field.
func VersionIDEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldVersionID, v))
}

// VersionIDNEQ applies the NEQ predicate on the "version_id" field.
func VersionIDNEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNEQ(FieldVersionID, v))
}

// VersionIDIn applies the In predicate on the "version_id" field.
func VersionIDIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldIn(FieldVersionID, vs...))
}

// VersionIDNotIn applies the NotIn predicate on the "version_id" field.
func VersionIDNotIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNotIn(FieldVersionID, vs...))
}

// VersionIDGT applies the GT predicate on the "version_id" field.
func VersionIDGT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGT(FieldVersionID, v))
}

// VersionIDGTE applies the GTE predicate on the "version_id" field.
func VersionIDGTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGTE(FieldVersionID, v))
}

// VersionIDLT applies the LT predicate on the "version_id" field.
func VersionIDLT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLT(FieldVersionID, v))
}

// VersionIDLTE applies the LTE predicate on the "version_id" field.
func VersionIDLTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLTE(FieldVersionID, v))
}

// VersionIDContains applies the Contains predicate on the "version_id" field.
func VersionIDContains(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContains(FieldVersionID, v))
}

// VersionIDHasPrefix applies the HasPrefix predicate on the "version_id" field.
func VersionIDHasPrefix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasPrefix(FieldVersionID, v))
}

// VersionIDHasSuffix applies the HasSuffix predicate on the "version_id" field.
func VersionIDHasSuffix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasSuffix(FieldVersionID, v))
}

// VersionIDEqualFold applies the EqualFold predicate on the "version_id" field.
func VersionIDEqualFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEqualFold(FieldVersionID, v))
}

// VersionIDContainsFold applies the ContainsFold predicate on the "version_id" field.
func VersionIDContainsFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContainsFold(FieldVersionID, v))
}

// TargetNameEQ applies the EQ predicate on the "target_name" field.
func TargetNameEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldTargetName, v))
}

// TargetNameNEQ applies the NEQ predicate on the "target_name" field.
func TargetNameNEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNEQ(FieldTargetName, v))
}

// TargetNameIn applies the In predicate on the "target_name" field.
func TargetNameIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldIn(FieldTargetName, vs...))
}

// TargetNameNotIn applies the NotIn predicate on the "target_name" field.
func TargetNameNotIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNotIn(FieldTargetName, vs...))
}

// TargetNameGT applies the GT predicate on the "target_name" field.
func TargetNameGT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGT(FieldTargetName, v))
}

// TargetNameGTE applies the GTE predicate on the "target_name" field.
func TargetNameGTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGTE(FieldTargetName, v))
}

// TargetNameLT applies the LT predicate on the "target_name" field.
func TargetNameLT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLT(FieldTargetName, v))
}

// TargetNameLTE applies the LTE predicate on the "target_name" field.
func TargetNameLTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLTE(FieldTargetName, v))
}

// TargetNameContains applies the Contains predicate on the "target_name" field.
func TargetNameContains(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContains(FieldTargetName, v))
}

// TargetNameHasPrefix applies the HasPrefix predicate on the "target_name" field.
func TargetNameHasPrefix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasPrefix(FieldTargetName, v))
}

// TargetNameHasSuffix applies the HasSuffix predicate on the "target_name" field.
func TargetNameHasSuffix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasSuffix(FieldTargetName, v))
}

// TargetNameEqualFold applies the EqualFold predicate on the "target_name" field.
func TargetNameEqualFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEqualFold(FieldTargetName, v))
}

// TargetNameContainsFold applies the ContainsFold predicate on the "target_name" field.
func TargetNameContainsFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContainsFold(FieldTargetName, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContainsFold(FieldKey, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldContainsFold(FieldHash, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int64) predicate.VersionTarget {
	return predicate.VersionTarget(sql.FieldLTE(FieldSize, v))
}

// HasSmlVersion applies the HasEdge predicate on the "sml_version" edge.
func HasSmlVersion() predicate.VersionTarget {
	return predicate.VersionTarget(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SmlVersionTable, SmlVersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSmlVersionWith applies the HasEdge predicate on the "sml_version" edge with a given conditions (other predicates).
func HasSmlVersionWith(preds ...predicate.Version) predicate.VersionTarget {
	return predicate.VersionTarget(func(s *sql.Selector) {
		step := newSmlVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VersionTarget) predicate.VersionTarget {
	return predicate.VersionTarget(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VersionTarget) predicate.VersionTarget {
	return predicate.VersionTarget(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VersionTarget) predicate.VersionTarget {
	return predicate.VersionTarget(sql.NotPredicates(p))
}
