// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/db/postgres"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
)

// Mod is the model entity for the Mod schema.
type Mod struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ShortDescription holds the value of the "short_description" field.
	ShortDescription string `json:"short_description,omitempty"`
	// FullDescription holds the value of the "full_description" field.
	FullDescription string `json:"full_description,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// SourceURL holds the value of the "source_url" field.
	SourceURL string `json:"source_url,omitempty"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID string `json:"creator_id,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// Views holds the value of the "views" field.
	Views uint `json:"views,omitempty"`
	// Hotness holds the value of the "hotness" field.
	Hotness uint `json:"hotness,omitempty"`
	// Popularity holds the value of the "popularity" field.
	Popularity uint `json:"popularity,omitempty"`
	// Downloads holds the value of the "downloads" field.
	Downloads uint `json:"downloads,omitempty"`
	// Denied holds the value of the "denied" field.
	Denied bool `json:"denied,omitempty"`
	// LastVersionDate holds the value of the "last_version_date" field.
	LastVersionDate time.Time `json:"last_version_date,omitempty"`
	// ModReference holds the value of the "mod_reference" field.
	ModReference string `json:"mod_reference,omitempty"`
	// Hidden holds the value of the "hidden" field.
	Hidden bool `json:"hidden,omitempty"`
	// Compatibility holds the value of the "compatibility" field.
	Compatibility *postgres.CompatibilityInfo `json:"compatibility,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModQuery when eager-loading is set.
	Edges        ModEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModEdges holds the relations/edges for other nodes in the graph.
type ModEdges struct {
	// Versions holds the value of the versions edge.
	Versions []*Version `json:"versions,omitempty"`
	// Authors holds the value of the authors edge.
	Authors []*User `json:"authors,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Dependents holds the value of the dependents edge.
	Dependents []*Version `json:"dependents,omitempty"`
	// UserMods holds the value of the user_mods edge.
	UserMods []*UserMod `json:"user_mods,omitempty"`
	// ModTags holds the value of the mod_tags edge.
	ModTags []*ModTag `json:"mod_tags,omitempty"`
	// VersionDependencies holds the value of the version_dependencies edge.
	VersionDependencies []*VersionDependency `json:"version_dependencies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// VersionsOrErr returns the Versions value or an error if the edge
// was not loaded in eager-loading.
func (e ModEdges) VersionsOrErr() ([]*Version, error) {
	if e.loadedTypes[0] {
		return e.Versions, nil
	}
	return nil, &NotLoadedError{edge: "versions"}
}

// AuthorsOrErr returns the Authors value or an error if the edge
// was not loaded in eager-loading.
func (e ModEdges) AuthorsOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Authors, nil
	}
	return nil, &NotLoadedError{edge: "authors"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ModEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[2] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// DependentsOrErr returns the Dependents value or an error if the edge
// was not loaded in eager-loading.
func (e ModEdges) DependentsOrErr() ([]*Version, error) {
	if e.loadedTypes[3] {
		return e.Dependents, nil
	}
	return nil, &NotLoadedError{edge: "dependents"}
}

// UserModsOrErr returns the UserMods value or an error if the edge
// was not loaded in eager-loading.
func (e ModEdges) UserModsOrErr() ([]*UserMod, error) {
	if e.loadedTypes[4] {
		return e.UserMods, nil
	}
	return nil, &NotLoadedError{edge: "user_mods"}
}

// ModTagsOrErr returns the ModTags value or an error if the edge
// was not loaded in eager-loading.
func (e ModEdges) ModTagsOrErr() ([]*ModTag, error) {
	if e.loadedTypes[5] {
		return e.ModTags, nil
	}
	return nil, &NotLoadedError{edge: "mod_tags"}
}

// VersionDependenciesOrErr returns the VersionDependencies value or an error if the edge
// was not loaded in eager-loading.
func (e ModEdges) VersionDependenciesOrErr() ([]*VersionDependency, error) {
	if e.loadedTypes[6] {
		return e.VersionDependencies, nil
	}
	return nil, &NotLoadedError{edge: "version_dependencies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mod.FieldCompatibility:
			values[i] = new([]byte)
		case mod.FieldApproved, mod.FieldDenied, mod.FieldHidden:
			values[i] = new(sql.NullBool)
		case mod.FieldViews, mod.FieldHotness, mod.FieldPopularity, mod.FieldDownloads:
			values[i] = new(sql.NullInt64)
		case mod.FieldID, mod.FieldName, mod.FieldShortDescription, mod.FieldFullDescription, mod.FieldLogo, mod.FieldSourceURL, mod.FieldCreatorID, mod.FieldModReference:
			values[i] = new(sql.NullString)
		case mod.FieldCreatedAt, mod.FieldUpdatedAt, mod.FieldDeletedAt, mod.FieldLastVersionDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mod fields.
func (m *Mod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mod.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case mod.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case mod.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case mod.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = value.Time
			}
		case mod.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case mod.FieldShortDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_description", values[i])
			} else if value.Valid {
				m.ShortDescription = value.String
			}
		case mod.FieldFullDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_description", values[i])
			} else if value.Valid {
				m.FullDescription = value.String
			}
		case mod.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				m.Logo = value.String
			}
		case mod.FieldSourceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_url", values[i])
			} else if value.Valid {
				m.SourceURL = value.String
			}
		case mod.FieldCreatorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				m.CreatorID = value.String
			}
		case mod.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				m.Approved = value.Bool
			}
		case mod.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				m.Views = uint(value.Int64)
			}
		case mod.FieldHotness:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hotness", values[i])
			} else if value.Valid {
				m.Hotness = uint(value.Int64)
			}
		case mod.FieldPopularity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field popularity", values[i])
			} else if value.Valid {
				m.Popularity = uint(value.Int64)
			}
		case mod.FieldDownloads:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field downloads", values[i])
			} else if value.Valid {
				m.Downloads = uint(value.Int64)
			}
		case mod.FieldDenied:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field denied", values[i])
			} else if value.Valid {
				m.Denied = value.Bool
			}
		case mod.FieldLastVersionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_version_date", values[i])
			} else if value.Valid {
				m.LastVersionDate = value.Time
			}
		case mod.FieldModReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mod_reference", values[i])
			} else if value.Valid {
				m.ModReference = value.String
			}
		case mod.FieldHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hidden", values[i])
			} else if value.Valid {
				m.Hidden = value.Bool
			}
		case mod.FieldCompatibility:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field compatibility", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Compatibility); err != nil {
					return fmt.Errorf("unmarshal field compatibility: %w", err)
				}
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mod.
// This includes values selected through modifiers, order, etc.
func (m *Mod) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryVersions queries the "versions" edge of the Mod entity.
func (m *Mod) QueryVersions() *VersionQuery {
	return NewModClient(m.config).QueryVersions(m)
}

// QueryAuthors queries the "authors" edge of the Mod entity.
func (m *Mod) QueryAuthors() *UserQuery {
	return NewModClient(m.config).QueryAuthors(m)
}

// QueryTags queries the "tags" edge of the Mod entity.
func (m *Mod) QueryTags() *TagQuery {
	return NewModClient(m.config).QueryTags(m)
}

// QueryDependents queries the "dependents" edge of the Mod entity.
func (m *Mod) QueryDependents() *VersionQuery {
	return NewModClient(m.config).QueryDependents(m)
}

// QueryUserMods queries the "user_mods" edge of the Mod entity.
func (m *Mod) QueryUserMods() *UserModQuery {
	return NewModClient(m.config).QueryUserMods(m)
}

// QueryModTags queries the "mod_tags" edge of the Mod entity.
func (m *Mod) QueryModTags() *ModTagQuery {
	return NewModClient(m.config).QueryModTags(m)
}

// QueryVersionDependencies queries the "version_dependencies" edge of the Mod entity.
func (m *Mod) QueryVersionDependencies() *VersionDependencyQuery {
	return NewModClient(m.config).QueryVersionDependencies(m)
}

// Update returns a builder for updating this Mod.
// Note that you need to call Mod.Unwrap() before calling this method if this Mod
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mod) Update() *ModUpdateOne {
	return NewModClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mod) Unwrap() *Mod {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mod is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mod) String() string {
	var builder strings.Builder
	builder.WriteString("Mod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("short_description=")
	builder.WriteString(m.ShortDescription)
	builder.WriteString(", ")
	builder.WriteString("full_description=")
	builder.WriteString(m.FullDescription)
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(m.Logo)
	builder.WriteString(", ")
	builder.WriteString("source_url=")
	builder.WriteString(m.SourceURL)
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(m.CreatorID)
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", m.Approved))
	builder.WriteString(", ")
	builder.WriteString("views=")
	builder.WriteString(fmt.Sprintf("%v", m.Views))
	builder.WriteString(", ")
	builder.WriteString("hotness=")
	builder.WriteString(fmt.Sprintf("%v", m.Hotness))
	builder.WriteString(", ")
	builder.WriteString("popularity=")
	builder.WriteString(fmt.Sprintf("%v", m.Popularity))
	builder.WriteString(", ")
	builder.WriteString("downloads=")
	builder.WriteString(fmt.Sprintf("%v", m.Downloads))
	builder.WriteString(", ")
	builder.WriteString("denied=")
	builder.WriteString(fmt.Sprintf("%v", m.Denied))
	builder.WriteString(", ")
	builder.WriteString("last_version_date=")
	builder.WriteString(m.LastVersionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mod_reference=")
	builder.WriteString(m.ModReference)
	builder.WriteString(", ")
	builder.WriteString("hidden=")
	builder.WriteString(fmt.Sprintf("%v", m.Hidden))
	builder.WriteString(", ")
	builder.WriteString("compatibility=")
	builder.WriteString(fmt.Sprintf("%v", m.Compatibility))
	builder.WriteByte(')')
	return builder.String()
}

// Mods is a parsable slice of Mod.
type Mods []*Mod
