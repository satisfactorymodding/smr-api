// Code generated by ent, DO NOT EDIT.

package smlversion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldDeletedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldVersion, v))
}

// SatisfactoryVersion applies equality check predicate on the "satisfactory_version" field. It's identical to SatisfactoryVersionEQ.
func SatisfactoryVersion(v int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldSatisfactoryVersion, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldDate, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldLink, v))
}

// Changelog applies equality check predicate on the "changelog" field. It's identical to ChangelogEQ.
func Changelog(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldChangelog, v))
}

// BootstrapVersion applies equality check predicate on the "bootstrap_version" field. It's identical to BootstrapVersionEQ.
func BootstrapVersion(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldBootstrapVersion, v))
}

// EngineVersion applies equality check predicate on the "engine_version" field. It's identical to EngineVersionEQ.
func EngineVersion(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldEngineVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotNull(FieldDeletedAt))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContainsFold(FieldVersion, v))
}

// SatisfactoryVersionEQ applies the EQ predicate on the "satisfactory_version" field.
func SatisfactoryVersionEQ(v int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldSatisfactoryVersion, v))
}

// SatisfactoryVersionNEQ applies the NEQ predicate on the "satisfactory_version" field.
func SatisfactoryVersionNEQ(v int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldSatisfactoryVersion, v))
}

// SatisfactoryVersionIn applies the In predicate on the "satisfactory_version" field.
func SatisfactoryVersionIn(vs ...int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldSatisfactoryVersion, vs...))
}

// SatisfactoryVersionNotIn applies the NotIn predicate on the "satisfactory_version" field.
func SatisfactoryVersionNotIn(vs ...int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldSatisfactoryVersion, vs...))
}

// SatisfactoryVersionGT applies the GT predicate on the "satisfactory_version" field.
func SatisfactoryVersionGT(v int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldSatisfactoryVersion, v))
}

// SatisfactoryVersionGTE applies the GTE predicate on the "satisfactory_version" field.
func SatisfactoryVersionGTE(v int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldSatisfactoryVersion, v))
}

// SatisfactoryVersionLT applies the LT predicate on the "satisfactory_version" field.
func SatisfactoryVersionLT(v int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldSatisfactoryVersion, v))
}

// SatisfactoryVersionLTE applies the LTE predicate on the "satisfactory_version" field.
func SatisfactoryVersionLTE(v int) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldSatisfactoryVersion, v))
}

// StabilityEQ applies the EQ predicate on the "stability" field.
func StabilityEQ(v Stability) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldStability, v))
}

// StabilityNEQ applies the NEQ predicate on the "stability" field.
func StabilityNEQ(v Stability) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldStability, v))
}

// StabilityIn applies the In predicate on the "stability" field.
func StabilityIn(vs ...Stability) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldStability, vs...))
}

// StabilityNotIn applies the NotIn predicate on the "stability" field.
func StabilityNotIn(vs ...Stability) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldStability, vs...))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldDate, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasSuffix(FieldLink, v))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContainsFold(FieldLink, v))
}

// ChangelogEQ applies the EQ predicate on the "changelog" field.
func ChangelogEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldChangelog, v))
}

// ChangelogNEQ applies the NEQ predicate on the "changelog" field.
func ChangelogNEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldChangelog, v))
}

// ChangelogIn applies the In predicate on the "changelog" field.
func ChangelogIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldChangelog, vs...))
}

// ChangelogNotIn applies the NotIn predicate on the "changelog" field.
func ChangelogNotIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldChangelog, vs...))
}

// ChangelogGT applies the GT predicate on the "changelog" field.
func ChangelogGT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldChangelog, v))
}

// ChangelogGTE applies the GTE predicate on the "changelog" field.
func ChangelogGTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldChangelog, v))
}

// ChangelogLT applies the LT predicate on the "changelog" field.
func ChangelogLT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldChangelog, v))
}

// ChangelogLTE applies the LTE predicate on the "changelog" field.
func ChangelogLTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldChangelog, v))
}

// ChangelogContains applies the Contains predicate on the "changelog" field.
func ChangelogContains(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContains(FieldChangelog, v))
}

// ChangelogHasPrefix applies the HasPrefix predicate on the "changelog" field.
func ChangelogHasPrefix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasPrefix(FieldChangelog, v))
}

// ChangelogHasSuffix applies the HasSuffix predicate on the "changelog" field.
func ChangelogHasSuffix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasSuffix(FieldChangelog, v))
}

// ChangelogEqualFold applies the EqualFold predicate on the "changelog" field.
func ChangelogEqualFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEqualFold(FieldChangelog, v))
}

// ChangelogContainsFold applies the ContainsFold predicate on the "changelog" field.
func ChangelogContainsFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContainsFold(FieldChangelog, v))
}

// BootstrapVersionEQ applies the EQ predicate on the "bootstrap_version" field.
func BootstrapVersionEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldBootstrapVersion, v))
}

// BootstrapVersionNEQ applies the NEQ predicate on the "bootstrap_version" field.
func BootstrapVersionNEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldBootstrapVersion, v))
}

// BootstrapVersionIn applies the In predicate on the "bootstrap_version" field.
func BootstrapVersionIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldBootstrapVersion, vs...))
}

// BootstrapVersionNotIn applies the NotIn predicate on the "bootstrap_version" field.
func BootstrapVersionNotIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldBootstrapVersion, vs...))
}

// BootstrapVersionGT applies the GT predicate on the "bootstrap_version" field.
func BootstrapVersionGT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldBootstrapVersion, v))
}

// BootstrapVersionGTE applies the GTE predicate on the "bootstrap_version" field.
func BootstrapVersionGTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldBootstrapVersion, v))
}

// BootstrapVersionLT applies the LT predicate on the "bootstrap_version" field.
func BootstrapVersionLT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldBootstrapVersion, v))
}

// BootstrapVersionLTE applies the LTE predicate on the "bootstrap_version" field.
func BootstrapVersionLTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldBootstrapVersion, v))
}

// BootstrapVersionContains applies the Contains predicate on the "bootstrap_version" field.
func BootstrapVersionContains(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContains(FieldBootstrapVersion, v))
}

// BootstrapVersionHasPrefix applies the HasPrefix predicate on the "bootstrap_version" field.
func BootstrapVersionHasPrefix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasPrefix(FieldBootstrapVersion, v))
}

// BootstrapVersionHasSuffix applies the HasSuffix predicate on the "bootstrap_version" field.
func BootstrapVersionHasSuffix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasSuffix(FieldBootstrapVersion, v))
}

// BootstrapVersionIsNil applies the IsNil predicate on the "bootstrap_version" field.
func BootstrapVersionIsNil() predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIsNull(FieldBootstrapVersion))
}

// BootstrapVersionNotNil applies the NotNil predicate on the "bootstrap_version" field.
func BootstrapVersionNotNil() predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotNull(FieldBootstrapVersion))
}

// BootstrapVersionEqualFold applies the EqualFold predicate on the "bootstrap_version" field.
func BootstrapVersionEqualFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEqualFold(FieldBootstrapVersion, v))
}

// BootstrapVersionContainsFold applies the ContainsFold predicate on the "bootstrap_version" field.
func BootstrapVersionContainsFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContainsFold(FieldBootstrapVersion, v))
}

// EngineVersionEQ applies the EQ predicate on the "engine_version" field.
func EngineVersionEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEQ(FieldEngineVersion, v))
}

// EngineVersionNEQ applies the NEQ predicate on the "engine_version" field.
func EngineVersionNEQ(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNEQ(FieldEngineVersion, v))
}

// EngineVersionIn applies the In predicate on the "engine_version" field.
func EngineVersionIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldIn(FieldEngineVersion, vs...))
}

// EngineVersionNotIn applies the NotIn predicate on the "engine_version" field.
func EngineVersionNotIn(vs ...string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldNotIn(FieldEngineVersion, vs...))
}

// EngineVersionGT applies the GT predicate on the "engine_version" field.
func EngineVersionGT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGT(FieldEngineVersion, v))
}

// EngineVersionGTE applies the GTE predicate on the "engine_version" field.
func EngineVersionGTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldGTE(FieldEngineVersion, v))
}

// EngineVersionLT applies the LT predicate on the "engine_version" field.
func EngineVersionLT(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLT(FieldEngineVersion, v))
}

// EngineVersionLTE applies the LTE predicate on the "engine_version" field.
func EngineVersionLTE(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldLTE(FieldEngineVersion, v))
}

// EngineVersionContains applies the Contains predicate on the "engine_version" field.
func EngineVersionContains(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContains(FieldEngineVersion, v))
}

// EngineVersionHasPrefix applies the HasPrefix predicate on the "engine_version" field.
func EngineVersionHasPrefix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasPrefix(FieldEngineVersion, v))
}

// EngineVersionHasSuffix applies the HasSuffix predicate on the "engine_version" field.
func EngineVersionHasSuffix(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldHasSuffix(FieldEngineVersion, v))
}

// EngineVersionEqualFold applies the EqualFold predicate on the "engine_version" field.
func EngineVersionEqualFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldEqualFold(FieldEngineVersion, v))
}

// EngineVersionContainsFold applies the ContainsFold predicate on the "engine_version" field.
func EngineVersionContainsFold(v string) predicate.SmlVersion {
	return predicate.SmlVersion(sql.FieldContainsFold(FieldEngineVersion, v))
}

// HasTargets applies the HasEdge predicate on the "targets" edge.
func HasTargets() predicate.SmlVersion {
	return predicate.SmlVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TargetsTable, TargetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetsWith applies the HasEdge predicate on the "targets" edge with a given conditions (other predicates).
func HasTargetsWith(preds ...predicate.SmlVersionTarget) predicate.SmlVersion {
	return predicate.SmlVersion(func(s *sql.Selector) {
		step := newTargetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SmlVersion) predicate.SmlVersion {
	return predicate.SmlVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SmlVersion) predicate.SmlVersion {
	return predicate.SmlVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SmlVersion) predicate.SmlVersion {
	return predicate.SmlVersion(sql.NotPredicates(p))
}
