// Code generated by ent, DO NOT EDIT.

package smlversion

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the smlversion type in the database.
	Label = "sml_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldSatisfactoryVersion holds the string denoting the satisfactory_version field in the database.
	FieldSatisfactoryVersion = "satisfactory_version"
	// FieldStability holds the string denoting the stability field in the database.
	FieldStability = "stability"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldChangelog holds the string denoting the changelog field in the database.
	FieldChangelog = "changelog"
	// FieldBootstrapVersion holds the string denoting the bootstrap_version field in the database.
	FieldBootstrapVersion = "bootstrap_version"
	// FieldEngineVersion holds the string denoting the engine_version field in the database.
	FieldEngineVersion = "engine_version"
	// EdgeTargets holds the string denoting the targets edge name in mutations.
	EdgeTargets = "targets"
	// Table holds the table name of the smlversion in the database.
	Table = "sml_versions"
	// TargetsTable is the table that holds the targets relation/edge.
	TargetsTable = "sml_version_targets"
	// TargetsInverseTable is the table name for the SmlVersionTarget entity.
	// It exists in this package in order to avoid circular dependency with the "smlversiontarget" package.
	TargetsInverseTable = "sml_version_targets"
	// TargetsColumn is the table column denoting the targets relation/edge.
	TargetsColumn = "version_id"
)

// Columns holds all SQL columns for smlversion fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldVersion,
	FieldSatisfactoryVersion,
	FieldStability,
	FieldDate,
	FieldLink,
	FieldChangelog,
	FieldBootstrapVersion,
	FieldEngineVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/satisfactorymodding/smr-api/generated/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(string) error
	// BootstrapVersionValidator is a validator for the "bootstrap_version" field. It is called by the builders before save.
	BootstrapVersionValidator func(string) error
	// DefaultEngineVersion holds the default value on creation for the "engine_version" field.
	DefaultEngineVersion string
	// EngineVersionValidator is a validator for the "engine_version" field. It is called by the builders before save.
	EngineVersionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Stability defines the type for the "stability" enum field.
type Stability string

// Stability values.
const (
	StabilityAlpha   Stability = "alpha"
	StabilityBeta    Stability = "beta"
	StabilityRelease Stability = "release"
)

func (s Stability) String() string {
	return string(s)
}

// StabilityValidator is a validator for the "stability" field enum values. It is called by the builders before save.
func StabilityValidator(s Stability) error {
	switch s {
	case StabilityAlpha, StabilityBeta, StabilityRelease:
		return nil
	default:
		return fmt.Errorf("smlversion: invalid enum value for stability field: %q", s)
	}
}

// OrderOption defines the ordering options for the SmlVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// BySatisfactoryVersion orders the results by the satisfactory_version field.
func BySatisfactoryVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSatisfactoryVersion, opts...).ToFunc()
}

// ByStability orders the results by the stability field.
func ByStability(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStability, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByChangelog orders the results by the changelog field.
func ByChangelog(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangelog, opts...).ToFunc()
}

// ByBootstrapVersion orders the results by the bootstrap_version field.
func ByBootstrapVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBootstrapVersion, opts...).ToFunc()
}

// ByEngineVersion orders the results by the engine_version field.
func ByEngineVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEngineVersion, opts...).ToFunc()
}

// ByTargetsCount orders the results by targets count.
func ByTargetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTargetsStep(), opts...)
	}
}

// ByTargets orders the results by targets terms.
func ByTargets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTargetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TargetsTable, TargetsColumn),
	)
}
