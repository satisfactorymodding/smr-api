// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/virustotalresult"
)

// VirustotalResultUpdate is the builder for updating VirustotalResult entities.
type VirustotalResultUpdate struct {
	config
	hooks     []Hook
	mutation  *VirustotalResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VirustotalResultUpdate builder.
func (vru *VirustotalResultUpdate) Where(ps ...predicate.VirustotalResult) *VirustotalResultUpdate {
	vru.mutation.Where(ps...)
	return vru
}

// SetUpdatedAt sets the "updated_at" field.
func (vru *VirustotalResultUpdate) SetUpdatedAt(t time.Time) *VirustotalResultUpdate {
	vru.mutation.SetUpdatedAt(t)
	return vru
}

// SetSafe sets the "safe" field.
func (vru *VirustotalResultUpdate) SetSafe(b bool) *VirustotalResultUpdate {
	vru.mutation.SetSafe(b)
	return vru
}

// SetNillableSafe sets the "safe" field if the given value is not nil.
func (vru *VirustotalResultUpdate) SetNillableSafe(b *bool) *VirustotalResultUpdate {
	if b != nil {
		vru.SetSafe(*b)
	}
	return vru
}

// SetHash sets the "hash" field.
func (vru *VirustotalResultUpdate) SetHash(s string) *VirustotalResultUpdate {
	vru.mutation.SetHash(s)
	return vru
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vru *VirustotalResultUpdate) SetNillableHash(s *string) *VirustotalResultUpdate {
	if s != nil {
		vru.SetHash(*s)
	}
	return vru
}

// SetFileName sets the "file_name" field.
func (vru *VirustotalResultUpdate) SetFileName(s string) *VirustotalResultUpdate {
	vru.mutation.SetFileName(s)
	return vru
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (vru *VirustotalResultUpdate) SetNillableFileName(s *string) *VirustotalResultUpdate {
	if s != nil {
		vru.SetFileName(*s)
	}
	return vru
}

// SetVersionID sets the "version_id" field.
func (vru *VirustotalResultUpdate) SetVersionID(s string) *VirustotalResultUpdate {
	vru.mutation.SetVersionID(s)
	return vru
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (vru *VirustotalResultUpdate) SetNillableVersionID(s *string) *VirustotalResultUpdate {
	if s != nil {
		vru.SetVersionID(*s)
	}
	return vru
}

// SetVersion sets the "version" edge to the Version entity.
func (vru *VirustotalResultUpdate) SetVersion(v *Version) *VirustotalResultUpdate {
	return vru.SetVersionID(v.ID)
}

// Mutation returns the VirustotalResultMutation object of the builder.
func (vru *VirustotalResultUpdate) Mutation() *VirustotalResultMutation {
	return vru.mutation
}

// ClearVersion clears the "version" edge to the Version entity.
func (vru *VirustotalResultUpdate) ClearVersion() *VirustotalResultUpdate {
	vru.mutation.ClearVersion()
	return vru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vru *VirustotalResultUpdate) Save(ctx context.Context) (int, error) {
	vru.defaults()
	return withHooks(ctx, vru.sqlSave, vru.mutation, vru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vru *VirustotalResultUpdate) SaveX(ctx context.Context) int {
	affected, err := vru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vru *VirustotalResultUpdate) Exec(ctx context.Context) error {
	_, err := vru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vru *VirustotalResultUpdate) ExecX(ctx context.Context) {
	if err := vru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vru *VirustotalResultUpdate) defaults() {
	if _, ok := vru.mutation.UpdatedAt(); !ok {
		v := virustotalresult.UpdateDefaultUpdatedAt()
		vru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vru *VirustotalResultUpdate) check() error {
	if v, ok := vru.mutation.Hash(); ok {
		if err := virustotalresult.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.hash": %w`, err)}
		}
	}
	if v, ok := vru.mutation.FileName(); ok {
		if err := virustotalresult.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.file_name": %w`, err)}
		}
	}
	if v, ok := vru.mutation.VersionID(); ok {
		if err := virustotalresult.VersionIDValidator(v); err != nil {
			return &ValidationError{Name: "version_id", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.version_id": %w`, err)}
		}
	}
	if vru.mutation.VersionCleared() && len(vru.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VirustotalResult.version"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vru *VirustotalResultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VirustotalResultUpdate {
	vru.modifiers = append(vru.modifiers, modifiers...)
	return vru
}

func (vru *VirustotalResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(virustotalresult.Table, virustotalresult.Columns, sqlgraph.NewFieldSpec(virustotalresult.FieldID, field.TypeString))
	if ps := vru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vru.mutation.UpdatedAt(); ok {
		_spec.SetField(virustotalresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vru.mutation.Safe(); ok {
		_spec.SetField(virustotalresult.FieldSafe, field.TypeBool, value)
	}
	if value, ok := vru.mutation.Hash(); ok {
		_spec.SetField(virustotalresult.FieldHash, field.TypeString, value)
	}
	if value, ok := vru.mutation.FileName(); ok {
		_spec.SetField(virustotalresult.FieldFileName, field.TypeString, value)
	}
	if vru.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   virustotalresult.VersionTable,
			Columns: []string{virustotalresult.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vru.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   virustotalresult.VersionTable,
			Columns: []string{virustotalresult.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virustotalresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vru.mutation.done = true
	return n, nil
}

// VirustotalResultUpdateOne is the builder for updating a single VirustotalResult entity.
type VirustotalResultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VirustotalResultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vruo *VirustotalResultUpdateOne) SetUpdatedAt(t time.Time) *VirustotalResultUpdateOne {
	vruo.mutation.SetUpdatedAt(t)
	return vruo
}

// SetSafe sets the "safe" field.
func (vruo *VirustotalResultUpdateOne) SetSafe(b bool) *VirustotalResultUpdateOne {
	vruo.mutation.SetSafe(b)
	return vruo
}

// SetNillableSafe sets the "safe" field if the given value is not nil.
func (vruo *VirustotalResultUpdateOne) SetNillableSafe(b *bool) *VirustotalResultUpdateOne {
	if b != nil {
		vruo.SetSafe(*b)
	}
	return vruo
}

// SetHash sets the "hash" field.
func (vruo *VirustotalResultUpdateOne) SetHash(s string) *VirustotalResultUpdateOne {
	vruo.mutation.SetHash(s)
	return vruo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vruo *VirustotalResultUpdateOne) SetNillableHash(s *string) *VirustotalResultUpdateOne {
	if s != nil {
		vruo.SetHash(*s)
	}
	return vruo
}

// SetFileName sets the "file_name" field.
func (vruo *VirustotalResultUpdateOne) SetFileName(s string) *VirustotalResultUpdateOne {
	vruo.mutation.SetFileName(s)
	return vruo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (vruo *VirustotalResultUpdateOne) SetNillableFileName(s *string) *VirustotalResultUpdateOne {
	if s != nil {
		vruo.SetFileName(*s)
	}
	return vruo
}

// SetVersionID sets the "version_id" field.
func (vruo *VirustotalResultUpdateOne) SetVersionID(s string) *VirustotalResultUpdateOne {
	vruo.mutation.SetVersionID(s)
	return vruo
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (vruo *VirustotalResultUpdateOne) SetNillableVersionID(s *string) *VirustotalResultUpdateOne {
	if s != nil {
		vruo.SetVersionID(*s)
	}
	return vruo
}

// SetVersion sets the "version" edge to the Version entity.
func (vruo *VirustotalResultUpdateOne) SetVersion(v *Version) *VirustotalResultUpdateOne {
	return vruo.SetVersionID(v.ID)
}

// Mutation returns the VirustotalResultMutation object of the builder.
func (vruo *VirustotalResultUpdateOne) Mutation() *VirustotalResultMutation {
	return vruo.mutation
}

// ClearVersion clears the "version" edge to the Version entity.
func (vruo *VirustotalResultUpdateOne) ClearVersion() *VirustotalResultUpdateOne {
	vruo.mutation.ClearVersion()
	return vruo
}

// Where appends a list predicates to the VirustotalResultUpdate builder.
func (vruo *VirustotalResultUpdateOne) Where(ps ...predicate.VirustotalResult) *VirustotalResultUpdateOne {
	vruo.mutation.Where(ps...)
	return vruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vruo *VirustotalResultUpdateOne) Select(field string, fields ...string) *VirustotalResultUpdateOne {
	vruo.fields = append([]string{field}, fields...)
	return vruo
}

// Save executes the query and returns the updated VirustotalResult entity.
func (vruo *VirustotalResultUpdateOne) Save(ctx context.Context) (*VirustotalResult, error) {
	vruo.defaults()
	return withHooks(ctx, vruo.sqlSave, vruo.mutation, vruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vruo *VirustotalResultUpdateOne) SaveX(ctx context.Context) *VirustotalResult {
	node, err := vruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vruo *VirustotalResultUpdateOne) Exec(ctx context.Context) error {
	_, err := vruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vruo *VirustotalResultUpdateOne) ExecX(ctx context.Context) {
	if err := vruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vruo *VirustotalResultUpdateOne) defaults() {
	if _, ok := vruo.mutation.UpdatedAt(); !ok {
		v := virustotalresult.UpdateDefaultUpdatedAt()
		vruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vruo *VirustotalResultUpdateOne) check() error {
	if v, ok := vruo.mutation.Hash(); ok {
		if err := virustotalresult.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.hash": %w`, err)}
		}
	}
	if v, ok := vruo.mutation.FileName(); ok {
		if err := virustotalresult.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.file_name": %w`, err)}
		}
	}
	if v, ok := vruo.mutation.VersionID(); ok {
		if err := virustotalresult.VersionIDValidator(v); err != nil {
			return &ValidationError{Name: "version_id", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.version_id": %w`, err)}
		}
	}
	if vruo.mutation.VersionCleared() && len(vruo.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VirustotalResult.version"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vruo *VirustotalResultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VirustotalResultUpdateOne {
	vruo.modifiers = append(vruo.modifiers, modifiers...)
	return vruo
}

func (vruo *VirustotalResultUpdateOne) sqlSave(ctx context.Context) (_node *VirustotalResult, err error) {
	if err := vruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(virustotalresult.Table, virustotalresult.Columns, sqlgraph.NewFieldSpec(virustotalresult.FieldID, field.TypeString))
	id, ok := vruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VirustotalResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virustotalresult.FieldID)
		for _, f := range fields {
			if !virustotalresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != virustotalresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vruo.mutation.UpdatedAt(); ok {
		_spec.SetField(virustotalresult.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vruo.mutation.Safe(); ok {
		_spec.SetField(virustotalresult.FieldSafe, field.TypeBool, value)
	}
	if value, ok := vruo.mutation.Hash(); ok {
		_spec.SetField(virustotalresult.FieldHash, field.TypeString, value)
	}
	if value, ok := vruo.mutation.FileName(); ok {
		_spec.SetField(virustotalresult.FieldFileName, field.TypeString, value)
	}
	if vruo.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   virustotalresult.VersionTable,
			Columns: []string{virustotalresult.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vruo.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   virustotalresult.VersionTable,
			Columns: []string{virustotalresult.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vruo.modifiers...)
	_node = &VirustotalResult{config: vruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virustotalresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vruo.mutation.done = true
	return _node, nil
}
