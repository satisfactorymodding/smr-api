// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
)

// VersionCreate is the builder for creating a Version entity.
type VersionCreate struct {
	config
	mutation *VersionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vc *VersionCreate) SetCreatedAt(t time.Time) *VersionCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VersionCreate) SetNillableCreatedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VersionCreate) SetUpdatedAt(t time.Time) *VersionCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VersionCreate) SetNillableUpdatedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *VersionCreate) SetDeletedAt(t time.Time) *VersionCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *VersionCreate) SetNillableDeletedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// SetVersion sets the "version" field.
func (vc *VersionCreate) SetVersion(s string) *VersionCreate {
	vc.mutation.SetVersion(s)
	return vc
}

// SetSmlVersion sets the "sml_version" field.
func (vc *VersionCreate) SetSmlVersion(s string) *VersionCreate {
	vc.mutation.SetSmlVersion(s)
	return vc
}

// SetChangelog sets the "changelog" field.
func (vc *VersionCreate) SetChangelog(s string) *VersionCreate {
	vc.mutation.SetChangelog(s)
	return vc
}

// SetDownloads sets the "downloads" field.
func (vc *VersionCreate) SetDownloads(u uint) *VersionCreate {
	vc.mutation.SetDownloads(u)
	return vc
}

// SetKey sets the "key" field.
func (vc *VersionCreate) SetKey(s string) *VersionCreate {
	vc.mutation.SetKey(s)
	return vc
}

// SetStability sets the "stability" field.
func (vc *VersionCreate) SetStability(v version.Stability) *VersionCreate {
	vc.mutation.SetStability(v)
	return vc
}

// SetApproved sets the "approved" field.
func (vc *VersionCreate) SetApproved(b bool) *VersionCreate {
	vc.mutation.SetApproved(b)
	return vc
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (vc *VersionCreate) SetNillableApproved(b *bool) *VersionCreate {
	if b != nil {
		vc.SetApproved(*b)
	}
	return vc
}

// SetHotness sets the "hotness" field.
func (vc *VersionCreate) SetHotness(u uint) *VersionCreate {
	vc.mutation.SetHotness(u)
	return vc
}

// SetDenied sets the "denied" field.
func (vc *VersionCreate) SetDenied(b bool) *VersionCreate {
	vc.mutation.SetDenied(b)
	return vc
}

// SetNillableDenied sets the "denied" field if the given value is not nil.
func (vc *VersionCreate) SetNillableDenied(b *bool) *VersionCreate {
	if b != nil {
		vc.SetDenied(*b)
	}
	return vc
}

// SetMetadata sets the "metadata" field.
func (vc *VersionCreate) SetMetadata(s string) *VersionCreate {
	vc.mutation.SetMetadata(s)
	return vc
}

// SetModReference sets the "mod_reference" field.
func (vc *VersionCreate) SetModReference(s string) *VersionCreate {
	vc.mutation.SetModReference(s)
	return vc
}

// SetVersionMajor sets the "version_major" field.
func (vc *VersionCreate) SetVersionMajor(i int) *VersionCreate {
	vc.mutation.SetVersionMajor(i)
	return vc
}

// SetVersionMinor sets the "version_minor" field.
func (vc *VersionCreate) SetVersionMinor(i int) *VersionCreate {
	vc.mutation.SetVersionMinor(i)
	return vc
}

// SetVersionPatch sets the "version_patch" field.
func (vc *VersionCreate) SetVersionPatch(i int) *VersionCreate {
	vc.mutation.SetVersionPatch(i)
	return vc
}

// SetSize sets the "size" field.
func (vc *VersionCreate) SetSize(i int64) *VersionCreate {
	vc.mutation.SetSize(i)
	return vc
}

// SetHash sets the "hash" field.
func (vc *VersionCreate) SetHash(s string) *VersionCreate {
	vc.mutation.SetHash(s)
	return vc
}

// SetID sets the "id" field.
func (vc *VersionCreate) SetID(s string) *VersionCreate {
	vc.mutation.SetID(s)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VersionCreate) SetNillableID(s *string) *VersionCreate {
	if s != nil {
		vc.SetID(*s)
	}
	return vc
}

// SetModID sets the "mod" edge to the Mod entity by ID.
func (vc *VersionCreate) SetModID(id string) *VersionCreate {
	vc.mutation.SetModID(id)
	return vc
}

// SetMod sets the "mod" edge to the Mod entity.
func (vc *VersionCreate) SetMod(m *Mod) *VersionCreate {
	return vc.SetModID(m.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the Mod entity by IDs.
func (vc *VersionCreate) AddDependencyIDs(ids ...string) *VersionCreate {
	vc.mutation.AddDependencyIDs(ids...)
	return vc
}

// AddDependencies adds the "dependencies" edges to the Mod entity.
func (vc *VersionCreate) AddDependencies(m ...*Mod) *VersionCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vc.AddDependencyIDs(ids...)
}

// Mutation returns the VersionMutation object of the builder.
func (vc *VersionCreate) Mutation() *VersionMutation {
	return vc.mutation
}

// Save creates the Version in the database.
func (vc *VersionCreate) Save(ctx context.Context) (*Version, error) {
	if err := vc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VersionCreate) SaveX(ctx context.Context) *Version {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VersionCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VersionCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VersionCreate) defaults() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		if version.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := version.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		if version.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := version.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.Approved(); !ok {
		v := version.DefaultApproved
		vc.mutation.SetApproved(v)
	}
	if _, ok := vc.mutation.Denied(); !ok {
		v := version.DefaultDenied
		vc.mutation.SetDenied(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		if version.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized version.DefaultID (forgotten import ent/runtime?)")
		}
		v := version.DefaultID()
		vc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vc *VersionCreate) check() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Version.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Version.updated_at"`)}
	}
	if _, ok := vc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Version.version"`)}
	}
	if v, ok := vc.mutation.Version(); ok {
		if err := version.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Version.version": %w`, err)}
		}
	}
	if _, ok := vc.mutation.SmlVersion(); !ok {
		return &ValidationError{Name: "sml_version", err: errors.New(`ent: missing required field "Version.sml_version"`)}
	}
	if v, ok := vc.mutation.SmlVersion(); ok {
		if err := version.SmlVersionValidator(v); err != nil {
			return &ValidationError{Name: "sml_version", err: fmt.Errorf(`ent: validator failed for field "Version.sml_version": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Changelog(); !ok {
		return &ValidationError{Name: "changelog", err: errors.New(`ent: missing required field "Version.changelog"`)}
	}
	if _, ok := vc.mutation.Downloads(); !ok {
		return &ValidationError{Name: "downloads", err: errors.New(`ent: missing required field "Version.downloads"`)}
	}
	if _, ok := vc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Version.key"`)}
	}
	if _, ok := vc.mutation.Stability(); !ok {
		return &ValidationError{Name: "stability", err: errors.New(`ent: missing required field "Version.stability"`)}
	}
	if v, ok := vc.mutation.Stability(); ok {
		if err := version.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Version.stability": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Approved(); !ok {
		return &ValidationError{Name: "approved", err: errors.New(`ent: missing required field "Version.approved"`)}
	}
	if _, ok := vc.mutation.Hotness(); !ok {
		return &ValidationError{Name: "hotness", err: errors.New(`ent: missing required field "Version.hotness"`)}
	}
	if _, ok := vc.mutation.Denied(); !ok {
		return &ValidationError{Name: "denied", err: errors.New(`ent: missing required field "Version.denied"`)}
	}
	if _, ok := vc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Version.metadata"`)}
	}
	if _, ok := vc.mutation.ModReference(); !ok {
		return &ValidationError{Name: "mod_reference", err: errors.New(`ent: missing required field "Version.mod_reference"`)}
	}
	if v, ok := vc.mutation.ModReference(); ok {
		if err := version.ModReferenceValidator(v); err != nil {
			return &ValidationError{Name: "mod_reference", err: fmt.Errorf(`ent: validator failed for field "Version.mod_reference": %w`, err)}
		}
	}
	if _, ok := vc.mutation.VersionMajor(); !ok {
		return &ValidationError{Name: "version_major", err: errors.New(`ent: missing required field "Version.version_major"`)}
	}
	if _, ok := vc.mutation.VersionMinor(); !ok {
		return &ValidationError{Name: "version_minor", err: errors.New(`ent: missing required field "Version.version_minor"`)}
	}
	if _, ok := vc.mutation.VersionPatch(); !ok {
		return &ValidationError{Name: "version_patch", err: errors.New(`ent: missing required field "Version.version_patch"`)}
	}
	if _, ok := vc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Version.size"`)}
	}
	if _, ok := vc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Version.hash"`)}
	}
	if v, ok := vc.mutation.Hash(); ok {
		if err := version.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Version.hash": %w`, err)}
		}
	}
	if _, ok := vc.mutation.ModID(); !ok {
		return &ValidationError{Name: "mod", err: errors.New(`ent: missing required edge "Version.mod"`)}
	}
	return nil
}

func (vc *VersionCreate) sqlSave(ctx context.Context) (*Version, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Version.ID type: %T", _spec.ID.Value)
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VersionCreate) createSpec() (*Version, *sqlgraph.CreateSpec) {
	var (
		_node = &Version{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(version.Table, sqlgraph.NewFieldSpec(version.FieldID, field.TypeString))
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(version.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(version.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(version.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vc.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := vc.mutation.SmlVersion(); ok {
		_spec.SetField(version.FieldSmlVersion, field.TypeString, value)
		_node.SmlVersion = value
	}
	if value, ok := vc.mutation.Changelog(); ok {
		_spec.SetField(version.FieldChangelog, field.TypeString, value)
		_node.Changelog = value
	}
	if value, ok := vc.mutation.Downloads(); ok {
		_spec.SetField(version.FieldDownloads, field.TypeUint, value)
		_node.Downloads = value
	}
	if value, ok := vc.mutation.Key(); ok {
		_spec.SetField(version.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := vc.mutation.Stability(); ok {
		_spec.SetField(version.FieldStability, field.TypeEnum, value)
		_node.Stability = value
	}
	if value, ok := vc.mutation.Approved(); ok {
		_spec.SetField(version.FieldApproved, field.TypeBool, value)
		_node.Approved = value
	}
	if value, ok := vc.mutation.Hotness(); ok {
		_spec.SetField(version.FieldHotness, field.TypeUint, value)
		_node.Hotness = value
	}
	if value, ok := vc.mutation.Denied(); ok {
		_spec.SetField(version.FieldDenied, field.TypeBool, value)
		_node.Denied = value
	}
	if value, ok := vc.mutation.Metadata(); ok {
		_spec.SetField(version.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if value, ok := vc.mutation.ModReference(); ok {
		_spec.SetField(version.FieldModReference, field.TypeString, value)
		_node.ModReference = value
	}
	if value, ok := vc.mutation.VersionMajor(); ok {
		_spec.SetField(version.FieldVersionMajor, field.TypeInt, value)
		_node.VersionMajor = value
	}
	if value, ok := vc.mutation.VersionMinor(); ok {
		_spec.SetField(version.FieldVersionMinor, field.TypeInt, value)
		_node.VersionMinor = value
	}
	if value, ok := vc.mutation.VersionPatch(); ok {
		_spec.SetField(version.FieldVersionPatch, field.TypeInt, value)
		_node.VersionPatch = value
	}
	if value, ok := vc.mutation.Size(); ok {
		_spec.SetField(version.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := vc.mutation.Hash(); ok {
		_spec.SetField(version.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if nodes := vc.mutation.ModIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ModTable,
			Columns: []string{version.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mod_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.DependenciesTable,
			Columns: version.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: vc.config, mutation: newVersionDependencyMutation(vc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VersionCreateBulk is the builder for creating many Version entities in bulk.
type VersionCreateBulk struct {
	config
	err      error
	builders []*VersionCreate
}

// Save creates the Version entities in the database.
func (vcb *VersionCreateBulk) Save(ctx context.Context) ([]*Version, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Version, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VersionCreateBulk) SaveX(ctx context.Context) []*Version {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VersionCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VersionCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
