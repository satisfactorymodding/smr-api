// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/guide"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
	"github.com/satisfactorymodding/smr-api/generated/ent/usergroup"
	"github.com/satisfactorymodding/smr-api/generated/ent/usersession"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// ClearAvatar clears the value of the "avatar" field.
func (uu *UserUpdate) ClearAvatar() *UserUpdate {
	uu.mutation.ClearAvatar()
	return uu
}

// SetJoinedFrom sets the "joined_from" field.
func (uu *UserUpdate) SetJoinedFrom(s string) *UserUpdate {
	uu.mutation.SetJoinedFrom(s)
	return uu
}

// SetNillableJoinedFrom sets the "joined_from" field if the given value is not nil.
func (uu *UserUpdate) SetNillableJoinedFrom(s *string) *UserUpdate {
	if s != nil {
		uu.SetJoinedFrom(*s)
	}
	return uu
}

// ClearJoinedFrom clears the value of the "joined_from" field.
func (uu *UserUpdate) ClearJoinedFrom() *UserUpdate {
	uu.mutation.ClearJoinedFrom()
	return uu
}

// SetBanned sets the "banned" field.
func (uu *UserUpdate) SetBanned(b bool) *UserUpdate {
	uu.mutation.SetBanned(b)
	return uu
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBanned(*b)
	}
	return uu
}

// SetRank sets the "rank" field.
func (uu *UserUpdate) SetRank(i int) *UserUpdate {
	uu.mutation.ResetRank()
	uu.mutation.SetRank(i)
	return uu
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRank(i *int) *UserUpdate {
	if i != nil {
		uu.SetRank(*i)
	}
	return uu
}

// AddRank adds i to the "rank" field.
func (uu *UserUpdate) AddRank(i int) *UserUpdate {
	uu.mutation.AddRank(i)
	return uu
}

// SetGithubID sets the "github_id" field.
func (uu *UserUpdate) SetGithubID(s string) *UserUpdate {
	uu.mutation.SetGithubID(s)
	return uu
}

// SetNillableGithubID sets the "github_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGithubID(s *string) *UserUpdate {
	if s != nil {
		uu.SetGithubID(*s)
	}
	return uu
}

// ClearGithubID clears the value of the "github_id" field.
func (uu *UserUpdate) ClearGithubID() *UserUpdate {
	uu.mutation.ClearGithubID()
	return uu
}

// SetGoogleID sets the "google_id" field.
func (uu *UserUpdate) SetGoogleID(s string) *UserUpdate {
	uu.mutation.SetGoogleID(s)
	return uu
}

// SetNillableGoogleID sets the "google_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGoogleID(s *string) *UserUpdate {
	if s != nil {
		uu.SetGoogleID(*s)
	}
	return uu
}

// ClearGoogleID clears the value of the "google_id" field.
func (uu *UserUpdate) ClearGoogleID() *UserUpdate {
	uu.mutation.ClearGoogleID()
	return uu
}

// SetFacebookID sets the "facebook_id" field.
func (uu *UserUpdate) SetFacebookID(s string) *UserUpdate {
	uu.mutation.SetFacebookID(s)
	return uu
}

// SetNillableFacebookID sets the "facebook_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFacebookID(s *string) *UserUpdate {
	if s != nil {
		uu.SetFacebookID(*s)
	}
	return uu
}

// ClearFacebookID clears the value of the "facebook_id" field.
func (uu *UserUpdate) ClearFacebookID() *UserUpdate {
	uu.mutation.ClearFacebookID()
	return uu
}

// AddGuideIDs adds the "guides" edge to the Guide entity by IDs.
func (uu *UserUpdate) AddGuideIDs(ids ...string) *UserUpdate {
	uu.mutation.AddGuideIDs(ids...)
	return uu
}

// AddGuides adds the "guides" edges to the Guide entity.
func (uu *UserUpdate) AddGuides(g ...*Guide) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGuideIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (uu *UserUpdate) AddSessions(u ...*UserSession) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddModIDs adds the "mods" edge to the Mod entity by IDs.
func (uu *UserUpdate) AddModIDs(ids ...string) *UserUpdate {
	uu.mutation.AddModIDs(ids...)
	return uu
}

// AddMods adds the "mods" edges to the Mod entity.
func (uu *UserUpdate) AddMods(m ...*Mod) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddModIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the UserGroup entity by IDs.
func (uu *UserUpdate) AddGroupIDs(ids ...string) *UserUpdate {
	uu.mutation.AddGroupIDs(ids...)
	return uu
}

// AddGroups adds the "groups" edges to the UserGroup entity.
func (uu *UserUpdate) AddGroups(u ...*UserGroup) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddGroupIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearGuides clears all "guides" edges to the Guide entity.
func (uu *UserUpdate) ClearGuides() *UserUpdate {
	uu.mutation.ClearGuides()
	return uu
}

// RemoveGuideIDs removes the "guides" edge to Guide entities by IDs.
func (uu *UserUpdate) RemoveGuideIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveGuideIDs(ids...)
	return uu
}

// RemoveGuides removes "guides" edges to Guide entities.
func (uu *UserUpdate) RemoveGuides(g ...*Guide) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGuideIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (uu *UserUpdate) RemoveSessions(u ...*UserSession) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearMods clears all "mods" edges to the Mod entity.
func (uu *UserUpdate) ClearMods() *UserUpdate {
	uu.mutation.ClearMods()
	return uu
}

// RemoveModIDs removes the "mods" edge to Mod entities by IDs.
func (uu *UserUpdate) RemoveModIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveModIDs(ids...)
	return uu
}

// RemoveMods removes "mods" edges to Mod entities.
func (uu *UserUpdate) RemoveMods(m ...*Mod) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveModIDs(ids...)
}

// ClearGroups clears all "groups" edges to the UserGroup entity.
func (uu *UserUpdate) ClearGroups() *UserUpdate {
	uu.mutation.ClearGroups()
	return uu
}

// RemoveGroupIDs removes the "groups" edge to UserGroup entities by IDs.
func (uu *UserUpdate) RemoveGroupIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveGroupIDs(ids...)
	return uu
}

// RemoveGroups removes "groups" edges to UserGroup entities.
func (uu *UserUpdate) RemoveGroups(u ...*UserGroup) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.GithubID(); ok {
		if err := user.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "User.github_id": %w`, err)}
		}
	}
	if v, ok := uu.mutation.GoogleID(); ok {
		if err := user.GoogleIDValidator(v); err != nil {
			return &ValidationError{Name: "google_id", err: fmt.Errorf(`ent: validator failed for field "User.google_id": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FacebookID(); ok {
		if err := user.FacebookIDValidator(v); err != nil {
			return &ValidationError{Name: "facebook_id", err: fmt.Errorf(`ent: validator failed for field "User.facebook_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uu.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uu.mutation.JoinedFrom(); ok {
		_spec.SetField(user.FieldJoinedFrom, field.TypeString, value)
	}
	if uu.mutation.JoinedFromCleared() {
		_spec.ClearField(user.FieldJoinedFrom, field.TypeString)
	}
	if value, ok := uu.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Rank(); ok {
		_spec.SetField(user.FieldRank, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedRank(); ok {
		_spec.AddField(user.FieldRank, field.TypeInt, value)
	}
	if value, ok := uu.mutation.GithubID(); ok {
		_spec.SetField(user.FieldGithubID, field.TypeString, value)
	}
	if uu.mutation.GithubIDCleared() {
		_spec.ClearField(user.FieldGithubID, field.TypeString)
	}
	if value, ok := uu.mutation.GoogleID(); ok {
		_spec.SetField(user.FieldGoogleID, field.TypeString, value)
	}
	if uu.mutation.GoogleIDCleared() {
		_spec.ClearField(user.FieldGoogleID, field.TypeString)
	}
	if value, ok := uu.mutation.FacebookID(); ok {
		_spec.SetField(user.FieldFacebookID, field.TypeString, value)
	}
	if uu.mutation.FacebookIDCleared() {
		_spec.ClearField(user.FieldFacebookID, field.TypeString)
	}
	if uu.mutation.GuidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuidesTable,
			Columns: []string{user.GuidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGuidesIDs(); len(nodes) > 0 && !uu.mutation.GuidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuidesTable,
			Columns: []string{user.GuidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GuidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuidesTable,
			Columns: []string{user.GuidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModsTable,
			Columns: user.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedModsIDs(); len(nodes) > 0 && !uu.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModsTable,
			Columns: user.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ModsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModsTable,
			Columns: user.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: []string{user.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: []string{user.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: []string{user.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// ClearAvatar clears the value of the "avatar" field.
func (uuo *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	uuo.mutation.ClearAvatar()
	return uuo
}

// SetJoinedFrom sets the "joined_from" field.
func (uuo *UserUpdateOne) SetJoinedFrom(s string) *UserUpdateOne {
	uuo.mutation.SetJoinedFrom(s)
	return uuo
}

// SetNillableJoinedFrom sets the "joined_from" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableJoinedFrom(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetJoinedFrom(*s)
	}
	return uuo
}

// ClearJoinedFrom clears the value of the "joined_from" field.
func (uuo *UserUpdateOne) ClearJoinedFrom() *UserUpdateOne {
	uuo.mutation.ClearJoinedFrom()
	return uuo
}

// SetBanned sets the "banned" field.
func (uuo *UserUpdateOne) SetBanned(b bool) *UserUpdateOne {
	uuo.mutation.SetBanned(b)
	return uuo
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBanned(*b)
	}
	return uuo
}

// SetRank sets the "rank" field.
func (uuo *UserUpdateOne) SetRank(i int) *UserUpdateOne {
	uuo.mutation.ResetRank()
	uuo.mutation.SetRank(i)
	return uuo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRank(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetRank(*i)
	}
	return uuo
}

// AddRank adds i to the "rank" field.
func (uuo *UserUpdateOne) AddRank(i int) *UserUpdateOne {
	uuo.mutation.AddRank(i)
	return uuo
}

// SetGithubID sets the "github_id" field.
func (uuo *UserUpdateOne) SetGithubID(s string) *UserUpdateOne {
	uuo.mutation.SetGithubID(s)
	return uuo
}

// SetNillableGithubID sets the "github_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGithubID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGithubID(*s)
	}
	return uuo
}

// ClearGithubID clears the value of the "github_id" field.
func (uuo *UserUpdateOne) ClearGithubID() *UserUpdateOne {
	uuo.mutation.ClearGithubID()
	return uuo
}

// SetGoogleID sets the "google_id" field.
func (uuo *UserUpdateOne) SetGoogleID(s string) *UserUpdateOne {
	uuo.mutation.SetGoogleID(s)
	return uuo
}

// SetNillableGoogleID sets the "google_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGoogleID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGoogleID(*s)
	}
	return uuo
}

// ClearGoogleID clears the value of the "google_id" field.
func (uuo *UserUpdateOne) ClearGoogleID() *UserUpdateOne {
	uuo.mutation.ClearGoogleID()
	return uuo
}

// SetFacebookID sets the "facebook_id" field.
func (uuo *UserUpdateOne) SetFacebookID(s string) *UserUpdateOne {
	uuo.mutation.SetFacebookID(s)
	return uuo
}

// SetNillableFacebookID sets the "facebook_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFacebookID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFacebookID(*s)
	}
	return uuo
}

// ClearFacebookID clears the value of the "facebook_id" field.
func (uuo *UserUpdateOne) ClearFacebookID() *UserUpdateOne {
	uuo.mutation.ClearFacebookID()
	return uuo
}

// AddGuideIDs adds the "guides" edge to the Guide entity by IDs.
func (uuo *UserUpdateOne) AddGuideIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddGuideIDs(ids...)
	return uuo
}

// AddGuides adds the "guides" edges to the Guide entity.
func (uuo *UserUpdateOne) AddGuides(g ...*Guide) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGuideIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the UserSession entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the UserSession entity.
func (uuo *UserUpdateOne) AddSessions(u ...*UserSession) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddModIDs adds the "mods" edge to the Mod entity by IDs.
func (uuo *UserUpdateOne) AddModIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddModIDs(ids...)
	return uuo
}

// AddMods adds the "mods" edges to the Mod entity.
func (uuo *UserUpdateOne) AddMods(m ...*Mod) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddModIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the UserGroup entity by IDs.
func (uuo *UserUpdateOne) AddGroupIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddGroupIDs(ids...)
	return uuo
}

// AddGroups adds the "groups" edges to the UserGroup entity.
func (uuo *UserUpdateOne) AddGroups(u ...*UserGroup) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddGroupIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearGuides clears all "guides" edges to the Guide entity.
func (uuo *UserUpdateOne) ClearGuides() *UserUpdateOne {
	uuo.mutation.ClearGuides()
	return uuo
}

// RemoveGuideIDs removes the "guides" edge to Guide entities by IDs.
func (uuo *UserUpdateOne) RemoveGuideIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveGuideIDs(ids...)
	return uuo
}

// RemoveGuides removes "guides" edges to Guide entities.
func (uuo *UserUpdateOne) RemoveGuides(g ...*Guide) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGuideIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the UserSession entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to UserSession entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to UserSession entities.
func (uuo *UserUpdateOne) RemoveSessions(u ...*UserSession) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearMods clears all "mods" edges to the Mod entity.
func (uuo *UserUpdateOne) ClearMods() *UserUpdateOne {
	uuo.mutation.ClearMods()
	return uuo
}

// RemoveModIDs removes the "mods" edge to Mod entities by IDs.
func (uuo *UserUpdateOne) RemoveModIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveModIDs(ids...)
	return uuo
}

// RemoveMods removes "mods" edges to Mod entities.
func (uuo *UserUpdateOne) RemoveMods(m ...*Mod) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveModIDs(ids...)
}

// ClearGroups clears all "groups" edges to the UserGroup entity.
func (uuo *UserUpdateOne) ClearGroups() *UserUpdateOne {
	uuo.mutation.ClearGroups()
	return uuo
}

// RemoveGroupIDs removes the "groups" edge to UserGroup entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveGroupIDs(ids...)
	return uuo
}

// RemoveGroups removes "groups" edges to UserGroup entities.
func (uuo *UserUpdateOne) RemoveGroups(u ...*UserGroup) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.GithubID(); ok {
		if err := user.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "User.github_id": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.GoogleID(); ok {
		if err := user.GoogleIDValidator(v); err != nil {
			return &ValidationError{Name: "google_id", err: fmt.Errorf(`ent: validator failed for field "User.google_id": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FacebookID(); ok {
		if err := user.FacebookIDValidator(v); err != nil {
			return &ValidationError{Name: "facebook_id", err: fmt.Errorf(`ent: validator failed for field "User.facebook_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if uuo.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := uuo.mutation.JoinedFrom(); ok {
		_spec.SetField(user.FieldJoinedFrom, field.TypeString, value)
	}
	if uuo.mutation.JoinedFromCleared() {
		_spec.ClearField(user.FieldJoinedFrom, field.TypeString)
	}
	if value, ok := uuo.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Rank(); ok {
		_spec.SetField(user.FieldRank, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedRank(); ok {
		_spec.AddField(user.FieldRank, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.GithubID(); ok {
		_spec.SetField(user.FieldGithubID, field.TypeString, value)
	}
	if uuo.mutation.GithubIDCleared() {
		_spec.ClearField(user.FieldGithubID, field.TypeString)
	}
	if value, ok := uuo.mutation.GoogleID(); ok {
		_spec.SetField(user.FieldGoogleID, field.TypeString, value)
	}
	if uuo.mutation.GoogleIDCleared() {
		_spec.ClearField(user.FieldGoogleID, field.TypeString)
	}
	if value, ok := uuo.mutation.FacebookID(); ok {
		_spec.SetField(user.FieldFacebookID, field.TypeString, value)
	}
	if uuo.mutation.FacebookIDCleared() {
		_spec.ClearField(user.FieldFacebookID, field.TypeString)
	}
	if uuo.mutation.GuidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuidesTable,
			Columns: []string{user.GuidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGuidesIDs(); len(nodes) > 0 && !uuo.mutation.GuidesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuidesTable,
			Columns: []string{user.GuidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GuidesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuidesTable,
			Columns: []string{user.GuidesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersession.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModsTable,
			Columns: user.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedModsIDs(); len(nodes) > 0 && !uuo.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModsTable,
			Columns: user.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ModsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModsTable,
			Columns: user.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: []string{user.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: []string{user.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: []string{user.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usergroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
