// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// JoinedFrom applies equality check predicate on the "joined_from" field. It's identical to JoinedFromEQ.
func JoinedFrom(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJoinedFrom, v))
}

// Banned applies equality check predicate on the "banned" field. It's identical to BannedEQ.
func Banned(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBanned, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRank, v))
}

// GithubID applies equality check predicate on the "github_id" field. It's identical to GithubIDEQ.
func GithubID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubID, v))
}

// GoogleID applies equality check predicate on the "google_id" field. It's identical to GoogleIDEQ.
func GoogleID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGoogleID, v))
}

// FacebookID applies equality check predicate on the "facebook_id" field. It's identical to FacebookIDEQ.
func FacebookID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFacebookID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatar, v))
}

// JoinedFromEQ applies the EQ predicate on the "joined_from" field.
func JoinedFromEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldJoinedFrom, v))
}

// JoinedFromNEQ applies the NEQ predicate on the "joined_from" field.
func JoinedFromNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldJoinedFrom, v))
}

// JoinedFromIn applies the In predicate on the "joined_from" field.
func JoinedFromIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldJoinedFrom, vs...))
}

// JoinedFromNotIn applies the NotIn predicate on the "joined_from" field.
func JoinedFromNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldJoinedFrom, vs...))
}

// JoinedFromGT applies the GT predicate on the "joined_from" field.
func JoinedFromGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldJoinedFrom, v))
}

// JoinedFromGTE applies the GTE predicate on the "joined_from" field.
func JoinedFromGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldJoinedFrom, v))
}

// JoinedFromLT applies the LT predicate on the "joined_from" field.
func JoinedFromLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldJoinedFrom, v))
}

// JoinedFromLTE applies the LTE predicate on the "joined_from" field.
func JoinedFromLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldJoinedFrom, v))
}

// JoinedFromContains applies the Contains predicate on the "joined_from" field.
func JoinedFromContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldJoinedFrom, v))
}

// JoinedFromHasPrefix applies the HasPrefix predicate on the "joined_from" field.
func JoinedFromHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldJoinedFrom, v))
}

// JoinedFromHasSuffix applies the HasSuffix predicate on the "joined_from" field.
func JoinedFromHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldJoinedFrom, v))
}

// JoinedFromIsNil applies the IsNil predicate on the "joined_from" field.
func JoinedFromIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldJoinedFrom))
}

// JoinedFromNotNil applies the NotNil predicate on the "joined_from" field.
func JoinedFromNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldJoinedFrom))
}

// JoinedFromEqualFold applies the EqualFold predicate on the "joined_from" field.
func JoinedFromEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldJoinedFrom, v))
}

// JoinedFromContainsFold applies the ContainsFold predicate on the "joined_from" field.
func JoinedFromContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldJoinedFrom, v))
}

// BannedEQ applies the EQ predicate on the "banned" field.
func BannedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBanned, v))
}

// BannedNEQ applies the NEQ predicate on the "banned" field.
func BannedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBanned, v))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRank, v))
}

// GithubIDEQ applies the EQ predicate on the "github_id" field.
func GithubIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGithubID, v))
}

// GithubIDNEQ applies the NEQ predicate on the "github_id" field.
func GithubIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGithubID, v))
}

// GithubIDIn applies the In predicate on the "github_id" field.
func GithubIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGithubID, vs...))
}

// GithubIDNotIn applies the NotIn predicate on the "github_id" field.
func GithubIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGithubID, vs...))
}

// GithubIDGT applies the GT predicate on the "github_id" field.
func GithubIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGithubID, v))
}

// GithubIDGTE applies the GTE predicate on the "github_id" field.
func GithubIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGithubID, v))
}

// GithubIDLT applies the LT predicate on the "github_id" field.
func GithubIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGithubID, v))
}

// GithubIDLTE applies the LTE predicate on the "github_id" field.
func GithubIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGithubID, v))
}

// GithubIDContains applies the Contains predicate on the "github_id" field.
func GithubIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGithubID, v))
}

// GithubIDHasPrefix applies the HasPrefix predicate on the "github_id" field.
func GithubIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGithubID, v))
}

// GithubIDHasSuffix applies the HasSuffix predicate on the "github_id" field.
func GithubIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGithubID, v))
}

// GithubIDIsNil applies the IsNil predicate on the "github_id" field.
func GithubIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGithubID))
}

// GithubIDNotNil applies the NotNil predicate on the "github_id" field.
func GithubIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGithubID))
}

// GithubIDEqualFold applies the EqualFold predicate on the "github_id" field.
func GithubIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGithubID, v))
}

// GithubIDContainsFold applies the ContainsFold predicate on the "github_id" field.
func GithubIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGithubID, v))
}

// GoogleIDEQ applies the EQ predicate on the "google_id" field.
func GoogleIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGoogleID, v))
}

// GoogleIDNEQ applies the NEQ predicate on the "google_id" field.
func GoogleIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGoogleID, v))
}

// GoogleIDIn applies the In predicate on the "google_id" field.
func GoogleIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldGoogleID, vs...))
}

// GoogleIDNotIn applies the NotIn predicate on the "google_id" field.
func GoogleIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGoogleID, vs...))
}

// GoogleIDGT applies the GT predicate on the "google_id" field.
func GoogleIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldGoogleID, v))
}

// GoogleIDGTE applies the GTE predicate on the "google_id" field.
func GoogleIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldGoogleID, v))
}

// GoogleIDLT applies the LT predicate on the "google_id" field.
func GoogleIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldGoogleID, v))
}

// GoogleIDLTE applies the LTE predicate on the "google_id" field.
func GoogleIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldGoogleID, v))
}

// GoogleIDContains applies the Contains predicate on the "google_id" field.
func GoogleIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldGoogleID, v))
}

// GoogleIDHasPrefix applies the HasPrefix predicate on the "google_id" field.
func GoogleIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldGoogleID, v))
}

// GoogleIDHasSuffix applies the HasSuffix predicate on the "google_id" field.
func GoogleIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldGoogleID, v))
}

// GoogleIDIsNil applies the IsNil predicate on the "google_id" field.
func GoogleIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldGoogleID))
}

// GoogleIDNotNil applies the NotNil predicate on the "google_id" field.
func GoogleIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldGoogleID))
}

// GoogleIDEqualFold applies the EqualFold predicate on the "google_id" field.
func GoogleIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldGoogleID, v))
}

// GoogleIDContainsFold applies the ContainsFold predicate on the "google_id" field.
func GoogleIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldGoogleID, v))
}

// FacebookIDEQ applies the EQ predicate on the "facebook_id" field.
func FacebookIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFacebookID, v))
}

// FacebookIDNEQ applies the NEQ predicate on the "facebook_id" field.
func FacebookIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFacebookID, v))
}

// FacebookIDIn applies the In predicate on the "facebook_id" field.
func FacebookIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFacebookID, vs...))
}

// FacebookIDNotIn applies the NotIn predicate on the "facebook_id" field.
func FacebookIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFacebookID, vs...))
}

// FacebookIDGT applies the GT predicate on the "facebook_id" field.
func FacebookIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFacebookID, v))
}

// FacebookIDGTE applies the GTE predicate on the "facebook_id" field.
func FacebookIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFacebookID, v))
}

// FacebookIDLT applies the LT predicate on the "facebook_id" field.
func FacebookIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFacebookID, v))
}

// FacebookIDLTE applies the LTE predicate on the "facebook_id" field.
func FacebookIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFacebookID, v))
}

// FacebookIDContains applies the Contains predicate on the "facebook_id" field.
func FacebookIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFacebookID, v))
}

// FacebookIDHasPrefix applies the HasPrefix predicate on the "facebook_id" field.
func FacebookIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFacebookID, v))
}

// FacebookIDHasSuffix applies the HasSuffix predicate on the "facebook_id" field.
func FacebookIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFacebookID, v))
}

// FacebookIDIsNil applies the IsNil predicate on the "facebook_id" field.
func FacebookIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldFacebookID))
}

// FacebookIDNotNil applies the NotNil predicate on the "facebook_id" field.
func FacebookIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldFacebookID))
}

// FacebookIDEqualFold applies the EqualFold predicate on the "facebook_id" field.
func FacebookIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFacebookID, v))
}

// FacebookIDContainsFold applies the ContainsFold predicate on the "facebook_id" field.
func FacebookIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFacebookID, v))
}

// HasGuides applies the HasEdge predicate on the "guides" edge.
func HasGuides() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GuidesTable, GuidesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuidesWith applies the HasEdge predicate on the "guides" edge with a given conditions (other predicates).
func HasGuidesWith(preds ...predicate.Guide) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGuidesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.UserSession) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMods applies the HasEdge predicate on the "mods" edge.
func HasMods() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModsTable, ModsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModsWith applies the HasEdge predicate on the "mods" edge with a given conditions (other predicates).
func HasModsWith(preds ...predicate.Mod) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newModsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.UserGroup) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserMods applies the HasEdge predicate on the "user_mods" edge.
func HasUserMods() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserModsTable, UserModsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserModsWith applies the HasEdge predicate on the "user_mods" edge with a given conditions (other predicates).
func HasUserModsWith(preds ...predicate.UserMod) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserModsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
