// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldAvatarThumbhash holds the string denoting the avatar_thumbhash field in the database.
	FieldAvatarThumbhash = "avatar_thumbhash"
	// FieldJoinedFrom holds the string denoting the joined_from field in the database.
	FieldJoinedFrom = "joined_from"
	// FieldBanned holds the string denoting the banned field in the database.
	FieldBanned = "banned"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldGithubID holds the string denoting the github_id field in the database.
	FieldGithubID = "github_id"
	// FieldGoogleID holds the string denoting the google_id field in the database.
	FieldGoogleID = "google_id"
	// FieldFacebookID holds the string denoting the facebook_id field in the database.
	FieldFacebookID = "facebook_id"
	// EdgeGuides holds the string denoting the guides edge name in mutations.
	EdgeGuides = "guides"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeMods holds the string denoting the mods edge name in mutations.
	EdgeMods = "mods"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeUserMods holds the string denoting the user_mods edge name in mutations.
	EdgeUserMods = "user_mods"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GuidesTable is the table that holds the guides relation/edge.
	GuidesTable = "guides"
	// GuidesInverseTable is the table name for the Guide entity.
	// It exists in this package in order to avoid circular dependency with the "guide" package.
	GuidesInverseTable = "guides"
	// GuidesColumn is the table column denoting the guides relation/edge.
	GuidesColumn = "user_id"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "user_sessions"
	// SessionsInverseTable is the table name for the UserSession entity.
	// It exists in this package in order to avoid circular dependency with the "usersession" package.
	SessionsInverseTable = "user_sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_id"
	// ModsTable is the table that holds the mods relation/edge. The primary key declared below.
	ModsTable = "user_mods"
	// ModsInverseTable is the table name for the Mod entity.
	// It exists in this package in order to avoid circular dependency with the "mod" package.
	ModsInverseTable = "mods"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "user_groups"
	// GroupsInverseTable is the table name for the UserGroup entity.
	// It exists in this package in order to avoid circular dependency with the "usergroup" package.
	GroupsInverseTable = "user_groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "user_id"
	// UserModsTable is the table that holds the user_mods relation/edge.
	UserModsTable = "user_mods"
	// UserModsInverseTable is the table name for the UserMod entity.
	// It exists in this package in order to avoid circular dependency with the "usermod" package.
	UserModsInverseTable = "user_mods"
	// UserModsColumn is the table column denoting the user_mods relation/edge.
	UserModsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldEmail,
	FieldUsername,
	FieldAvatar,
	FieldAvatarThumbhash,
	FieldJoinedFrom,
	FieldBanned,
	FieldRank,
	FieldGithubID,
	FieldGoogleID,
	FieldFacebookID,
}

var (
	// ModsPrimaryKey and ModsColumn2 are the table columns denoting the
	// primary key for the mods relation (M2M).
	ModsPrimaryKey = []string{"user_id", "mod_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/satisfactorymodding/smr-api/generated/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// DefaultBanned holds the default value on creation for the "banned" field.
	DefaultBanned bool
	// DefaultRank holds the default value on creation for the "rank" field.
	DefaultRank int
	// GithubIDValidator is a validator for the "github_id" field. It is called by the builders before save.
	GithubIDValidator func(string) error
	// GoogleIDValidator is a validator for the "google_id" field. It is called by the builders before save.
	GoogleIDValidator func(string) error
	// FacebookIDValidator is a validator for the "facebook_id" field. It is called by the builders before save.
	FacebookIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByAvatarThumbhash orders the results by the avatar_thumbhash field.
func ByAvatarThumbhash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarThumbhash, opts...).ToFunc()
}

// ByJoinedFrom orders the results by the joined_from field.
func ByJoinedFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoinedFrom, opts...).ToFunc()
}

// ByBanned orders the results by the banned field.
func ByBanned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBanned, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByGithubID orders the results by the github_id field.
func ByGithubID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGithubID, opts...).ToFunc()
}

// ByGoogleID orders the results by the google_id field.
func ByGoogleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoogleID, opts...).ToFunc()
}

// ByFacebookID orders the results by the facebook_id field.
func ByFacebookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFacebookID, opts...).ToFunc()
}

// ByGuidesCount orders the results by guides count.
func ByGuidesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGuidesStep(), opts...)
	}
}

// ByGuides orders the results by guides terms.
func ByGuides(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuidesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByModsCount orders the results by mods count.
func ByModsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModsStep(), opts...)
	}
}

// ByMods orders the results by mods terms.
func ByMods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserModsCount orders the results by user_mods count.
func ByUserModsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserModsStep(), opts...)
	}
}

// ByUserMods orders the results by user_mods terms.
func ByUserMods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserModsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGuidesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuidesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GuidesTable, GuidesColumn),
	)
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newModsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ModsTable, ModsPrimaryKey...),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
	)
}
func newUserModsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserModsInverseTable, UserModsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserModsTable, UserModsColumn),
	)
}
