// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversion"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversiontarget"
)

// SmlVersionTargetCreate is the builder for creating a SmlVersionTarget entity.
type SmlVersionTargetCreate struct {
	config
	mutation *SmlVersionTargetMutation
	hooks    []Hook
}

// SetVersionID sets the "version_id" field.
func (svtc *SmlVersionTargetCreate) SetVersionID(s string) *SmlVersionTargetCreate {
	svtc.mutation.SetVersionID(s)
	return svtc
}

// SetTargetName sets the "target_name" field.
func (svtc *SmlVersionTargetCreate) SetTargetName(s string) *SmlVersionTargetCreate {
	svtc.mutation.SetTargetName(s)
	return svtc
}

// SetLink sets the "link" field.
func (svtc *SmlVersionTargetCreate) SetLink(s string) *SmlVersionTargetCreate {
	svtc.mutation.SetLink(s)
	return svtc
}

// SetID sets the "id" field.
func (svtc *SmlVersionTargetCreate) SetID(s string) *SmlVersionTargetCreate {
	svtc.mutation.SetID(s)
	return svtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (svtc *SmlVersionTargetCreate) SetNillableID(s *string) *SmlVersionTargetCreate {
	if s != nil {
		svtc.SetID(*s)
	}
	return svtc
}

// SetSmlVersionID sets the "sml_version" edge to the SmlVersion entity by ID.
func (svtc *SmlVersionTargetCreate) SetSmlVersionID(id string) *SmlVersionTargetCreate {
	svtc.mutation.SetSmlVersionID(id)
	return svtc
}

// SetSmlVersion sets the "sml_version" edge to the SmlVersion entity.
func (svtc *SmlVersionTargetCreate) SetSmlVersion(s *SmlVersion) *SmlVersionTargetCreate {
	return svtc.SetSmlVersionID(s.ID)
}

// Mutation returns the SmlVersionTargetMutation object of the builder.
func (svtc *SmlVersionTargetCreate) Mutation() *SmlVersionTargetMutation {
	return svtc.mutation
}

// Save creates the SmlVersionTarget in the database.
func (svtc *SmlVersionTargetCreate) Save(ctx context.Context) (*SmlVersionTarget, error) {
	svtc.defaults()
	return withHooks(ctx, svtc.sqlSave, svtc.mutation, svtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svtc *SmlVersionTargetCreate) SaveX(ctx context.Context) *SmlVersionTarget {
	v, err := svtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svtc *SmlVersionTargetCreate) Exec(ctx context.Context) error {
	_, err := svtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svtc *SmlVersionTargetCreate) ExecX(ctx context.Context) {
	if err := svtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svtc *SmlVersionTargetCreate) defaults() {
	if _, ok := svtc.mutation.ID(); !ok {
		v := smlversiontarget.DefaultID()
		svtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svtc *SmlVersionTargetCreate) check() error {
	if _, ok := svtc.mutation.VersionID(); !ok {
		return &ValidationError{Name: "version_id", err: errors.New(`ent: missing required field "SmlVersionTarget.version_id"`)}
	}
	if _, ok := svtc.mutation.TargetName(); !ok {
		return &ValidationError{Name: "target_name", err: errors.New(`ent: missing required field "SmlVersionTarget.target_name"`)}
	}
	if _, ok := svtc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "SmlVersionTarget.link"`)}
	}
	if _, ok := svtc.mutation.SmlVersionID(); !ok {
		return &ValidationError{Name: "sml_version", err: errors.New(`ent: missing required edge "SmlVersionTarget.sml_version"`)}
	}
	return nil
}

func (svtc *SmlVersionTargetCreate) sqlSave(ctx context.Context) (*SmlVersionTarget, error) {
	if err := svtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SmlVersionTarget.ID type: %T", _spec.ID.Value)
		}
	}
	svtc.mutation.id = &_node.ID
	svtc.mutation.done = true
	return _node, nil
}

func (svtc *SmlVersionTargetCreate) createSpec() (*SmlVersionTarget, *sqlgraph.CreateSpec) {
	var (
		_node = &SmlVersionTarget{config: svtc.config}
		_spec = sqlgraph.NewCreateSpec(smlversiontarget.Table, sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString))
	)
	if id, ok := svtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := svtc.mutation.TargetName(); ok {
		_spec.SetField(smlversiontarget.FieldTargetName, field.TypeString, value)
		_node.TargetName = value
	}
	if value, ok := svtc.mutation.Link(); ok {
		_spec.SetField(smlversiontarget.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if nodes := svtc.mutation.SmlVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   smlversiontarget.SmlVersionTable,
			Columns: []string{smlversiontarget.SmlVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smlversion.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VersionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SmlVersionTargetCreateBulk is the builder for creating many SmlVersionTarget entities in bulk.
type SmlVersionTargetCreateBulk struct {
	config
	err      error
	builders []*SmlVersionTargetCreate
}

// Save creates the SmlVersionTarget entities in the database.
func (svtcb *SmlVersionTargetCreateBulk) Save(ctx context.Context) ([]*SmlVersionTarget, error) {
	if svtcb.err != nil {
		return nil, svtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(svtcb.builders))
	nodes := make([]*SmlVersionTarget, len(svtcb.builders))
	mutators := make([]Mutator, len(svtcb.builders))
	for i := range svtcb.builders {
		func(i int, root context.Context) {
			builder := svtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SmlVersionTargetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svtcb *SmlVersionTargetCreateBulk) SaveX(ctx context.Context) []*SmlVersionTarget {
	v, err := svtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svtcb *SmlVersionTargetCreateBulk) Exec(ctx context.Context) error {
	_, err := svtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svtcb *SmlVersionTargetCreateBulk) ExecX(ctx context.Context) {
	if err := svtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
