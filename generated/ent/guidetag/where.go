// Code generated by ent, DO NOT EDIT.

package guidetag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// GuideID applies equality check predicate on the "guide_id" field. It's identical to GuideIDEQ.
func GuideID(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldEQ(FieldGuideID, v))
}

// TagID applies equality check predicate on the "tag_id" field. It's identical to TagIDEQ.
func TagID(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldEQ(FieldTagID, v))
}

// GuideIDEQ applies the EQ predicate on the "guide_id" field.
func GuideIDEQ(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldEQ(FieldGuideID, v))
}

// GuideIDNEQ applies the NEQ predicate on the "guide_id" field.
func GuideIDNEQ(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldNEQ(FieldGuideID, v))
}

// GuideIDIn applies the In predicate on the "guide_id" field.
func GuideIDIn(vs ...string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldIn(FieldGuideID, vs...))
}

// GuideIDNotIn applies the NotIn predicate on the "guide_id" field.
func GuideIDNotIn(vs ...string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldNotIn(FieldGuideID, vs...))
}

// GuideIDGT applies the GT predicate on the "guide_id" field.
func GuideIDGT(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldGT(FieldGuideID, v))
}

// GuideIDGTE applies the GTE predicate on the "guide_id" field.
func GuideIDGTE(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldGTE(FieldGuideID, v))
}

// GuideIDLT applies the LT predicate on the "guide_id" field.
func GuideIDLT(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldLT(FieldGuideID, v))
}

// GuideIDLTE applies the LTE predicate on the "guide_id" field.
func GuideIDLTE(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldLTE(FieldGuideID, v))
}

// GuideIDContains applies the Contains predicate on the "guide_id" field.
func GuideIDContains(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldContains(FieldGuideID, v))
}

// GuideIDHasPrefix applies the HasPrefix predicate on the "guide_id" field.
func GuideIDHasPrefix(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldHasPrefix(FieldGuideID, v))
}

// GuideIDHasSuffix applies the HasSuffix predicate on the "guide_id" field.
func GuideIDHasSuffix(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldHasSuffix(FieldGuideID, v))
}

// GuideIDEqualFold applies the EqualFold predicate on the "guide_id" field.
func GuideIDEqualFold(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldEqualFold(FieldGuideID, v))
}

// GuideIDContainsFold applies the ContainsFold predicate on the "guide_id" field.
func GuideIDContainsFold(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldContainsFold(FieldGuideID, v))
}

// TagIDEQ applies the EQ predicate on the "tag_id" field.
func TagIDEQ(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldEQ(FieldTagID, v))
}

// TagIDNEQ applies the NEQ predicate on the "tag_id" field.
func TagIDNEQ(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldNEQ(FieldTagID, v))
}

// TagIDIn applies the In predicate on the "tag_id" field.
func TagIDIn(vs ...string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldIn(FieldTagID, vs...))
}

// TagIDNotIn applies the NotIn predicate on the "tag_id" field.
func TagIDNotIn(vs ...string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldNotIn(FieldTagID, vs...))
}

// TagIDGT applies the GT predicate on the "tag_id" field.
func TagIDGT(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldGT(FieldTagID, v))
}

// TagIDGTE applies the GTE predicate on the "tag_id" field.
func TagIDGTE(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldGTE(FieldTagID, v))
}

// TagIDLT applies the LT predicate on the "tag_id" field.
func TagIDLT(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldLT(FieldTagID, v))
}

// TagIDLTE applies the LTE predicate on the "tag_id" field.
func TagIDLTE(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldLTE(FieldTagID, v))
}

// TagIDContains applies the Contains predicate on the "tag_id" field.
func TagIDContains(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldContains(FieldTagID, v))
}

// TagIDHasPrefix applies the HasPrefix predicate on the "tag_id" field.
func TagIDHasPrefix(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldHasPrefix(FieldTagID, v))
}

// TagIDHasSuffix applies the HasSuffix predicate on the "tag_id" field.
func TagIDHasSuffix(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldHasSuffix(FieldTagID, v))
}

// TagIDEqualFold applies the EqualFold predicate on the "tag_id" field.
func TagIDEqualFold(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldEqualFold(FieldTagID, v))
}

// TagIDContainsFold applies the ContainsFold predicate on the "tag_id" field.
func TagIDContainsFold(v string) predicate.GuideTag {
	return predicate.GuideTag(sql.FieldContainsFold(FieldTagID, v))
}

// HasGuide applies the HasEdge predicate on the "guide" edge.
func HasGuide() predicate.GuideTag {
	return predicate.GuideTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, GuideColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, GuideTable, GuideColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuideWith applies the HasEdge predicate on the "guide" edge with a given conditions (other predicates).
func HasGuideWith(preds ...predicate.Guide) predicate.GuideTag {
	return predicate.GuideTag(func(s *sql.Selector) {
		step := newGuideStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.GuideTag {
	return predicate.GuideTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TagColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tag) predicate.GuideTag {
	return predicate.GuideTag(func(s *sql.Selector) {
		step := newTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GuideTag) predicate.GuideTag {
	return predicate.GuideTag(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GuideTag) predicate.GuideTag {
	return predicate.GuideTag(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GuideTag) predicate.GuideTag {
	return predicate.GuideTag(sql.NotPredicates(p))
}
