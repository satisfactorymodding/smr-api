// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiontarget"
	"github.com/satisfactorymodding/smr-api/util"
)

// VersionUpdate is the builder for updating Version entities.
type VersionUpdate struct {
	config
	hooks     []Hook
	mutation  *VersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VersionUpdate builder.
func (vu *VersionUpdate) Where(ps ...predicate.Version) *VersionUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VersionUpdate) SetUpdatedAt(t time.Time) *VersionUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VersionUpdate) SetDeletedAt(t time.Time) *VersionUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableDeletedAt(t *time.Time) *VersionUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VersionUpdate) ClearDeletedAt() *VersionUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetModID sets the "mod_id" field.
func (vu *VersionUpdate) SetModID(s string) *VersionUpdate {
	vu.mutation.SetModID(s)
	return vu
}

// SetNillableModID sets the "mod_id" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableModID(s *string) *VersionUpdate {
	if s != nil {
		vu.SetModID(*s)
	}
	return vu
}

// SetVersion sets the "version" field.
func (vu *VersionUpdate) SetVersion(s string) *VersionUpdate {
	vu.mutation.SetVersion(s)
	return vu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableVersion(s *string) *VersionUpdate {
	if s != nil {
		vu.SetVersion(*s)
	}
	return vu
}

// SetSmlVersion sets the "sml_version" field.
func (vu *VersionUpdate) SetSmlVersion(s string) *VersionUpdate {
	vu.mutation.SetSmlVersion(s)
	return vu
}

// SetNillableSmlVersion sets the "sml_version" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableSmlVersion(s *string) *VersionUpdate {
	if s != nil {
		vu.SetSmlVersion(*s)
	}
	return vu
}

// ClearSmlVersion clears the value of the "sml_version" field.
func (vu *VersionUpdate) ClearSmlVersion() *VersionUpdate {
	vu.mutation.ClearSmlVersion()
	return vu
}

// SetChangelog sets the "changelog" field.
func (vu *VersionUpdate) SetChangelog(s string) *VersionUpdate {
	vu.mutation.SetChangelog(s)
	return vu
}

// SetNillableChangelog sets the "changelog" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableChangelog(s *string) *VersionUpdate {
	if s != nil {
		vu.SetChangelog(*s)
	}
	return vu
}

// ClearChangelog clears the value of the "changelog" field.
func (vu *VersionUpdate) ClearChangelog() *VersionUpdate {
	vu.mutation.ClearChangelog()
	return vu
}

// SetDownloads sets the "downloads" field.
func (vu *VersionUpdate) SetDownloads(u uint) *VersionUpdate {
	vu.mutation.ResetDownloads()
	vu.mutation.SetDownloads(u)
	return vu
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableDownloads(u *uint) *VersionUpdate {
	if u != nil {
		vu.SetDownloads(*u)
	}
	return vu
}

// AddDownloads adds u to the "downloads" field.
func (vu *VersionUpdate) AddDownloads(u int) *VersionUpdate {
	vu.mutation.AddDownloads(u)
	return vu
}

// SetKey sets the "key" field.
func (vu *VersionUpdate) SetKey(s string) *VersionUpdate {
	vu.mutation.SetKey(s)
	return vu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableKey(s *string) *VersionUpdate {
	if s != nil {
		vu.SetKey(*s)
	}
	return vu
}

// ClearKey clears the value of the "key" field.
func (vu *VersionUpdate) ClearKey() *VersionUpdate {
	vu.mutation.ClearKey()
	return vu
}

// SetStability sets the "stability" field.
func (vu *VersionUpdate) SetStability(u util.Stability) *VersionUpdate {
	vu.mutation.SetStability(u)
	return vu
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableStability(u *util.Stability) *VersionUpdate {
	if u != nil {
		vu.SetStability(*u)
	}
	return vu
}

// SetApproved sets the "approved" field.
func (vu *VersionUpdate) SetApproved(b bool) *VersionUpdate {
	vu.mutation.SetApproved(b)
	return vu
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableApproved(b *bool) *VersionUpdate {
	if b != nil {
		vu.SetApproved(*b)
	}
	return vu
}

// SetHotness sets the "hotness" field.
func (vu *VersionUpdate) SetHotness(u uint) *VersionUpdate {
	vu.mutation.ResetHotness()
	vu.mutation.SetHotness(u)
	return vu
}

// SetNillableHotness sets the "hotness" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableHotness(u *uint) *VersionUpdate {
	if u != nil {
		vu.SetHotness(*u)
	}
	return vu
}

// AddHotness adds u to the "hotness" field.
func (vu *VersionUpdate) AddHotness(u int) *VersionUpdate {
	vu.mutation.AddHotness(u)
	return vu
}

// SetDenied sets the "denied" field.
func (vu *VersionUpdate) SetDenied(b bool) *VersionUpdate {
	vu.mutation.SetDenied(b)
	return vu
}

// SetNillableDenied sets the "denied" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableDenied(b *bool) *VersionUpdate {
	if b != nil {
		vu.SetDenied(*b)
	}
	return vu
}

// SetMetadata sets the "metadata" field.
func (vu *VersionUpdate) SetMetadata(s string) *VersionUpdate {
	vu.mutation.SetMetadata(s)
	return vu
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableMetadata(s *string) *VersionUpdate {
	if s != nil {
		vu.SetMetadata(*s)
	}
	return vu
}

// ClearMetadata clears the value of the "metadata" field.
func (vu *VersionUpdate) ClearMetadata() *VersionUpdate {
	vu.mutation.ClearMetadata()
	return vu
}

// SetModReference sets the "mod_reference" field.
func (vu *VersionUpdate) SetModReference(s string) *VersionUpdate {
	vu.mutation.SetModReference(s)
	return vu
}

// SetNillableModReference sets the "mod_reference" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableModReference(s *string) *VersionUpdate {
	if s != nil {
		vu.SetModReference(*s)
	}
	return vu
}

// SetVersionMajor sets the "version_major" field.
func (vu *VersionUpdate) SetVersionMajor(i int) *VersionUpdate {
	vu.mutation.ResetVersionMajor()
	vu.mutation.SetVersionMajor(i)
	return vu
}

// SetNillableVersionMajor sets the "version_major" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableVersionMajor(i *int) *VersionUpdate {
	if i != nil {
		vu.SetVersionMajor(*i)
	}
	return vu
}

// AddVersionMajor adds i to the "version_major" field.
func (vu *VersionUpdate) AddVersionMajor(i int) *VersionUpdate {
	vu.mutation.AddVersionMajor(i)
	return vu
}

// ClearVersionMajor clears the value of the "version_major" field.
func (vu *VersionUpdate) ClearVersionMajor() *VersionUpdate {
	vu.mutation.ClearVersionMajor()
	return vu
}

// SetVersionMinor sets the "version_minor" field.
func (vu *VersionUpdate) SetVersionMinor(i int) *VersionUpdate {
	vu.mutation.ResetVersionMinor()
	vu.mutation.SetVersionMinor(i)
	return vu
}

// SetNillableVersionMinor sets the "version_minor" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableVersionMinor(i *int) *VersionUpdate {
	if i != nil {
		vu.SetVersionMinor(*i)
	}
	return vu
}

// AddVersionMinor adds i to the "version_minor" field.
func (vu *VersionUpdate) AddVersionMinor(i int) *VersionUpdate {
	vu.mutation.AddVersionMinor(i)
	return vu
}

// ClearVersionMinor clears the value of the "version_minor" field.
func (vu *VersionUpdate) ClearVersionMinor() *VersionUpdate {
	vu.mutation.ClearVersionMinor()
	return vu
}

// SetVersionPatch sets the "version_patch" field.
func (vu *VersionUpdate) SetVersionPatch(i int) *VersionUpdate {
	vu.mutation.ResetVersionPatch()
	vu.mutation.SetVersionPatch(i)
	return vu
}

// SetNillableVersionPatch sets the "version_patch" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableVersionPatch(i *int) *VersionUpdate {
	if i != nil {
		vu.SetVersionPatch(*i)
	}
	return vu
}

// AddVersionPatch adds i to the "version_patch" field.
func (vu *VersionUpdate) AddVersionPatch(i int) *VersionUpdate {
	vu.mutation.AddVersionPatch(i)
	return vu
}

// ClearVersionPatch clears the value of the "version_patch" field.
func (vu *VersionUpdate) ClearVersionPatch() *VersionUpdate {
	vu.mutation.ClearVersionPatch()
	return vu
}

// SetSize sets the "size" field.
func (vu *VersionUpdate) SetSize(i int64) *VersionUpdate {
	vu.mutation.ResetSize()
	vu.mutation.SetSize(i)
	return vu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableSize(i *int64) *VersionUpdate {
	if i != nil {
		vu.SetSize(*i)
	}
	return vu
}

// AddSize adds i to the "size" field.
func (vu *VersionUpdate) AddSize(i int64) *VersionUpdate {
	vu.mutation.AddSize(i)
	return vu
}

// ClearSize clears the value of the "size" field.
func (vu *VersionUpdate) ClearSize() *VersionUpdate {
	vu.mutation.ClearSize()
	return vu
}

// SetHash sets the "hash" field.
func (vu *VersionUpdate) SetHash(s string) *VersionUpdate {
	vu.mutation.SetHash(s)
	return vu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableHash(s *string) *VersionUpdate {
	if s != nil {
		vu.SetHash(*s)
	}
	return vu
}

// ClearHash clears the value of the "hash" field.
func (vu *VersionUpdate) ClearHash() *VersionUpdate {
	vu.mutation.ClearHash()
	return vu
}

// SetMod sets the "mod" edge to the Mod entity.
func (vu *VersionUpdate) SetMod(m *Mod) *VersionUpdate {
	return vu.SetModID(m.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the Mod entity by IDs.
func (vu *VersionUpdate) AddDependencyIDs(ids ...string) *VersionUpdate {
	vu.mutation.AddDependencyIDs(ids...)
	return vu
}

// AddDependencies adds the "dependencies" edges to the Mod entity.
func (vu *VersionUpdate) AddDependencies(m ...*Mod) *VersionUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.AddDependencyIDs(ids...)
}

// AddTargetIDs adds the "targets" edge to the VersionTarget entity by IDs.
func (vu *VersionUpdate) AddTargetIDs(ids ...string) *VersionUpdate {
	vu.mutation.AddTargetIDs(ids...)
	return vu
}

// AddTargets adds the "targets" edges to the VersionTarget entity.
func (vu *VersionUpdate) AddTargets(v ...*VersionTarget) *VersionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.AddTargetIDs(ids...)
}

// Mutation returns the VersionMutation object of the builder.
func (vu *VersionUpdate) Mutation() *VersionMutation {
	return vu.mutation
}

// ClearMod clears the "mod" edge to the Mod entity.
func (vu *VersionUpdate) ClearMod() *VersionUpdate {
	vu.mutation.ClearMod()
	return vu
}

// ClearDependencies clears all "dependencies" edges to the Mod entity.
func (vu *VersionUpdate) ClearDependencies() *VersionUpdate {
	vu.mutation.ClearDependencies()
	return vu
}

// RemoveDependencyIDs removes the "dependencies" edge to Mod entities by IDs.
func (vu *VersionUpdate) RemoveDependencyIDs(ids ...string) *VersionUpdate {
	vu.mutation.RemoveDependencyIDs(ids...)
	return vu
}

// RemoveDependencies removes "dependencies" edges to Mod entities.
func (vu *VersionUpdate) RemoveDependencies(m ...*Mod) *VersionUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vu.RemoveDependencyIDs(ids...)
}

// ClearTargets clears all "targets" edges to the VersionTarget entity.
func (vu *VersionUpdate) ClearTargets() *VersionUpdate {
	vu.mutation.ClearTargets()
	return vu
}

// RemoveTargetIDs removes the "targets" edge to VersionTarget entities by IDs.
func (vu *VersionUpdate) RemoveTargetIDs(ids ...string) *VersionUpdate {
	vu.mutation.RemoveTargetIDs(ids...)
	return vu
}

// RemoveTargets removes "targets" edges to VersionTarget entities.
func (vu *VersionUpdate) RemoveTargets(v ...*VersionTarget) *VersionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vu.RemoveTargetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VersionUpdate) Save(ctx context.Context) (int, error) {
	if err := vu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VersionUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VersionUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VersionUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VersionUpdate) defaults() error {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		if version.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := version.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vu *VersionUpdate) check() error {
	if v, ok := vu.mutation.Version(); ok {
		if err := version.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Version.version": %w`, err)}
		}
	}
	if v, ok := vu.mutation.SmlVersion(); ok {
		if err := version.SmlVersionValidator(v); err != nil {
			return &ValidationError{Name: "sml_version", err: fmt.Errorf(`ent: validator failed for field "Version.sml_version": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Stability(); ok {
		if err := version.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Version.stability": %w`, err)}
		}
	}
	if v, ok := vu.mutation.ModReference(); ok {
		if err := version.ModReferenceValidator(v); err != nil {
			return &ValidationError{Name: "mod_reference", err: fmt.Errorf(`ent: validator failed for field "Version.mod_reference": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Hash(); ok {
		if err := version.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Version.hash": %w`, err)}
		}
	}
	if _, ok := vu.mutation.ModID(); vu.mutation.ModCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Version.mod"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vu *VersionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionUpdate {
	vu.modifiers = append(vu.modifiers, modifiers...)
	return vu
}

func (vu *VersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeString))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(version.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(version.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(version.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vu.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeString, value)
	}
	if value, ok := vu.mutation.SmlVersion(); ok {
		_spec.SetField(version.FieldSmlVersion, field.TypeString, value)
	}
	if vu.mutation.SmlVersionCleared() {
		_spec.ClearField(version.FieldSmlVersion, field.TypeString)
	}
	if value, ok := vu.mutation.Changelog(); ok {
		_spec.SetField(version.FieldChangelog, field.TypeString, value)
	}
	if vu.mutation.ChangelogCleared() {
		_spec.ClearField(version.FieldChangelog, field.TypeString)
	}
	if value, ok := vu.mutation.Downloads(); ok {
		_spec.SetField(version.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := vu.mutation.AddedDownloads(); ok {
		_spec.AddField(version.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := vu.mutation.Key(); ok {
		_spec.SetField(version.FieldKey, field.TypeString, value)
	}
	if vu.mutation.KeyCleared() {
		_spec.ClearField(version.FieldKey, field.TypeString)
	}
	if value, ok := vu.mutation.Stability(); ok {
		_spec.SetField(version.FieldStability, field.TypeEnum, value)
	}
	if value, ok := vu.mutation.Approved(); ok {
		_spec.SetField(version.FieldApproved, field.TypeBool, value)
	}
	if value, ok := vu.mutation.Hotness(); ok {
		_spec.SetField(version.FieldHotness, field.TypeUint, value)
	}
	if value, ok := vu.mutation.AddedHotness(); ok {
		_spec.AddField(version.FieldHotness, field.TypeUint, value)
	}
	if value, ok := vu.mutation.Denied(); ok {
		_spec.SetField(version.FieldDenied, field.TypeBool, value)
	}
	if value, ok := vu.mutation.Metadata(); ok {
		_spec.SetField(version.FieldMetadata, field.TypeString, value)
	}
	if vu.mutation.MetadataCleared() {
		_spec.ClearField(version.FieldMetadata, field.TypeString)
	}
	if value, ok := vu.mutation.ModReference(); ok {
		_spec.SetField(version.FieldModReference, field.TypeString, value)
	}
	if value, ok := vu.mutation.VersionMajor(); ok {
		_spec.SetField(version.FieldVersionMajor, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedVersionMajor(); ok {
		_spec.AddField(version.FieldVersionMajor, field.TypeInt, value)
	}
	if vu.mutation.VersionMajorCleared() {
		_spec.ClearField(version.FieldVersionMajor, field.TypeInt)
	}
	if value, ok := vu.mutation.VersionMinor(); ok {
		_spec.SetField(version.FieldVersionMinor, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedVersionMinor(); ok {
		_spec.AddField(version.FieldVersionMinor, field.TypeInt, value)
	}
	if vu.mutation.VersionMinorCleared() {
		_spec.ClearField(version.FieldVersionMinor, field.TypeInt)
	}
	if value, ok := vu.mutation.VersionPatch(); ok {
		_spec.SetField(version.FieldVersionPatch, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedVersionPatch(); ok {
		_spec.AddField(version.FieldVersionPatch, field.TypeInt, value)
	}
	if vu.mutation.VersionPatchCleared() {
		_spec.ClearField(version.FieldVersionPatch, field.TypeInt)
	}
	if value, ok := vu.mutation.Size(); ok {
		_spec.SetField(version.FieldSize, field.TypeInt64, value)
	}
	if value, ok := vu.mutation.AddedSize(); ok {
		_spec.AddField(version.FieldSize, field.TypeInt64, value)
	}
	if vu.mutation.SizeCleared() {
		_spec.ClearField(version.FieldSize, field.TypeInt64)
	}
	if value, ok := vu.mutation.Hash(); ok {
		_spec.SetField(version.FieldHash, field.TypeString, value)
	}
	if vu.mutation.HashCleared() {
		_spec.ClearField(version.FieldHash, field.TypeString)
	}
	if vu.mutation.ModCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ModTable,
			Columns: []string{version.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ModIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ModTable,
			Columns: []string{version.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.DependenciesTable,
			Columns: version.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		createE := &VersionDependencyCreate{config: vu.config, mutation: newVersionDependencyMutation(vu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !vu.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.DependenciesTable,
			Columns: version.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: vu.config, mutation: newVersionDependencyMutation(vu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.DependenciesTable,
			Columns: version.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: vu.config, mutation: newVersionDependencyMutation(vu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.TargetsTable,
			Columns: []string{version.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedTargetsIDs(); len(nodes) > 0 && !vu.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.TargetsTable,
			Columns: []string{version.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.TargetsTable,
			Columns: []string{version.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VersionUpdateOne is the builder for updating a single Version entity.
type VersionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VersionUpdateOne) SetUpdatedAt(t time.Time) *VersionUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VersionUpdateOne) SetDeletedAt(t time.Time) *VersionUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableDeletedAt(t *time.Time) *VersionUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VersionUpdateOne) ClearDeletedAt() *VersionUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetModID sets the "mod_id" field.
func (vuo *VersionUpdateOne) SetModID(s string) *VersionUpdateOne {
	vuo.mutation.SetModID(s)
	return vuo
}

// SetNillableModID sets the "mod_id" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableModID(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetModID(*s)
	}
	return vuo
}

// SetVersion sets the "version" field.
func (vuo *VersionUpdateOne) SetVersion(s string) *VersionUpdateOne {
	vuo.mutation.SetVersion(s)
	return vuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableVersion(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetVersion(*s)
	}
	return vuo
}

// SetSmlVersion sets the "sml_version" field.
func (vuo *VersionUpdateOne) SetSmlVersion(s string) *VersionUpdateOne {
	vuo.mutation.SetSmlVersion(s)
	return vuo
}

// SetNillableSmlVersion sets the "sml_version" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableSmlVersion(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetSmlVersion(*s)
	}
	return vuo
}

// ClearSmlVersion clears the value of the "sml_version" field.
func (vuo *VersionUpdateOne) ClearSmlVersion() *VersionUpdateOne {
	vuo.mutation.ClearSmlVersion()
	return vuo
}

// SetChangelog sets the "changelog" field.
func (vuo *VersionUpdateOne) SetChangelog(s string) *VersionUpdateOne {
	vuo.mutation.SetChangelog(s)
	return vuo
}

// SetNillableChangelog sets the "changelog" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableChangelog(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetChangelog(*s)
	}
	return vuo
}

// ClearChangelog clears the value of the "changelog" field.
func (vuo *VersionUpdateOne) ClearChangelog() *VersionUpdateOne {
	vuo.mutation.ClearChangelog()
	return vuo
}

// SetDownloads sets the "downloads" field.
func (vuo *VersionUpdateOne) SetDownloads(u uint) *VersionUpdateOne {
	vuo.mutation.ResetDownloads()
	vuo.mutation.SetDownloads(u)
	return vuo
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableDownloads(u *uint) *VersionUpdateOne {
	if u != nil {
		vuo.SetDownloads(*u)
	}
	return vuo
}

// AddDownloads adds u to the "downloads" field.
func (vuo *VersionUpdateOne) AddDownloads(u int) *VersionUpdateOne {
	vuo.mutation.AddDownloads(u)
	return vuo
}

// SetKey sets the "key" field.
func (vuo *VersionUpdateOne) SetKey(s string) *VersionUpdateOne {
	vuo.mutation.SetKey(s)
	return vuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableKey(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetKey(*s)
	}
	return vuo
}

// ClearKey clears the value of the "key" field.
func (vuo *VersionUpdateOne) ClearKey() *VersionUpdateOne {
	vuo.mutation.ClearKey()
	return vuo
}

// SetStability sets the "stability" field.
func (vuo *VersionUpdateOne) SetStability(u util.Stability) *VersionUpdateOne {
	vuo.mutation.SetStability(u)
	return vuo
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableStability(u *util.Stability) *VersionUpdateOne {
	if u != nil {
		vuo.SetStability(*u)
	}
	return vuo
}

// SetApproved sets the "approved" field.
func (vuo *VersionUpdateOne) SetApproved(b bool) *VersionUpdateOne {
	vuo.mutation.SetApproved(b)
	return vuo
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableApproved(b *bool) *VersionUpdateOne {
	if b != nil {
		vuo.SetApproved(*b)
	}
	return vuo
}

// SetHotness sets the "hotness" field.
func (vuo *VersionUpdateOne) SetHotness(u uint) *VersionUpdateOne {
	vuo.mutation.ResetHotness()
	vuo.mutation.SetHotness(u)
	return vuo
}

// SetNillableHotness sets the "hotness" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableHotness(u *uint) *VersionUpdateOne {
	if u != nil {
		vuo.SetHotness(*u)
	}
	return vuo
}

// AddHotness adds u to the "hotness" field.
func (vuo *VersionUpdateOne) AddHotness(u int) *VersionUpdateOne {
	vuo.mutation.AddHotness(u)
	return vuo
}

// SetDenied sets the "denied" field.
func (vuo *VersionUpdateOne) SetDenied(b bool) *VersionUpdateOne {
	vuo.mutation.SetDenied(b)
	return vuo
}

// SetNillableDenied sets the "denied" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableDenied(b *bool) *VersionUpdateOne {
	if b != nil {
		vuo.SetDenied(*b)
	}
	return vuo
}

// SetMetadata sets the "metadata" field.
func (vuo *VersionUpdateOne) SetMetadata(s string) *VersionUpdateOne {
	vuo.mutation.SetMetadata(s)
	return vuo
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableMetadata(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetMetadata(*s)
	}
	return vuo
}

// ClearMetadata clears the value of the "metadata" field.
func (vuo *VersionUpdateOne) ClearMetadata() *VersionUpdateOne {
	vuo.mutation.ClearMetadata()
	return vuo
}

// SetModReference sets the "mod_reference" field.
func (vuo *VersionUpdateOne) SetModReference(s string) *VersionUpdateOne {
	vuo.mutation.SetModReference(s)
	return vuo
}

// SetNillableModReference sets the "mod_reference" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableModReference(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetModReference(*s)
	}
	return vuo
}

// SetVersionMajor sets the "version_major" field.
func (vuo *VersionUpdateOne) SetVersionMajor(i int) *VersionUpdateOne {
	vuo.mutation.ResetVersionMajor()
	vuo.mutation.SetVersionMajor(i)
	return vuo
}

// SetNillableVersionMajor sets the "version_major" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableVersionMajor(i *int) *VersionUpdateOne {
	if i != nil {
		vuo.SetVersionMajor(*i)
	}
	return vuo
}

// AddVersionMajor adds i to the "version_major" field.
func (vuo *VersionUpdateOne) AddVersionMajor(i int) *VersionUpdateOne {
	vuo.mutation.AddVersionMajor(i)
	return vuo
}

// ClearVersionMajor clears the value of the "version_major" field.
func (vuo *VersionUpdateOne) ClearVersionMajor() *VersionUpdateOne {
	vuo.mutation.ClearVersionMajor()
	return vuo
}

// SetVersionMinor sets the "version_minor" field.
func (vuo *VersionUpdateOne) SetVersionMinor(i int) *VersionUpdateOne {
	vuo.mutation.ResetVersionMinor()
	vuo.mutation.SetVersionMinor(i)
	return vuo
}

// SetNillableVersionMinor sets the "version_minor" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableVersionMinor(i *int) *VersionUpdateOne {
	if i != nil {
		vuo.SetVersionMinor(*i)
	}
	return vuo
}

// AddVersionMinor adds i to the "version_minor" field.
func (vuo *VersionUpdateOne) AddVersionMinor(i int) *VersionUpdateOne {
	vuo.mutation.AddVersionMinor(i)
	return vuo
}

// ClearVersionMinor clears the value of the "version_minor" field.
func (vuo *VersionUpdateOne) ClearVersionMinor() *VersionUpdateOne {
	vuo.mutation.ClearVersionMinor()
	return vuo
}

// SetVersionPatch sets the "version_patch" field.
func (vuo *VersionUpdateOne) SetVersionPatch(i int) *VersionUpdateOne {
	vuo.mutation.ResetVersionPatch()
	vuo.mutation.SetVersionPatch(i)
	return vuo
}

// SetNillableVersionPatch sets the "version_patch" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableVersionPatch(i *int) *VersionUpdateOne {
	if i != nil {
		vuo.SetVersionPatch(*i)
	}
	return vuo
}

// AddVersionPatch adds i to the "version_patch" field.
func (vuo *VersionUpdateOne) AddVersionPatch(i int) *VersionUpdateOne {
	vuo.mutation.AddVersionPatch(i)
	return vuo
}

// ClearVersionPatch clears the value of the "version_patch" field.
func (vuo *VersionUpdateOne) ClearVersionPatch() *VersionUpdateOne {
	vuo.mutation.ClearVersionPatch()
	return vuo
}

// SetSize sets the "size" field.
func (vuo *VersionUpdateOne) SetSize(i int64) *VersionUpdateOne {
	vuo.mutation.ResetSize()
	vuo.mutation.SetSize(i)
	return vuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableSize(i *int64) *VersionUpdateOne {
	if i != nil {
		vuo.SetSize(*i)
	}
	return vuo
}

// AddSize adds i to the "size" field.
func (vuo *VersionUpdateOne) AddSize(i int64) *VersionUpdateOne {
	vuo.mutation.AddSize(i)
	return vuo
}

// ClearSize clears the value of the "size" field.
func (vuo *VersionUpdateOne) ClearSize() *VersionUpdateOne {
	vuo.mutation.ClearSize()
	return vuo
}

// SetHash sets the "hash" field.
func (vuo *VersionUpdateOne) SetHash(s string) *VersionUpdateOne {
	vuo.mutation.SetHash(s)
	return vuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableHash(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetHash(*s)
	}
	return vuo
}

// ClearHash clears the value of the "hash" field.
func (vuo *VersionUpdateOne) ClearHash() *VersionUpdateOne {
	vuo.mutation.ClearHash()
	return vuo
}

// SetMod sets the "mod" edge to the Mod entity.
func (vuo *VersionUpdateOne) SetMod(m *Mod) *VersionUpdateOne {
	return vuo.SetModID(m.ID)
}

// AddDependencyIDs adds the "dependencies" edge to the Mod entity by IDs.
func (vuo *VersionUpdateOne) AddDependencyIDs(ids ...string) *VersionUpdateOne {
	vuo.mutation.AddDependencyIDs(ids...)
	return vuo
}

// AddDependencies adds the "dependencies" edges to the Mod entity.
func (vuo *VersionUpdateOne) AddDependencies(m ...*Mod) *VersionUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.AddDependencyIDs(ids...)
}

// AddTargetIDs adds the "targets" edge to the VersionTarget entity by IDs.
func (vuo *VersionUpdateOne) AddTargetIDs(ids ...string) *VersionUpdateOne {
	vuo.mutation.AddTargetIDs(ids...)
	return vuo
}

// AddTargets adds the "targets" edges to the VersionTarget entity.
func (vuo *VersionUpdateOne) AddTargets(v ...*VersionTarget) *VersionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.AddTargetIDs(ids...)
}

// Mutation returns the VersionMutation object of the builder.
func (vuo *VersionUpdateOne) Mutation() *VersionMutation {
	return vuo.mutation
}

// ClearMod clears the "mod" edge to the Mod entity.
func (vuo *VersionUpdateOne) ClearMod() *VersionUpdateOne {
	vuo.mutation.ClearMod()
	return vuo
}

// ClearDependencies clears all "dependencies" edges to the Mod entity.
func (vuo *VersionUpdateOne) ClearDependencies() *VersionUpdateOne {
	vuo.mutation.ClearDependencies()
	return vuo
}

// RemoveDependencyIDs removes the "dependencies" edge to Mod entities by IDs.
func (vuo *VersionUpdateOne) RemoveDependencyIDs(ids ...string) *VersionUpdateOne {
	vuo.mutation.RemoveDependencyIDs(ids...)
	return vuo
}

// RemoveDependencies removes "dependencies" edges to Mod entities.
func (vuo *VersionUpdateOne) RemoveDependencies(m ...*Mod) *VersionUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return vuo.RemoveDependencyIDs(ids...)
}

// ClearTargets clears all "targets" edges to the VersionTarget entity.
func (vuo *VersionUpdateOne) ClearTargets() *VersionUpdateOne {
	vuo.mutation.ClearTargets()
	return vuo
}

// RemoveTargetIDs removes the "targets" edge to VersionTarget entities by IDs.
func (vuo *VersionUpdateOne) RemoveTargetIDs(ids ...string) *VersionUpdateOne {
	vuo.mutation.RemoveTargetIDs(ids...)
	return vuo
}

// RemoveTargets removes "targets" edges to VersionTarget entities.
func (vuo *VersionUpdateOne) RemoveTargets(v ...*VersionTarget) *VersionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return vuo.RemoveTargetIDs(ids...)
}

// Where appends a list predicates to the VersionUpdate builder.
func (vuo *VersionUpdateOne) Where(ps ...predicate.Version) *VersionUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VersionUpdateOne) Select(field string, fields ...string) *VersionUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Version entity.
func (vuo *VersionUpdateOne) Save(ctx context.Context) (*Version, error) {
	if err := vuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VersionUpdateOne) SaveX(ctx context.Context) *Version {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VersionUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VersionUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VersionUpdateOne) defaults() error {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		if version.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := version.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VersionUpdateOne) check() error {
	if v, ok := vuo.mutation.Version(); ok {
		if err := version.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Version.version": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.SmlVersion(); ok {
		if err := version.SmlVersionValidator(v); err != nil {
			return &ValidationError{Name: "sml_version", err: fmt.Errorf(`ent: validator failed for field "Version.sml_version": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Stability(); ok {
		if err := version.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "Version.stability": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.ModReference(); ok {
		if err := version.ModReferenceValidator(v); err != nil {
			return &ValidationError{Name: "mod_reference", err: fmt.Errorf(`ent: validator failed for field "Version.mod_reference": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Hash(); ok {
		if err := version.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "Version.hash": %w`, err)}
		}
	}
	if _, ok := vuo.mutation.ModID(); vuo.mutation.ModCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Version.mod"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vuo *VersionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionUpdateOne {
	vuo.modifiers = append(vuo.modifiers, modifiers...)
	return vuo
}

func (vuo *VersionUpdateOne) sqlSave(ctx context.Context) (_node *Version, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeString))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Version.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, version.FieldID)
		for _, f := range fields {
			if !version.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != version.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(version.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(version.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(version.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeString, value)
	}
	if value, ok := vuo.mutation.SmlVersion(); ok {
		_spec.SetField(version.FieldSmlVersion, field.TypeString, value)
	}
	if vuo.mutation.SmlVersionCleared() {
		_spec.ClearField(version.FieldSmlVersion, field.TypeString)
	}
	if value, ok := vuo.mutation.Changelog(); ok {
		_spec.SetField(version.FieldChangelog, field.TypeString, value)
	}
	if vuo.mutation.ChangelogCleared() {
		_spec.ClearField(version.FieldChangelog, field.TypeString)
	}
	if value, ok := vuo.mutation.Downloads(); ok {
		_spec.SetField(version.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := vuo.mutation.AddedDownloads(); ok {
		_spec.AddField(version.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := vuo.mutation.Key(); ok {
		_spec.SetField(version.FieldKey, field.TypeString, value)
	}
	if vuo.mutation.KeyCleared() {
		_spec.ClearField(version.FieldKey, field.TypeString)
	}
	if value, ok := vuo.mutation.Stability(); ok {
		_spec.SetField(version.FieldStability, field.TypeEnum, value)
	}
	if value, ok := vuo.mutation.Approved(); ok {
		_spec.SetField(version.FieldApproved, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.Hotness(); ok {
		_spec.SetField(version.FieldHotness, field.TypeUint, value)
	}
	if value, ok := vuo.mutation.AddedHotness(); ok {
		_spec.AddField(version.FieldHotness, field.TypeUint, value)
	}
	if value, ok := vuo.mutation.Denied(); ok {
		_spec.SetField(version.FieldDenied, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.Metadata(); ok {
		_spec.SetField(version.FieldMetadata, field.TypeString, value)
	}
	if vuo.mutation.MetadataCleared() {
		_spec.ClearField(version.FieldMetadata, field.TypeString)
	}
	if value, ok := vuo.mutation.ModReference(); ok {
		_spec.SetField(version.FieldModReference, field.TypeString, value)
	}
	if value, ok := vuo.mutation.VersionMajor(); ok {
		_spec.SetField(version.FieldVersionMajor, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedVersionMajor(); ok {
		_spec.AddField(version.FieldVersionMajor, field.TypeInt, value)
	}
	if vuo.mutation.VersionMajorCleared() {
		_spec.ClearField(version.FieldVersionMajor, field.TypeInt)
	}
	if value, ok := vuo.mutation.VersionMinor(); ok {
		_spec.SetField(version.FieldVersionMinor, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedVersionMinor(); ok {
		_spec.AddField(version.FieldVersionMinor, field.TypeInt, value)
	}
	if vuo.mutation.VersionMinorCleared() {
		_spec.ClearField(version.FieldVersionMinor, field.TypeInt)
	}
	if value, ok := vuo.mutation.VersionPatch(); ok {
		_spec.SetField(version.FieldVersionPatch, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedVersionPatch(); ok {
		_spec.AddField(version.FieldVersionPatch, field.TypeInt, value)
	}
	if vuo.mutation.VersionPatchCleared() {
		_spec.ClearField(version.FieldVersionPatch, field.TypeInt)
	}
	if value, ok := vuo.mutation.Size(); ok {
		_spec.SetField(version.FieldSize, field.TypeInt64, value)
	}
	if value, ok := vuo.mutation.AddedSize(); ok {
		_spec.AddField(version.FieldSize, field.TypeInt64, value)
	}
	if vuo.mutation.SizeCleared() {
		_spec.ClearField(version.FieldSize, field.TypeInt64)
	}
	if value, ok := vuo.mutation.Hash(); ok {
		_spec.SetField(version.FieldHash, field.TypeString, value)
	}
	if vuo.mutation.HashCleared() {
		_spec.ClearField(version.FieldHash, field.TypeString)
	}
	if vuo.mutation.ModCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ModTable,
			Columns: []string{version.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ModIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   version.ModTable,
			Columns: []string{version.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.DependenciesTable,
			Columns: version.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		createE := &VersionDependencyCreate{config: vuo.config, mutation: newVersionDependencyMutation(vuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !vuo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.DependenciesTable,
			Columns: version.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: vuo.config, mutation: newVersionDependencyMutation(vuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   version.DependenciesTable,
			Columns: version.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: vuo.config, mutation: newVersionDependencyMutation(vuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.TargetsTable,
			Columns: []string{version.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedTargetsIDs(); len(nodes) > 0 && !vuo.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.TargetsTable,
			Columns: []string{version.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   version.TargetsTable,
			Columns: []string{version.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(versiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vuo.modifiers...)
	_node = &Version{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
