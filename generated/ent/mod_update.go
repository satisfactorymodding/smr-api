// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/util"
)

// ModUpdate is the builder for updating Mod entities.
type ModUpdate struct {
	config
	hooks     []Hook
	mutation  *ModMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ModUpdate builder.
func (mu *ModUpdate) Where(ps ...predicate.Mod) *ModUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *ModUpdate) SetUpdatedAt(t time.Time) *ModUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *ModUpdate) SetDeletedAt(t time.Time) *ModUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *ModUpdate) SetNillableDeletedAt(t *time.Time) *ModUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *ModUpdate) ClearDeletedAt() *ModUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetName sets the "name" field.
func (mu *ModUpdate) SetName(s string) *ModUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetShortDescription sets the "short_description" field.
func (mu *ModUpdate) SetShortDescription(s string) *ModUpdate {
	mu.mutation.SetShortDescription(s)
	return mu
}

// SetFullDescription sets the "full_description" field.
func (mu *ModUpdate) SetFullDescription(s string) *ModUpdate {
	mu.mutation.SetFullDescription(s)
	return mu
}

// SetLogo sets the "logo" field.
func (mu *ModUpdate) SetLogo(s string) *ModUpdate {
	mu.mutation.SetLogo(s)
	return mu
}

// SetSourceURL sets the "source_url" field.
func (mu *ModUpdate) SetSourceURL(s string) *ModUpdate {
	mu.mutation.SetSourceURL(s)
	return mu
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (mu *ModUpdate) SetNillableSourceURL(s *string) *ModUpdate {
	if s != nil {
		mu.SetSourceURL(*s)
	}
	return mu
}

// ClearSourceURL clears the value of the "source_url" field.
func (mu *ModUpdate) ClearSourceURL() *ModUpdate {
	mu.mutation.ClearSourceURL()
	return mu
}

// SetCreatorID sets the "creator_id" field.
func (mu *ModUpdate) SetCreatorID(s string) *ModUpdate {
	mu.mutation.SetCreatorID(s)
	return mu
}

// SetApproved sets the "approved" field.
func (mu *ModUpdate) SetApproved(b bool) *ModUpdate {
	mu.mutation.SetApproved(b)
	return mu
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (mu *ModUpdate) SetNillableApproved(b *bool) *ModUpdate {
	if b != nil {
		mu.SetApproved(*b)
	}
	return mu
}

// SetViews sets the "views" field.
func (mu *ModUpdate) SetViews(u uint) *ModUpdate {
	mu.mutation.ResetViews()
	mu.mutation.SetViews(u)
	return mu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (mu *ModUpdate) SetNillableViews(u *uint) *ModUpdate {
	if u != nil {
		mu.SetViews(*u)
	}
	return mu
}

// AddViews adds u to the "views" field.
func (mu *ModUpdate) AddViews(u int) *ModUpdate {
	mu.mutation.AddViews(u)
	return mu
}

// SetHotness sets the "hotness" field.
func (mu *ModUpdate) SetHotness(u uint) *ModUpdate {
	mu.mutation.ResetHotness()
	mu.mutation.SetHotness(u)
	return mu
}

// SetNillableHotness sets the "hotness" field if the given value is not nil.
func (mu *ModUpdate) SetNillableHotness(u *uint) *ModUpdate {
	if u != nil {
		mu.SetHotness(*u)
	}
	return mu
}

// AddHotness adds u to the "hotness" field.
func (mu *ModUpdate) AddHotness(u int) *ModUpdate {
	mu.mutation.AddHotness(u)
	return mu
}

// SetPopularity sets the "popularity" field.
func (mu *ModUpdate) SetPopularity(u uint) *ModUpdate {
	mu.mutation.ResetPopularity()
	mu.mutation.SetPopularity(u)
	return mu
}

// SetNillablePopularity sets the "popularity" field if the given value is not nil.
func (mu *ModUpdate) SetNillablePopularity(u *uint) *ModUpdate {
	if u != nil {
		mu.SetPopularity(*u)
	}
	return mu
}

// AddPopularity adds u to the "popularity" field.
func (mu *ModUpdate) AddPopularity(u int) *ModUpdate {
	mu.mutation.AddPopularity(u)
	return mu
}

// SetDownloads sets the "downloads" field.
func (mu *ModUpdate) SetDownloads(u uint) *ModUpdate {
	mu.mutation.ResetDownloads()
	mu.mutation.SetDownloads(u)
	return mu
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (mu *ModUpdate) SetNillableDownloads(u *uint) *ModUpdate {
	if u != nil {
		mu.SetDownloads(*u)
	}
	return mu
}

// AddDownloads adds u to the "downloads" field.
func (mu *ModUpdate) AddDownloads(u int) *ModUpdate {
	mu.mutation.AddDownloads(u)
	return mu
}

// SetDenied sets the "denied" field.
func (mu *ModUpdate) SetDenied(b bool) *ModUpdate {
	mu.mutation.SetDenied(b)
	return mu
}

// SetNillableDenied sets the "denied" field if the given value is not nil.
func (mu *ModUpdate) SetNillableDenied(b *bool) *ModUpdate {
	if b != nil {
		mu.SetDenied(*b)
	}
	return mu
}

// SetLastVersionDate sets the "last_version_date" field.
func (mu *ModUpdate) SetLastVersionDate(t time.Time) *ModUpdate {
	mu.mutation.SetLastVersionDate(t)
	return mu
}

// SetNillableLastVersionDate sets the "last_version_date" field if the given value is not nil.
func (mu *ModUpdate) SetNillableLastVersionDate(t *time.Time) *ModUpdate {
	if t != nil {
		mu.SetLastVersionDate(*t)
	}
	return mu
}

// ClearLastVersionDate clears the value of the "last_version_date" field.
func (mu *ModUpdate) ClearLastVersionDate() *ModUpdate {
	mu.mutation.ClearLastVersionDate()
	return mu
}

// SetModReference sets the "mod_reference" field.
func (mu *ModUpdate) SetModReference(s string) *ModUpdate {
	mu.mutation.SetModReference(s)
	return mu
}

// SetHidden sets the "hidden" field.
func (mu *ModUpdate) SetHidden(b bool) *ModUpdate {
	mu.mutation.SetHidden(b)
	return mu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (mu *ModUpdate) SetNillableHidden(b *bool) *ModUpdate {
	if b != nil {
		mu.SetHidden(*b)
	}
	return mu
}

// SetCompatibility sets the "compatibility" field.
func (mu *ModUpdate) SetCompatibility(ui *util.CompatibilityInfo) *ModUpdate {
	mu.mutation.SetCompatibility(ui)
	return mu
}

// ClearCompatibility clears the value of the "compatibility" field.
func (mu *ModUpdate) ClearCompatibility() *ModUpdate {
	mu.mutation.ClearCompatibility()
	return mu
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (mu *ModUpdate) AddVersionIDs(ids ...string) *ModUpdate {
	mu.mutation.AddVersionIDs(ids...)
	return mu
}

// AddVersions adds the "versions" edges to the Version entity.
func (mu *ModUpdate) AddVersions(v ...*Version) *ModUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mu.AddVersionIDs(ids...)
}

// AddAuthorIDs adds the "authors" edge to the User entity by IDs.
func (mu *ModUpdate) AddAuthorIDs(ids ...string) *ModUpdate {
	mu.mutation.AddAuthorIDs(ids...)
	return mu
}

// AddAuthors adds the "authors" edges to the User entity.
func (mu *ModUpdate) AddAuthors(u ...*User) *ModUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddAuthorIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (mu *ModUpdate) AddTagIDs(ids ...string) *ModUpdate {
	mu.mutation.AddTagIDs(ids...)
	return mu
}

// AddTags adds the "tags" edges to the Tag entity.
func (mu *ModUpdate) AddTags(t ...*Tag) *ModUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTagIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Version entity by IDs.
func (mu *ModUpdate) AddDependentIDs(ids ...string) *ModUpdate {
	mu.mutation.AddDependentIDs(ids...)
	return mu
}

// AddDependents adds the "dependents" edges to the Version entity.
func (mu *ModUpdate) AddDependents(v ...*Version) *ModUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mu.AddDependentIDs(ids...)
}

// Mutation returns the ModMutation object of the builder.
func (mu *ModUpdate) Mutation() *ModMutation {
	return mu.mutation
}

// ClearVersions clears all "versions" edges to the Version entity.
func (mu *ModUpdate) ClearVersions() *ModUpdate {
	mu.mutation.ClearVersions()
	return mu
}

// RemoveVersionIDs removes the "versions" edge to Version entities by IDs.
func (mu *ModUpdate) RemoveVersionIDs(ids ...string) *ModUpdate {
	mu.mutation.RemoveVersionIDs(ids...)
	return mu
}

// RemoveVersions removes "versions" edges to Version entities.
func (mu *ModUpdate) RemoveVersions(v ...*Version) *ModUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mu.RemoveVersionIDs(ids...)
}

// ClearAuthors clears all "authors" edges to the User entity.
func (mu *ModUpdate) ClearAuthors() *ModUpdate {
	mu.mutation.ClearAuthors()
	return mu
}

// RemoveAuthorIDs removes the "authors" edge to User entities by IDs.
func (mu *ModUpdate) RemoveAuthorIDs(ids ...string) *ModUpdate {
	mu.mutation.RemoveAuthorIDs(ids...)
	return mu
}

// RemoveAuthors removes "authors" edges to User entities.
func (mu *ModUpdate) RemoveAuthors(u ...*User) *ModUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveAuthorIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (mu *ModUpdate) ClearTags() *ModUpdate {
	mu.mutation.ClearTags()
	return mu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (mu *ModUpdate) RemoveTagIDs(ids ...string) *ModUpdate {
	mu.mutation.RemoveTagIDs(ids...)
	return mu
}

// RemoveTags removes "tags" edges to Tag entities.
func (mu *ModUpdate) RemoveTags(t ...*Tag) *ModUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTagIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the Version entity.
func (mu *ModUpdate) ClearDependents() *ModUpdate {
	mu.mutation.ClearDependents()
	return mu
}

// RemoveDependentIDs removes the "dependents" edge to Version entities by IDs.
func (mu *ModUpdate) RemoveDependentIDs(ids ...string) *ModUpdate {
	mu.mutation.RemoveDependentIDs(ids...)
	return mu
}

// RemoveDependents removes "dependents" edges to Version entities.
func (mu *ModUpdate) RemoveDependents(v ...*Version) *ModUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mu.RemoveDependentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModUpdate) Save(ctx context.Context) (int, error) {
	if err := mu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *ModUpdate) defaults() error {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		if mod.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mod.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mod.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mu *ModUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := mod.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Mod.name": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ShortDescription(); ok {
		if err := mod.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "Mod.short_description": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ModReference(); ok {
		if err := mod.ModReferenceValidator(v); err != nil {
			return &ValidationError{Name: "mod_reference", err: fmt.Errorf(`ent: validator failed for field "Mod.mod_reference": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *ModUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *ModUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mod.Table, mod.Columns, sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(mod.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(mod.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(mod.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(mod.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.ShortDescription(); ok {
		_spec.SetField(mod.FieldShortDescription, field.TypeString, value)
	}
	if value, ok := mu.mutation.FullDescription(); ok {
		_spec.SetField(mod.FieldFullDescription, field.TypeString, value)
	}
	if value, ok := mu.mutation.Logo(); ok {
		_spec.SetField(mod.FieldLogo, field.TypeString, value)
	}
	if value, ok := mu.mutation.SourceURL(); ok {
		_spec.SetField(mod.FieldSourceURL, field.TypeString, value)
	}
	if mu.mutation.SourceURLCleared() {
		_spec.ClearField(mod.FieldSourceURL, field.TypeString)
	}
	if value, ok := mu.mutation.CreatorID(); ok {
		_spec.SetField(mod.FieldCreatorID, field.TypeString, value)
	}
	if value, ok := mu.mutation.Approved(); ok {
		_spec.SetField(mod.FieldApproved, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Views(); ok {
		_spec.SetField(mod.FieldViews, field.TypeUint, value)
	}
	if value, ok := mu.mutation.AddedViews(); ok {
		_spec.AddField(mod.FieldViews, field.TypeUint, value)
	}
	if value, ok := mu.mutation.Hotness(); ok {
		_spec.SetField(mod.FieldHotness, field.TypeUint, value)
	}
	if value, ok := mu.mutation.AddedHotness(); ok {
		_spec.AddField(mod.FieldHotness, field.TypeUint, value)
	}
	if value, ok := mu.mutation.Popularity(); ok {
		_spec.SetField(mod.FieldPopularity, field.TypeUint, value)
	}
	if value, ok := mu.mutation.AddedPopularity(); ok {
		_spec.AddField(mod.FieldPopularity, field.TypeUint, value)
	}
	if value, ok := mu.mutation.Downloads(); ok {
		_spec.SetField(mod.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := mu.mutation.AddedDownloads(); ok {
		_spec.AddField(mod.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := mu.mutation.Denied(); ok {
		_spec.SetField(mod.FieldDenied, field.TypeBool, value)
	}
	if value, ok := mu.mutation.LastVersionDate(); ok {
		_spec.SetField(mod.FieldLastVersionDate, field.TypeTime, value)
	}
	if mu.mutation.LastVersionDateCleared() {
		_spec.ClearField(mod.FieldLastVersionDate, field.TypeTime)
	}
	if value, ok := mu.mutation.ModReference(); ok {
		_spec.SetField(mod.FieldModReference, field.TypeString, value)
	}
	if value, ok := mu.mutation.Hidden(); ok {
		_spec.SetField(mod.FieldHidden, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Compatibility(); ok {
		_spec.SetField(mod.FieldCompatibility, field.TypeJSON, value)
	}
	if mu.mutation.CompatibilityCleared() {
		_spec.ClearField(mod.FieldCompatibility, field.TypeJSON)
	}
	if mu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !mu.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !mu.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		createE := &VersionDependencyCreate{config: mu.config, mutation: newVersionDependencyMutation(mu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !mu.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: mu.config, mutation: newVersionDependencyMutation(mu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: mu.config, mutation: newVersionDependencyMutation(mu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ModUpdateOne is the builder for updating a single Mod entity.
type ModUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ModMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *ModUpdateOne) SetUpdatedAt(t time.Time) *ModUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *ModUpdateOne) SetDeletedAt(t time.Time) *ModUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableDeletedAt(t *time.Time) *ModUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *ModUpdateOne) ClearDeletedAt() *ModUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetName sets the "name" field.
func (muo *ModUpdateOne) SetName(s string) *ModUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetShortDescription sets the "short_description" field.
func (muo *ModUpdateOne) SetShortDescription(s string) *ModUpdateOne {
	muo.mutation.SetShortDescription(s)
	return muo
}

// SetFullDescription sets the "full_description" field.
func (muo *ModUpdateOne) SetFullDescription(s string) *ModUpdateOne {
	muo.mutation.SetFullDescription(s)
	return muo
}

// SetLogo sets the "logo" field.
func (muo *ModUpdateOne) SetLogo(s string) *ModUpdateOne {
	muo.mutation.SetLogo(s)
	return muo
}

// SetSourceURL sets the "source_url" field.
func (muo *ModUpdateOne) SetSourceURL(s string) *ModUpdateOne {
	muo.mutation.SetSourceURL(s)
	return muo
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableSourceURL(s *string) *ModUpdateOne {
	if s != nil {
		muo.SetSourceURL(*s)
	}
	return muo
}

// ClearSourceURL clears the value of the "source_url" field.
func (muo *ModUpdateOne) ClearSourceURL() *ModUpdateOne {
	muo.mutation.ClearSourceURL()
	return muo
}

// SetCreatorID sets the "creator_id" field.
func (muo *ModUpdateOne) SetCreatorID(s string) *ModUpdateOne {
	muo.mutation.SetCreatorID(s)
	return muo
}

// SetApproved sets the "approved" field.
func (muo *ModUpdateOne) SetApproved(b bool) *ModUpdateOne {
	muo.mutation.SetApproved(b)
	return muo
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableApproved(b *bool) *ModUpdateOne {
	if b != nil {
		muo.SetApproved(*b)
	}
	return muo
}

// SetViews sets the "views" field.
func (muo *ModUpdateOne) SetViews(u uint) *ModUpdateOne {
	muo.mutation.ResetViews()
	muo.mutation.SetViews(u)
	return muo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableViews(u *uint) *ModUpdateOne {
	if u != nil {
		muo.SetViews(*u)
	}
	return muo
}

// AddViews adds u to the "views" field.
func (muo *ModUpdateOne) AddViews(u int) *ModUpdateOne {
	muo.mutation.AddViews(u)
	return muo
}

// SetHotness sets the "hotness" field.
func (muo *ModUpdateOne) SetHotness(u uint) *ModUpdateOne {
	muo.mutation.ResetHotness()
	muo.mutation.SetHotness(u)
	return muo
}

// SetNillableHotness sets the "hotness" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableHotness(u *uint) *ModUpdateOne {
	if u != nil {
		muo.SetHotness(*u)
	}
	return muo
}

// AddHotness adds u to the "hotness" field.
func (muo *ModUpdateOne) AddHotness(u int) *ModUpdateOne {
	muo.mutation.AddHotness(u)
	return muo
}

// SetPopularity sets the "popularity" field.
func (muo *ModUpdateOne) SetPopularity(u uint) *ModUpdateOne {
	muo.mutation.ResetPopularity()
	muo.mutation.SetPopularity(u)
	return muo
}

// SetNillablePopularity sets the "popularity" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillablePopularity(u *uint) *ModUpdateOne {
	if u != nil {
		muo.SetPopularity(*u)
	}
	return muo
}

// AddPopularity adds u to the "popularity" field.
func (muo *ModUpdateOne) AddPopularity(u int) *ModUpdateOne {
	muo.mutation.AddPopularity(u)
	return muo
}

// SetDownloads sets the "downloads" field.
func (muo *ModUpdateOne) SetDownloads(u uint) *ModUpdateOne {
	muo.mutation.ResetDownloads()
	muo.mutation.SetDownloads(u)
	return muo
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableDownloads(u *uint) *ModUpdateOne {
	if u != nil {
		muo.SetDownloads(*u)
	}
	return muo
}

// AddDownloads adds u to the "downloads" field.
func (muo *ModUpdateOne) AddDownloads(u int) *ModUpdateOne {
	muo.mutation.AddDownloads(u)
	return muo
}

// SetDenied sets the "denied" field.
func (muo *ModUpdateOne) SetDenied(b bool) *ModUpdateOne {
	muo.mutation.SetDenied(b)
	return muo
}

// SetNillableDenied sets the "denied" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableDenied(b *bool) *ModUpdateOne {
	if b != nil {
		muo.SetDenied(*b)
	}
	return muo
}

// SetLastVersionDate sets the "last_version_date" field.
func (muo *ModUpdateOne) SetLastVersionDate(t time.Time) *ModUpdateOne {
	muo.mutation.SetLastVersionDate(t)
	return muo
}

// SetNillableLastVersionDate sets the "last_version_date" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableLastVersionDate(t *time.Time) *ModUpdateOne {
	if t != nil {
		muo.SetLastVersionDate(*t)
	}
	return muo
}

// ClearLastVersionDate clears the value of the "last_version_date" field.
func (muo *ModUpdateOne) ClearLastVersionDate() *ModUpdateOne {
	muo.mutation.ClearLastVersionDate()
	return muo
}

// SetModReference sets the "mod_reference" field.
func (muo *ModUpdateOne) SetModReference(s string) *ModUpdateOne {
	muo.mutation.SetModReference(s)
	return muo
}

// SetHidden sets the "hidden" field.
func (muo *ModUpdateOne) SetHidden(b bool) *ModUpdateOne {
	muo.mutation.SetHidden(b)
	return muo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableHidden(b *bool) *ModUpdateOne {
	if b != nil {
		muo.SetHidden(*b)
	}
	return muo
}

// SetCompatibility sets the "compatibility" field.
func (muo *ModUpdateOne) SetCompatibility(ui *util.CompatibilityInfo) *ModUpdateOne {
	muo.mutation.SetCompatibility(ui)
	return muo
}

// ClearCompatibility clears the value of the "compatibility" field.
func (muo *ModUpdateOne) ClearCompatibility() *ModUpdateOne {
	muo.mutation.ClearCompatibility()
	return muo
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (muo *ModUpdateOne) AddVersionIDs(ids ...string) *ModUpdateOne {
	muo.mutation.AddVersionIDs(ids...)
	return muo
}

// AddVersions adds the "versions" edges to the Version entity.
func (muo *ModUpdateOne) AddVersions(v ...*Version) *ModUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return muo.AddVersionIDs(ids...)
}

// AddAuthorIDs adds the "authors" edge to the User entity by IDs.
func (muo *ModUpdateOne) AddAuthorIDs(ids ...string) *ModUpdateOne {
	muo.mutation.AddAuthorIDs(ids...)
	return muo
}

// AddAuthors adds the "authors" edges to the User entity.
func (muo *ModUpdateOne) AddAuthors(u ...*User) *ModUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddAuthorIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (muo *ModUpdateOne) AddTagIDs(ids ...string) *ModUpdateOne {
	muo.mutation.AddTagIDs(ids...)
	return muo
}

// AddTags adds the "tags" edges to the Tag entity.
func (muo *ModUpdateOne) AddTags(t ...*Tag) *ModUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTagIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Version entity by IDs.
func (muo *ModUpdateOne) AddDependentIDs(ids ...string) *ModUpdateOne {
	muo.mutation.AddDependentIDs(ids...)
	return muo
}

// AddDependents adds the "dependents" edges to the Version entity.
func (muo *ModUpdateOne) AddDependents(v ...*Version) *ModUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return muo.AddDependentIDs(ids...)
}

// Mutation returns the ModMutation object of the builder.
func (muo *ModUpdateOne) Mutation() *ModMutation {
	return muo.mutation
}

// ClearVersions clears all "versions" edges to the Version entity.
func (muo *ModUpdateOne) ClearVersions() *ModUpdateOne {
	muo.mutation.ClearVersions()
	return muo
}

// RemoveVersionIDs removes the "versions" edge to Version entities by IDs.
func (muo *ModUpdateOne) RemoveVersionIDs(ids ...string) *ModUpdateOne {
	muo.mutation.RemoveVersionIDs(ids...)
	return muo
}

// RemoveVersions removes "versions" edges to Version entities.
func (muo *ModUpdateOne) RemoveVersions(v ...*Version) *ModUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return muo.RemoveVersionIDs(ids...)
}

// ClearAuthors clears all "authors" edges to the User entity.
func (muo *ModUpdateOne) ClearAuthors() *ModUpdateOne {
	muo.mutation.ClearAuthors()
	return muo
}

// RemoveAuthorIDs removes the "authors" edge to User entities by IDs.
func (muo *ModUpdateOne) RemoveAuthorIDs(ids ...string) *ModUpdateOne {
	muo.mutation.RemoveAuthorIDs(ids...)
	return muo
}

// RemoveAuthors removes "authors" edges to User entities.
func (muo *ModUpdateOne) RemoveAuthors(u ...*User) *ModUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveAuthorIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (muo *ModUpdateOne) ClearTags() *ModUpdateOne {
	muo.mutation.ClearTags()
	return muo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (muo *ModUpdateOne) RemoveTagIDs(ids ...string) *ModUpdateOne {
	muo.mutation.RemoveTagIDs(ids...)
	return muo
}

// RemoveTags removes "tags" edges to Tag entities.
func (muo *ModUpdateOne) RemoveTags(t ...*Tag) *ModUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTagIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the Version entity.
func (muo *ModUpdateOne) ClearDependents() *ModUpdateOne {
	muo.mutation.ClearDependents()
	return muo
}

// RemoveDependentIDs removes the "dependents" edge to Version entities by IDs.
func (muo *ModUpdateOne) RemoveDependentIDs(ids ...string) *ModUpdateOne {
	muo.mutation.RemoveDependentIDs(ids...)
	return muo
}

// RemoveDependents removes "dependents" edges to Version entities.
func (muo *ModUpdateOne) RemoveDependents(v ...*Version) *ModUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return muo.RemoveDependentIDs(ids...)
}

// Where appends a list predicates to the ModUpdate builder.
func (muo *ModUpdateOne) Where(ps ...predicate.Mod) *ModUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ModUpdateOne) Select(field string, fields ...string) *ModUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mod entity.
func (muo *ModUpdateOne) Save(ctx context.Context) (*Mod, error) {
	if err := muo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModUpdateOne) SaveX(ctx context.Context) *Mod {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *ModUpdateOne) defaults() error {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		if mod.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mod.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mod.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (muo *ModUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := mod.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Mod.name": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ShortDescription(); ok {
		if err := mod.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "Mod.short_description": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ModReference(); ok {
		if err := mod.ModReferenceValidator(v); err != nil {
			return &ValidationError{Name: "mod_reference", err: fmt.Errorf(`ent: validator failed for field "Mod.mod_reference": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *ModUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *ModUpdateOne) sqlSave(ctx context.Context) (_node *Mod, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mod.Table, mod.Columns, sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mod.FieldID)
		for _, f := range fields {
			if !mod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(mod.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(mod.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(mod.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(mod.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.ShortDescription(); ok {
		_spec.SetField(mod.FieldShortDescription, field.TypeString, value)
	}
	if value, ok := muo.mutation.FullDescription(); ok {
		_spec.SetField(mod.FieldFullDescription, field.TypeString, value)
	}
	if value, ok := muo.mutation.Logo(); ok {
		_spec.SetField(mod.FieldLogo, field.TypeString, value)
	}
	if value, ok := muo.mutation.SourceURL(); ok {
		_spec.SetField(mod.FieldSourceURL, field.TypeString, value)
	}
	if muo.mutation.SourceURLCleared() {
		_spec.ClearField(mod.FieldSourceURL, field.TypeString)
	}
	if value, ok := muo.mutation.CreatorID(); ok {
		_spec.SetField(mod.FieldCreatorID, field.TypeString, value)
	}
	if value, ok := muo.mutation.Approved(); ok {
		_spec.SetField(mod.FieldApproved, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Views(); ok {
		_spec.SetField(mod.FieldViews, field.TypeUint, value)
	}
	if value, ok := muo.mutation.AddedViews(); ok {
		_spec.AddField(mod.FieldViews, field.TypeUint, value)
	}
	if value, ok := muo.mutation.Hotness(); ok {
		_spec.SetField(mod.FieldHotness, field.TypeUint, value)
	}
	if value, ok := muo.mutation.AddedHotness(); ok {
		_spec.AddField(mod.FieldHotness, field.TypeUint, value)
	}
	if value, ok := muo.mutation.Popularity(); ok {
		_spec.SetField(mod.FieldPopularity, field.TypeUint, value)
	}
	if value, ok := muo.mutation.AddedPopularity(); ok {
		_spec.AddField(mod.FieldPopularity, field.TypeUint, value)
	}
	if value, ok := muo.mutation.Downloads(); ok {
		_spec.SetField(mod.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := muo.mutation.AddedDownloads(); ok {
		_spec.AddField(mod.FieldDownloads, field.TypeUint, value)
	}
	if value, ok := muo.mutation.Denied(); ok {
		_spec.SetField(mod.FieldDenied, field.TypeBool, value)
	}
	if value, ok := muo.mutation.LastVersionDate(); ok {
		_spec.SetField(mod.FieldLastVersionDate, field.TypeTime, value)
	}
	if muo.mutation.LastVersionDateCleared() {
		_spec.ClearField(mod.FieldLastVersionDate, field.TypeTime)
	}
	if value, ok := muo.mutation.ModReference(); ok {
		_spec.SetField(mod.FieldModReference, field.TypeString, value)
	}
	if value, ok := muo.mutation.Hidden(); ok {
		_spec.SetField(mod.FieldHidden, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Compatibility(); ok {
		_spec.SetField(mod.FieldCompatibility, field.TypeJSON, value)
	}
	if muo.mutation.CompatibilityCleared() {
		_spec.ClearField(mod.FieldCompatibility, field.TypeJSON)
	}
	if muo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !muo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedAuthorsIDs(); len(nodes) > 0 && !muo.mutation.AuthorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		createE := &VersionDependencyCreate{config: muo.config, mutation: newVersionDependencyMutation(muo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !muo.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: muo.config, mutation: newVersionDependencyMutation(muo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: muo.config, mutation: newVersionDependencyMutation(muo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Mod{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
