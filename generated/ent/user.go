// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// AvatarThumbhash holds the value of the "avatar_thumbhash" field.
	AvatarThumbhash string `json:"avatar_thumbhash,omitempty"`
	// JoinedFrom holds the value of the "joined_from" field.
	JoinedFrom string `json:"joined_from,omitempty"`
	// Banned holds the value of the "banned" field.
	Banned bool `json:"banned,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// GithubID holds the value of the "github_id" field.
	GithubID string `json:"github_id,omitempty"`
	// GoogleID holds the value of the "google_id" field.
	GoogleID string `json:"google_id,omitempty"`
	// FacebookID holds the value of the "facebook_id" field.
	FacebookID string `json:"facebook_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Guides holds the value of the guides edge.
	Guides []*Guide `json:"guides,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*UserSession `json:"sessions,omitempty"`
	// Mods holds the value of the mods edge.
	Mods []*Mod `json:"mods,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*UserGroup `json:"groups,omitempty"`
	// UserMods holds the value of the user_mods edge.
	UserMods []*UserMod `json:"user_mods,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// GuidesOrErr returns the Guides value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GuidesOrErr() ([]*Guide, error) {
	if e.loadedTypes[0] {
		return e.Guides, nil
	}
	return nil, &NotLoadedError{edge: "guides"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*UserSession, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// ModsOrErr returns the Mods value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ModsOrErr() ([]*Mod, error) {
	if e.loadedTypes[2] {
		return e.Mods, nil
	}
	return nil, &NotLoadedError{edge: "mods"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*UserGroup, error) {
	if e.loadedTypes[3] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// UserModsOrErr returns the UserMods value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserModsOrErr() ([]*UserMod, error) {
	if e.loadedTypes[4] {
		return e.UserMods, nil
	}
	return nil, &NotLoadedError{edge: "user_mods"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldBanned:
			values[i] = new(sql.NullBool)
		case user.FieldRank:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldEmail, user.FieldUsername, user.FieldAvatar, user.FieldAvatarThumbhash, user.FieldJoinedFrom, user.FieldGithubID, user.FieldGoogleID, user.FieldFacebookID:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = value.Time
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldAvatarThumbhash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_thumbhash", values[i])
			} else if value.Valid {
				u.AvatarThumbhash = value.String
			}
		case user.FieldJoinedFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field joined_from", values[i])
			} else if value.Valid {
				u.JoinedFrom = value.String
			}
		case user.FieldBanned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field banned", values[i])
			} else if value.Valid {
				u.Banned = value.Bool
			}
		case user.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				u.Rank = int(value.Int64)
			}
		case user.FieldGithubID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_id", values[i])
			} else if value.Valid {
				u.GithubID = value.String
			}
		case user.FieldGoogleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field google_id", values[i])
			} else if value.Valid {
				u.GoogleID = value.String
			}
		case user.FieldFacebookID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facebook_id", values[i])
			} else if value.Valid {
				u.FacebookID = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryGuides queries the "guides" edge of the User entity.
func (u *User) QueryGuides() *GuideQuery {
	return NewUserClient(u.config).QueryGuides(u)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (u *User) QuerySessions() *UserSessionQuery {
	return NewUserClient(u.config).QuerySessions(u)
}

// QueryMods queries the "mods" edge of the User entity.
func (u *User) QueryMods() *ModQuery {
	return NewUserClient(u.config).QueryMods(u)
}

// QueryGroups queries the "groups" edge of the User entity.
func (u *User) QueryGroups() *UserGroupQuery {
	return NewUserClient(u.config).QueryGroups(u)
}

// QueryUserMods queries the "user_mods" edge of the User entity.
func (u *User) QueryUserMods() *UserModQuery {
	return NewUserClient(u.config).QueryUserMods(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(u.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", ")
	builder.WriteString("avatar_thumbhash=")
	builder.WriteString(u.AvatarThumbhash)
	builder.WriteString(", ")
	builder.WriteString("joined_from=")
	builder.WriteString(u.JoinedFrom)
	builder.WriteString(", ")
	builder.WriteString("banned=")
	builder.WriteString(fmt.Sprintf("%v", u.Banned))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", u.Rank))
	builder.WriteString(", ")
	builder.WriteString("github_id=")
	builder.WriteString(u.GithubID)
	builder.WriteString(", ")
	builder.WriteString("google_id=")
	builder.WriteString(u.GoogleID)
	builder.WriteString(", ")
	builder.WriteString("facebook_id=")
	builder.WriteString(u.FacebookID)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
