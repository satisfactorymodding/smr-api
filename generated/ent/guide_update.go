// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/guide"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
)

// GuideUpdate is the builder for updating Guide entities.
type GuideUpdate struct {
	config
	hooks     []Hook
	mutation  *GuideMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GuideUpdate builder.
func (gu *GuideUpdate) Where(ps ...predicate.Guide) *GuideUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GuideUpdate) SetUpdatedAt(t time.Time) *GuideUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GuideUpdate) SetDeletedAt(t time.Time) *GuideUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableDeletedAt(t *time.Time) *GuideUpdate {
	if t != nil {
		gu.SetDeletedAt(*t)
	}
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GuideUpdate) ClearDeletedAt() *GuideUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// SetUserID sets the "user_id" field.
func (gu *GuideUpdate) SetUserID(s string) *GuideUpdate {
	gu.mutation.SetUserID(s)
	return gu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableUserID(s *string) *GuideUpdate {
	if s != nil {
		gu.SetUserID(*s)
	}
	return gu
}

// ClearUserID clears the value of the "user_id" field.
func (gu *GuideUpdate) ClearUserID() *GuideUpdate {
	gu.mutation.ClearUserID()
	return gu
}

// SetName sets the "name" field.
func (gu *GuideUpdate) SetName(s string) *GuideUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableName(s *string) *GuideUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetShortDescription sets the "short_description" field.
func (gu *GuideUpdate) SetShortDescription(s string) *GuideUpdate {
	gu.mutation.SetShortDescription(s)
	return gu
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableShortDescription(s *string) *GuideUpdate {
	if s != nil {
		gu.SetShortDescription(*s)
	}
	return gu
}

// SetGuide sets the "guide" field.
func (gu *GuideUpdate) SetGuide(s string) *GuideUpdate {
	gu.mutation.SetGuide(s)
	return gu
}

// SetNillableGuide sets the "guide" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableGuide(s *string) *GuideUpdate {
	if s != nil {
		gu.SetGuide(*s)
	}
	return gu
}

// SetViews sets the "views" field.
func (gu *GuideUpdate) SetViews(i int) *GuideUpdate {
	gu.mutation.ResetViews()
	gu.mutation.SetViews(i)
	return gu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableViews(i *int) *GuideUpdate {
	if i != nil {
		gu.SetViews(*i)
	}
	return gu
}

// AddViews adds i to the "views" field.
func (gu *GuideUpdate) AddViews(i int) *GuideUpdate {
	gu.mutation.AddViews(i)
	return gu
}

// SetUser sets the "user" edge to the User entity.
func (gu *GuideUpdate) SetUser(u *User) *GuideUpdate {
	return gu.SetUserID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (gu *GuideUpdate) AddTagIDs(ids ...string) *GuideUpdate {
	gu.mutation.AddTagIDs(ids...)
	return gu
}

// AddTags adds the "tags" edges to the Tag entity.
func (gu *GuideUpdate) AddTags(t ...*Tag) *GuideUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.AddTagIDs(ids...)
}

// Mutation returns the GuideMutation object of the builder.
func (gu *GuideUpdate) Mutation() *GuideMutation {
	return gu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gu *GuideUpdate) ClearUser() *GuideUpdate {
	gu.mutation.ClearUser()
	return gu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (gu *GuideUpdate) ClearTags() *GuideUpdate {
	gu.mutation.ClearTags()
	return gu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (gu *GuideUpdate) RemoveTagIDs(ids ...string) *GuideUpdate {
	gu.mutation.RemoveTagIDs(ids...)
	return gu
}

// RemoveTags removes "tags" edges to Tag entities.
func (gu *GuideUpdate) RemoveTags(t ...*Tag) *GuideUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuideUpdate) Save(ctx context.Context) (int, error) {
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuideUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuideUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuideUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GuideUpdate) defaults() error {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		if guide.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized guide.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := guide.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gu *GuideUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := guide.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guide.name": %w`, err)}
		}
	}
	if v, ok := gu.mutation.ShortDescription(); ok {
		if err := guide.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "Guide.short_description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gu *GuideUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GuideUpdate {
	gu.modifiers = append(gu.modifiers, modifiers...)
	return gu
}

func (gu *GuideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guide.Table, guide.Columns, sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(guide.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(guide.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(guide.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(guide.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.ShortDescription(); ok {
		_spec.SetField(guide.FieldShortDescription, field.TypeString, value)
	}
	if value, ok := gu.mutation.Guide(); ok {
		_spec.SetField(guide.FieldGuide, field.TypeString, value)
	}
	if value, ok := gu.mutation.Views(); ok {
		_spec.SetField(guide.FieldViews, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedViews(); ok {
		_spec.AddField(guide.FieldViews, field.TypeInt, value)
	}
	if gu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.UserTable,
			Columns: []string{guide.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.UserTable,
			Columns: []string{guide.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guide.TagsTable,
			Columns: guide.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !gu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guide.TagsTable,
			Columns: guide.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guide.TagsTable,
			Columns: guide.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guide.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GuideUpdateOne is the builder for updating a single Guide entity.
type GuideUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GuideMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GuideUpdateOne) SetUpdatedAt(t time.Time) *GuideUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GuideUpdateOne) SetDeletedAt(t time.Time) *GuideUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableDeletedAt(t *time.Time) *GuideUpdateOne {
	if t != nil {
		guo.SetDeletedAt(*t)
	}
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GuideUpdateOne) ClearDeletedAt() *GuideUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// SetUserID sets the "user_id" field.
func (guo *GuideUpdateOne) SetUserID(s string) *GuideUpdateOne {
	guo.mutation.SetUserID(s)
	return guo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableUserID(s *string) *GuideUpdateOne {
	if s != nil {
		guo.SetUserID(*s)
	}
	return guo
}

// ClearUserID clears the value of the "user_id" field.
func (guo *GuideUpdateOne) ClearUserID() *GuideUpdateOne {
	guo.mutation.ClearUserID()
	return guo
}

// SetName sets the "name" field.
func (guo *GuideUpdateOne) SetName(s string) *GuideUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableName(s *string) *GuideUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetShortDescription sets the "short_description" field.
func (guo *GuideUpdateOne) SetShortDescription(s string) *GuideUpdateOne {
	guo.mutation.SetShortDescription(s)
	return guo
}

// SetNillableShortDescription sets the "short_description" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableShortDescription(s *string) *GuideUpdateOne {
	if s != nil {
		guo.SetShortDescription(*s)
	}
	return guo
}

// SetGuide sets the "guide" field.
func (guo *GuideUpdateOne) SetGuide(s string) *GuideUpdateOne {
	guo.mutation.SetGuide(s)
	return guo
}

// SetNillableGuide sets the "guide" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableGuide(s *string) *GuideUpdateOne {
	if s != nil {
		guo.SetGuide(*s)
	}
	return guo
}

// SetViews sets the "views" field.
func (guo *GuideUpdateOne) SetViews(i int) *GuideUpdateOne {
	guo.mutation.ResetViews()
	guo.mutation.SetViews(i)
	return guo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableViews(i *int) *GuideUpdateOne {
	if i != nil {
		guo.SetViews(*i)
	}
	return guo
}

// AddViews adds i to the "views" field.
func (guo *GuideUpdateOne) AddViews(i int) *GuideUpdateOne {
	guo.mutation.AddViews(i)
	return guo
}

// SetUser sets the "user" edge to the User entity.
func (guo *GuideUpdateOne) SetUser(u *User) *GuideUpdateOne {
	return guo.SetUserID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (guo *GuideUpdateOne) AddTagIDs(ids ...string) *GuideUpdateOne {
	guo.mutation.AddTagIDs(ids...)
	return guo
}

// AddTags adds the "tags" edges to the Tag entity.
func (guo *GuideUpdateOne) AddTags(t ...*Tag) *GuideUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.AddTagIDs(ids...)
}

// Mutation returns the GuideMutation object of the builder.
func (guo *GuideUpdateOne) Mutation() *GuideMutation {
	return guo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (guo *GuideUpdateOne) ClearUser() *GuideUpdateOne {
	guo.mutation.ClearUser()
	return guo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (guo *GuideUpdateOne) ClearTags() *GuideUpdateOne {
	guo.mutation.ClearTags()
	return guo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (guo *GuideUpdateOne) RemoveTagIDs(ids ...string) *GuideUpdateOne {
	guo.mutation.RemoveTagIDs(ids...)
	return guo
}

// RemoveTags removes "tags" edges to Tag entities.
func (guo *GuideUpdateOne) RemoveTags(t ...*Tag) *GuideUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the GuideUpdate builder.
func (guo *GuideUpdateOne) Where(ps ...predicate.Guide) *GuideUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GuideUpdateOne) Select(field string, fields ...string) *GuideUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Guide entity.
func (guo *GuideUpdateOne) Save(ctx context.Context) (*Guide, error) {
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuideUpdateOne) SaveX(ctx context.Context) *Guide {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuideUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuideUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GuideUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		if guide.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized guide.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := guide.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (guo *GuideUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := guide.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guide.name": %w`, err)}
		}
	}
	if v, ok := guo.mutation.ShortDescription(); ok {
		if err := guide.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "Guide.short_description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (guo *GuideUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GuideUpdateOne {
	guo.modifiers = append(guo.modifiers, modifiers...)
	return guo
}

func (guo *GuideUpdateOne) sqlSave(ctx context.Context) (_node *Guide, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guide.Table, guide.Columns, sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guide.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guide.FieldID)
		for _, f := range fields {
			if !guide.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guide.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(guide.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(guide.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(guide.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(guide.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.ShortDescription(); ok {
		_spec.SetField(guide.FieldShortDescription, field.TypeString, value)
	}
	if value, ok := guo.mutation.Guide(); ok {
		_spec.SetField(guide.FieldGuide, field.TypeString, value)
	}
	if value, ok := guo.mutation.Views(); ok {
		_spec.SetField(guide.FieldViews, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedViews(); ok {
		_spec.AddField(guide.FieldViews, field.TypeInt, value)
	}
	if guo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.UserTable,
			Columns: []string{guide.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.UserTable,
			Columns: []string{guide.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guide.TagsTable,
			Columns: guide.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !guo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guide.TagsTable,
			Columns: guide.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guide.TagsTable,
			Columns: guide.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(guo.modifiers...)
	_node = &Guide{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guide.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
