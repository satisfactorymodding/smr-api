// Code generated by ent, DO NOT EDIT.

package tag

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tag type in the database.
	Label = "tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeMods holds the string denoting the mods edge name in mutations.
	EdgeMods = "mods"
	// EdgeGuides holds the string denoting the guides edge name in mutations.
	EdgeGuides = "guides"
	// EdgeModTags holds the string denoting the mod_tags edge name in mutations.
	EdgeModTags = "mod_tags"
	// EdgeGuideTags holds the string denoting the guide_tags edge name in mutations.
	EdgeGuideTags = "guide_tags"
	// Table holds the table name of the tag in the database.
	Table = "tags"
	// ModsTable is the table that holds the mods relation/edge. The primary key declared below.
	ModsTable = "mod_tags"
	// ModsInverseTable is the table name for the Mod entity.
	// It exists in this package in order to avoid circular dependency with the "mod" package.
	ModsInverseTable = "mods"
	// GuidesTable is the table that holds the guides relation/edge. The primary key declared below.
	GuidesTable = "guide_tags"
	// GuidesInverseTable is the table name for the Guide entity.
	// It exists in this package in order to avoid circular dependency with the "guide" package.
	GuidesInverseTable = "guides"
	// ModTagsTable is the table that holds the mod_tags relation/edge.
	ModTagsTable = "mod_tags"
	// ModTagsInverseTable is the table name for the ModTag entity.
	// It exists in this package in order to avoid circular dependency with the "modtag" package.
	ModTagsInverseTable = "mod_tags"
	// ModTagsColumn is the table column denoting the mod_tags relation/edge.
	ModTagsColumn = "tag_id"
	// GuideTagsTable is the table that holds the guide_tags relation/edge.
	GuideTagsTable = "guide_tags"
	// GuideTagsInverseTable is the table name for the GuideTag entity.
	// It exists in this package in order to avoid circular dependency with the "guidetag" package.
	GuideTagsInverseTable = "guide_tags"
	// GuideTagsColumn is the table column denoting the guide_tags relation/edge.
	GuideTagsColumn = "tag_id"
)

// Columns holds all SQL columns for tag fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
}

var (
	// ModsPrimaryKey and ModsColumn2 are the table columns denoting the
	// primary key for the mods relation (M2M).
	ModsPrimaryKey = []string{"mod_id", "tag_id"}
	// GuidesPrimaryKey and GuidesColumn2 are the table columns denoting the
	// primary key for the guides relation (M2M).
	GuidesPrimaryKey = []string{"guide_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/satisfactorymodding/smr-api/generated/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Tag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByModsCount orders the results by mods count.
func ByModsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModsStep(), opts...)
	}
}

// ByMods orders the results by mods terms.
func ByMods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGuidesCount orders the results by guides count.
func ByGuidesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGuidesStep(), opts...)
	}
}

// ByGuides orders the results by guides terms.
func ByGuides(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuidesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByModTagsCount orders the results by mod_tags count.
func ByModTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModTagsStep(), opts...)
	}
}

// ByModTags orders the results by mod_tags terms.
func ByModTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGuideTagsCount orders the results by guide_tags count.
func ByGuideTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGuideTagsStep(), opts...)
	}
}

// ByGuideTags orders the results by guide_tags terms.
func ByGuideTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuideTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newModsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ModsTable, ModsPrimaryKey...),
	)
}
func newGuidesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuidesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GuidesTable, GuidesPrimaryKey...),
	)
}
func newModTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModTagsInverseTable, ModTagsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ModTagsTable, ModTagsColumn),
	)
}
func newGuideTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuideTagsInverseTable, GuideTagsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, GuideTagsTable, GuideTagsColumn),
	)
}
