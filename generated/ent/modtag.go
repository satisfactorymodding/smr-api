// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/modtag"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
)

// ModTag is the model entity for the ModTag schema.
type ModTag struct {
	config `json:"-"`
	// ModID holds the value of the "mod_id" field.
	ModID string `json:"mod_id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID string `json:"tag_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModTagQuery when eager-loading is set.
	Edges        ModTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModTagEdges holds the relations/edges for other nodes in the graph.
type ModTagEdges struct {
	// Mod holds the value of the mod edge.
	Mod *Mod `json:"mod,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ModOrErr returns the Mod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModTagEdges) ModOrErr() (*Mod, error) {
	if e.loadedTypes[0] {
		if e.Mod == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: mod.Label}
		}
		return e.Mod, nil
	}
	return nil, &NotLoadedError{edge: "mod"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModTagEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[1] {
		if e.Tag == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modtag.FieldModID, modtag.FieldTagID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModTag fields.
func (mt *ModTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modtag.FieldModID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mod_id", values[i])
			} else if value.Valid {
				mt.ModID = value.String
			}
		case modtag.FieldTagID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				mt.TagID = value.String
			}
		default:
			mt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModTag.
// This includes values selected through modifiers, order, etc.
func (mt *ModTag) Value(name string) (ent.Value, error) {
	return mt.selectValues.Get(name)
}

// QueryMod queries the "mod" edge of the ModTag entity.
func (mt *ModTag) QueryMod() *ModQuery {
	return NewModTagClient(mt.config).QueryMod(mt)
}

// QueryTag queries the "tag" edge of the ModTag entity.
func (mt *ModTag) QueryTag() *TagQuery {
	return NewModTagClient(mt.config).QueryTag(mt)
}

// Update returns a builder for updating this ModTag.
// Note that you need to call ModTag.Unwrap() before calling this method if this ModTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *ModTag) Update() *ModTagUpdateOne {
	return NewModTagClient(mt.config).UpdateOne(mt)
}

// Unwrap unwraps the ModTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *ModTag) Unwrap() *ModTag {
	_tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ModTag is not a transactional entity")
	}
	mt.config.driver = _tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *ModTag) String() string {
	var builder strings.Builder
	builder.WriteString("ModTag(")
	builder.WriteString("mod_id=")
	builder.WriteString(mt.ModID)
	builder.WriteString(", ")
	builder.WriteString("tag_id=")
	builder.WriteString(mt.TagID)
	builder.WriteByte(')')
	return builder.String()
}

// ModTags is a parsable slice of ModTag.
type ModTags []*ModTag
