// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/satisfactorymodding/smr-api/generated/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/announcement"
	"github.com/satisfactorymodding/smr-api/generated/ent/guide"
	"github.com/satisfactorymodding/smr-api/generated/ent/guidetag"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/modtag"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversion"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversiontarget"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
	"github.com/satisfactorymodding/smr-api/generated/ent/usergroup"
	"github.com/satisfactorymodding/smr-api/generated/ent/usermod"
	"github.com/satisfactorymodding/smr-api/generated/ent/usersession"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiondependency"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiontarget"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Announcement is the client for interacting with the Announcement builders.
	Announcement *AnnouncementClient
	// Guide is the client for interacting with the Guide builders.
	Guide *GuideClient
	// GuideTag is the client for interacting with the GuideTag builders.
	GuideTag *GuideTagClient
	// Mod is the client for interacting with the Mod builders.
	Mod *ModClient
	// ModTag is the client for interacting with the ModTag builders.
	ModTag *ModTagClient
	// SmlVersion is the client for interacting with the SmlVersion builders.
	SmlVersion *SmlVersionClient
	// SmlVersionTarget is the client for interacting with the SmlVersionTarget builders.
	SmlVersionTarget *SmlVersionTargetClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserGroup is the client for interacting with the UserGroup builders.
	UserGroup *UserGroupClient
	// UserMod is the client for interacting with the UserMod builders.
	UserMod *UserModClient
	// UserSession is the client for interacting with the UserSession builders.
	UserSession *UserSessionClient
	// Version is the client for interacting with the Version builders.
	Version *VersionClient
	// VersionDependency is the client for interacting with the VersionDependency builders.
	VersionDependency *VersionDependencyClient
	// VersionTarget is the client for interacting with the VersionTarget builders.
	VersionTarget *VersionTargetClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Announcement = NewAnnouncementClient(c.config)
	c.Guide = NewGuideClient(c.config)
	c.GuideTag = NewGuideTagClient(c.config)
	c.Mod = NewModClient(c.config)
	c.ModTag = NewModTagClient(c.config)
	c.SmlVersion = NewSmlVersionClient(c.config)
	c.SmlVersionTarget = NewSmlVersionTargetClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserGroup = NewUserGroupClient(c.config)
	c.UserMod = NewUserModClient(c.config)
	c.UserSession = NewUserSessionClient(c.config)
	c.Version = NewVersionClient(c.config)
	c.VersionDependency = NewVersionDependencyClient(c.config)
	c.VersionTarget = NewVersionTargetClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Announcement:      NewAnnouncementClient(cfg),
		Guide:             NewGuideClient(cfg),
		GuideTag:          NewGuideTagClient(cfg),
		Mod:               NewModClient(cfg),
		ModTag:            NewModTagClient(cfg),
		SmlVersion:        NewSmlVersionClient(cfg),
		SmlVersionTarget:  NewSmlVersionTargetClient(cfg),
		Tag:               NewTagClient(cfg),
		User:              NewUserClient(cfg),
		UserGroup:         NewUserGroupClient(cfg),
		UserMod:           NewUserModClient(cfg),
		UserSession:       NewUserSessionClient(cfg),
		Version:           NewVersionClient(cfg),
		VersionDependency: NewVersionDependencyClient(cfg),
		VersionTarget:     NewVersionTargetClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Announcement:      NewAnnouncementClient(cfg),
		Guide:             NewGuideClient(cfg),
		GuideTag:          NewGuideTagClient(cfg),
		Mod:               NewModClient(cfg),
		ModTag:            NewModTagClient(cfg),
		SmlVersion:        NewSmlVersionClient(cfg),
		SmlVersionTarget:  NewSmlVersionTargetClient(cfg),
		Tag:               NewTagClient(cfg),
		User:              NewUserClient(cfg),
		UserGroup:         NewUserGroupClient(cfg),
		UserMod:           NewUserModClient(cfg),
		UserSession:       NewUserSessionClient(cfg),
		Version:           NewVersionClient(cfg),
		VersionDependency: NewVersionDependencyClient(cfg),
		VersionTarget:     NewVersionTargetClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Announcement.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Announcement, c.Guide, c.GuideTag, c.Mod, c.ModTag, c.SmlVersion,
		c.SmlVersionTarget, c.Tag, c.User, c.UserGroup, c.UserMod, c.UserSession,
		c.Version, c.VersionDependency, c.VersionTarget,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Announcement, c.Guide, c.GuideTag, c.Mod, c.ModTag, c.SmlVersion,
		c.SmlVersionTarget, c.Tag, c.User, c.UserGroup, c.UserMod, c.UserSession,
		c.Version, c.VersionDependency, c.VersionTarget,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AnnouncementMutation:
		return c.Announcement.mutate(ctx, m)
	case *GuideMutation:
		return c.Guide.mutate(ctx, m)
	case *GuideTagMutation:
		return c.GuideTag.mutate(ctx, m)
	case *ModMutation:
		return c.Mod.mutate(ctx, m)
	case *ModTagMutation:
		return c.ModTag.mutate(ctx, m)
	case *SmlVersionMutation:
		return c.SmlVersion.mutate(ctx, m)
	case *SmlVersionTargetMutation:
		return c.SmlVersionTarget.mutate(ctx, m)
	case *TagMutation:
		return c.Tag.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserGroupMutation:
		return c.UserGroup.mutate(ctx, m)
	case *UserModMutation:
		return c.UserMod.mutate(ctx, m)
	case *UserSessionMutation:
		return c.UserSession.mutate(ctx, m)
	case *VersionMutation:
		return c.Version.mutate(ctx, m)
	case *VersionDependencyMutation:
		return c.VersionDependency.mutate(ctx, m)
	case *VersionTargetMutation:
		return c.VersionTarget.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AnnouncementClient is a client for the Announcement schema.
type AnnouncementClient struct {
	config
}

// NewAnnouncementClient returns a client for the Announcement from the given config.
func NewAnnouncementClient(c config) *AnnouncementClient {
	return &AnnouncementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `announcement.Hooks(f(g(h())))`.
func (c *AnnouncementClient) Use(hooks ...Hook) {
	c.hooks.Announcement = append(c.hooks.Announcement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `announcement.Intercept(f(g(h())))`.
func (c *AnnouncementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Announcement = append(c.inters.Announcement, interceptors...)
}

// Create returns a builder for creating a Announcement entity.
func (c *AnnouncementClient) Create() *AnnouncementCreate {
	mutation := newAnnouncementMutation(c.config, OpCreate)
	return &AnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Announcement entities.
func (c *AnnouncementClient) CreateBulk(builders ...*AnnouncementCreate) *AnnouncementCreateBulk {
	return &AnnouncementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AnnouncementClient) MapCreateBulk(slice any, setFunc func(*AnnouncementCreate, int)) *AnnouncementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AnnouncementCreateBulk{err: fmt.Errorf("calling to AnnouncementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AnnouncementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AnnouncementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Announcement.
func (c *AnnouncementClient) Update() *AnnouncementUpdate {
	mutation := newAnnouncementMutation(c.config, OpUpdate)
	return &AnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnnouncementClient) UpdateOne(a *Announcement) *AnnouncementUpdateOne {
	mutation := newAnnouncementMutation(c.config, OpUpdateOne, withAnnouncement(a))
	return &AnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnnouncementClient) UpdateOneID(id string) *AnnouncementUpdateOne {
	mutation := newAnnouncementMutation(c.config, OpUpdateOne, withAnnouncementID(id))
	return &AnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Announcement.
func (c *AnnouncementClient) Delete() *AnnouncementDelete {
	mutation := newAnnouncementMutation(c.config, OpDelete)
	return &AnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnnouncementClient) DeleteOne(a *Announcement) *AnnouncementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnnouncementClient) DeleteOneID(id string) *AnnouncementDeleteOne {
	builder := c.Delete().Where(announcement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnnouncementDeleteOne{builder}
}

// Query returns a query builder for Announcement.
func (c *AnnouncementClient) Query() *AnnouncementQuery {
	return &AnnouncementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnnouncement},
		inters: c.Interceptors(),
	}
}

// Get returns a Announcement entity by its id.
func (c *AnnouncementClient) Get(ctx context.Context, id string) (*Announcement, error) {
	return c.Query().Where(announcement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnnouncementClient) GetX(ctx context.Context, id string) *Announcement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AnnouncementClient) Hooks() []Hook {
	hooks := c.hooks.Announcement
	return append(hooks[:len(hooks):len(hooks)], announcement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AnnouncementClient) Interceptors() []Interceptor {
	inters := c.inters.Announcement
	return append(inters[:len(inters):len(inters)], announcement.Interceptors[:]...)
}

func (c *AnnouncementClient) mutate(ctx context.Context, m *AnnouncementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnnouncementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnnouncementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnnouncementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnnouncementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Announcement mutation op: %q", m.Op())
	}
}

// GuideClient is a client for the Guide schema.
type GuideClient struct {
	config
}

// NewGuideClient returns a client for the Guide from the given config.
func NewGuideClient(c config) *GuideClient {
	return &GuideClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guide.Hooks(f(g(h())))`.
func (c *GuideClient) Use(hooks ...Hook) {
	c.hooks.Guide = append(c.hooks.Guide, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `guide.Intercept(f(g(h())))`.
func (c *GuideClient) Intercept(interceptors ...Interceptor) {
	c.inters.Guide = append(c.inters.Guide, interceptors...)
}

// Create returns a builder for creating a Guide entity.
func (c *GuideClient) Create() *GuideCreate {
	mutation := newGuideMutation(c.config, OpCreate)
	return &GuideCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Guide entities.
func (c *GuideClient) CreateBulk(builders ...*GuideCreate) *GuideCreateBulk {
	return &GuideCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GuideClient) MapCreateBulk(slice any, setFunc func(*GuideCreate, int)) *GuideCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GuideCreateBulk{err: fmt.Errorf("calling to GuideClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GuideCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GuideCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Guide.
func (c *GuideClient) Update() *GuideUpdate {
	mutation := newGuideMutation(c.config, OpUpdate)
	return &GuideUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuideClient) UpdateOne(gu *Guide) *GuideUpdateOne {
	mutation := newGuideMutation(c.config, OpUpdateOne, withGuide(gu))
	return &GuideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuideClient) UpdateOneID(id string) *GuideUpdateOne {
	mutation := newGuideMutation(c.config, OpUpdateOne, withGuideID(id))
	return &GuideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Guide.
func (c *GuideClient) Delete() *GuideDelete {
	mutation := newGuideMutation(c.config, OpDelete)
	return &GuideDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuideClient) DeleteOne(gu *Guide) *GuideDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GuideClient) DeleteOneID(id string) *GuideDeleteOne {
	builder := c.Delete().Where(guide.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuideDeleteOne{builder}
}

// Query returns a query builder for Guide.
func (c *GuideClient) Query() *GuideQuery {
	return &GuideQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGuide},
		inters: c.Interceptors(),
	}
}

// Get returns a Guide entity by its id.
func (c *GuideClient) Get(ctx context.Context, id string) (*Guide, error) {
	return c.Query().Where(guide.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuideClient) GetX(ctx context.Context, id string) *Guide {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Guide.
func (c *GuideClient) QueryUser(gu *Guide) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guide.Table, guide.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guide.UserTable, guide.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Guide.
func (c *GuideClient) QueryTags(gu *Guide) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guide.Table, guide.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, guide.TagsTable, guide.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuideTags queries the guide_tags edge of a Guide.
func (c *GuideClient) QueryGuideTags(gu *Guide) *GuideTagQuery {
	query := (&GuideTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guide.Table, guide.FieldID, id),
			sqlgraph.To(guidetag.Table, guidetag.GuideColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, guide.GuideTagsTable, guide.GuideTagsColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuideClient) Hooks() []Hook {
	hooks := c.hooks.Guide
	return append(hooks[:len(hooks):len(hooks)], guide.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *GuideClient) Interceptors() []Interceptor {
	inters := c.inters.Guide
	return append(inters[:len(inters):len(inters)], guide.Interceptors[:]...)
}

func (c *GuideClient) mutate(ctx context.Context, m *GuideMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GuideCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GuideUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GuideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GuideDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Guide mutation op: %q", m.Op())
	}
}

// GuideTagClient is a client for the GuideTag schema.
type GuideTagClient struct {
	config
}

// NewGuideTagClient returns a client for the GuideTag from the given config.
func NewGuideTagClient(c config) *GuideTagClient {
	return &GuideTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guidetag.Hooks(f(g(h())))`.
func (c *GuideTagClient) Use(hooks ...Hook) {
	c.hooks.GuideTag = append(c.hooks.GuideTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `guidetag.Intercept(f(g(h())))`.
func (c *GuideTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.GuideTag = append(c.inters.GuideTag, interceptors...)
}

// Create returns a builder for creating a GuideTag entity.
func (c *GuideTagClient) Create() *GuideTagCreate {
	mutation := newGuideTagMutation(c.config, OpCreate)
	return &GuideTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuideTag entities.
func (c *GuideTagClient) CreateBulk(builders ...*GuideTagCreate) *GuideTagCreateBulk {
	return &GuideTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GuideTagClient) MapCreateBulk(slice any, setFunc func(*GuideTagCreate, int)) *GuideTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GuideTagCreateBulk{err: fmt.Errorf("calling to GuideTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GuideTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GuideTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuideTag.
func (c *GuideTagClient) Update() *GuideTagUpdate {
	mutation := newGuideTagMutation(c.config, OpUpdate)
	return &GuideTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuideTagClient) UpdateOne(gt *GuideTag) *GuideTagUpdateOne {
	mutation := newGuideTagMutation(c.config, OpUpdateOne)
	mutation.guide = &gt.GuideID
	mutation.tag = &gt.TagID
	return &GuideTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuideTag.
func (c *GuideTagClient) Delete() *GuideTagDelete {
	mutation := newGuideTagMutation(c.config, OpDelete)
	return &GuideTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for GuideTag.
func (c *GuideTagClient) Query() *GuideTagQuery {
	return &GuideTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGuideTag},
		inters: c.Interceptors(),
	}
}

// QueryGuide queries the guide edge of a GuideTag.
func (c *GuideTagClient) QueryGuide(gt *GuideTag) *GuideQuery {
	return c.Query().
		Where(guidetag.GuideID(gt.GuideID), guidetag.TagID(gt.TagID)).
		QueryGuide()
}

// QueryTag queries the tag edge of a GuideTag.
func (c *GuideTagClient) QueryTag(gt *GuideTag) *TagQuery {
	return c.Query().
		Where(guidetag.GuideID(gt.GuideID), guidetag.TagID(gt.TagID)).
		QueryTag()
}

// Hooks returns the client hooks.
func (c *GuideTagClient) Hooks() []Hook {
	return c.hooks.GuideTag
}

// Interceptors returns the client interceptors.
func (c *GuideTagClient) Interceptors() []Interceptor {
	return c.inters.GuideTag
}

func (c *GuideTagClient) mutate(ctx context.Context, m *GuideTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GuideTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GuideTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GuideTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GuideTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GuideTag mutation op: %q", m.Op())
	}
}

// ModClient is a client for the Mod schema.
type ModClient struct {
	config
}

// NewModClient returns a client for the Mod from the given config.
func NewModClient(c config) *ModClient {
	return &ModClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mod.Hooks(f(g(h())))`.
func (c *ModClient) Use(hooks ...Hook) {
	c.hooks.Mod = append(c.hooks.Mod, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mod.Intercept(f(g(h())))`.
func (c *ModClient) Intercept(interceptors ...Interceptor) {
	c.inters.Mod = append(c.inters.Mod, interceptors...)
}

// Create returns a builder for creating a Mod entity.
func (c *ModClient) Create() *ModCreate {
	mutation := newModMutation(c.config, OpCreate)
	return &ModCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mod entities.
func (c *ModClient) CreateBulk(builders ...*ModCreate) *ModCreateBulk {
	return &ModCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ModClient) MapCreateBulk(slice any, setFunc func(*ModCreate, int)) *ModCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ModCreateBulk{err: fmt.Errorf("calling to ModClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ModCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ModCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mod.
func (c *ModClient) Update() *ModUpdate {
	mutation := newModMutation(c.config, OpUpdate)
	return &ModUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ModClient) UpdateOne(m *Mod) *ModUpdateOne {
	mutation := newModMutation(c.config, OpUpdateOne, withMod(m))
	return &ModUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ModClient) UpdateOneID(id string) *ModUpdateOne {
	mutation := newModMutation(c.config, OpUpdateOne, withModID(id))
	return &ModUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mod.
func (c *ModClient) Delete() *ModDelete {
	mutation := newModMutation(c.config, OpDelete)
	return &ModDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ModClient) DeleteOne(m *Mod) *ModDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ModClient) DeleteOneID(id string) *ModDeleteOne {
	builder := c.Delete().Where(mod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ModDeleteOne{builder}
}

// Query returns a query builder for Mod.
func (c *ModClient) Query() *ModQuery {
	return &ModQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMod},
		inters: c.Interceptors(),
	}
}

// Get returns a Mod entity by its id.
func (c *ModClient) Get(ctx context.Context, id string) (*Mod, error) {
	return c.Query().Where(mod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ModClient) GetX(ctx context.Context, id string) *Mod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVersions queries the versions edge of a Mod.
func (c *ModClient) QueryVersions(m *Mod) *VersionQuery {
	query := (&VersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mod.Table, mod.FieldID, id),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mod.VersionsTable, mod.VersionsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAuthors queries the authors edge of a Mod.
func (c *ModClient) QueryAuthors(m *Mod) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mod.Table, mod.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, mod.AuthorsTable, mod.AuthorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Mod.
func (c *ModClient) QueryTags(m *Mod) *TagQuery {
	query := (&TagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mod.Table, mod.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, mod.TagsTable, mod.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependents queries the dependents edge of a Mod.
func (c *ModClient) QueryDependents(m *Mod) *VersionQuery {
	query := (&VersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mod.Table, mod.FieldID, id),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, mod.DependentsTable, mod.DependentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserMods queries the user_mods edge of a Mod.
func (c *ModClient) QueryUserMods(m *Mod) *UserModQuery {
	query := (&UserModClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mod.Table, mod.FieldID, id),
			sqlgraph.To(usermod.Table, usermod.ModColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, mod.UserModsTable, mod.UserModsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModTags queries the mod_tags edge of a Mod.
func (c *ModClient) QueryModTags(m *Mod) *ModTagQuery {
	query := (&ModTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mod.Table, mod.FieldID, id),
			sqlgraph.To(modtag.Table, modtag.ModColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, mod.ModTagsTable, mod.ModTagsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVersionDependencies queries the version_dependencies edge of a Mod.
func (c *ModClient) QueryVersionDependencies(m *Mod) *VersionDependencyQuery {
	query := (&VersionDependencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mod.Table, mod.FieldID, id),
			sqlgraph.To(versiondependency.Table, versiondependency.ModColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, mod.VersionDependenciesTable, mod.VersionDependenciesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ModClient) Hooks() []Hook {
	hooks := c.hooks.Mod
	return append(hooks[:len(hooks):len(hooks)], mod.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ModClient) Interceptors() []Interceptor {
	inters := c.inters.Mod
	return append(inters[:len(inters):len(inters)], mod.Interceptors[:]...)
}

func (c *ModClient) mutate(ctx context.Context, m *ModMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ModCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ModUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ModUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ModDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Mod mutation op: %q", m.Op())
	}
}

// ModTagClient is a client for the ModTag schema.
type ModTagClient struct {
	config
}

// NewModTagClient returns a client for the ModTag from the given config.
func NewModTagClient(c config) *ModTagClient {
	return &ModTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `modtag.Hooks(f(g(h())))`.
func (c *ModTagClient) Use(hooks ...Hook) {
	c.hooks.ModTag = append(c.hooks.ModTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `modtag.Intercept(f(g(h())))`.
func (c *ModTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.ModTag = append(c.inters.ModTag, interceptors...)
}

// Create returns a builder for creating a ModTag entity.
func (c *ModTagClient) Create() *ModTagCreate {
	mutation := newModTagMutation(c.config, OpCreate)
	return &ModTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ModTag entities.
func (c *ModTagClient) CreateBulk(builders ...*ModTagCreate) *ModTagCreateBulk {
	return &ModTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ModTagClient) MapCreateBulk(slice any, setFunc func(*ModTagCreate, int)) *ModTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ModTagCreateBulk{err: fmt.Errorf("calling to ModTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ModTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ModTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ModTag.
func (c *ModTagClient) Update() *ModTagUpdate {
	mutation := newModTagMutation(c.config, OpUpdate)
	return &ModTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ModTagClient) UpdateOne(mt *ModTag) *ModTagUpdateOne {
	mutation := newModTagMutation(c.config, OpUpdateOne)
	mutation.mod = &mt.ModID
	mutation.tag = &mt.TagID
	return &ModTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ModTag.
func (c *ModTagClient) Delete() *ModTagDelete {
	mutation := newModTagMutation(c.config, OpDelete)
	return &ModTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for ModTag.
func (c *ModTagClient) Query() *ModTagQuery {
	return &ModTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeModTag},
		inters: c.Interceptors(),
	}
}

// QueryMod queries the mod edge of a ModTag.
func (c *ModTagClient) QueryMod(mt *ModTag) *ModQuery {
	return c.Query().
		Where(modtag.ModID(mt.ModID), modtag.TagID(mt.TagID)).
		QueryMod()
}

// QueryTag queries the tag edge of a ModTag.
func (c *ModTagClient) QueryTag(mt *ModTag) *TagQuery {
	return c.Query().
		Where(modtag.ModID(mt.ModID), modtag.TagID(mt.TagID)).
		QueryTag()
}

// Hooks returns the client hooks.
func (c *ModTagClient) Hooks() []Hook {
	return c.hooks.ModTag
}

// Interceptors returns the client interceptors.
func (c *ModTagClient) Interceptors() []Interceptor {
	return c.inters.ModTag
}

func (c *ModTagClient) mutate(ctx context.Context, m *ModTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ModTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ModTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ModTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ModTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ModTag mutation op: %q", m.Op())
	}
}

// SmlVersionClient is a client for the SmlVersion schema.
type SmlVersionClient struct {
	config
}

// NewSmlVersionClient returns a client for the SmlVersion from the given config.
func NewSmlVersionClient(c config) *SmlVersionClient {
	return &SmlVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smlversion.Hooks(f(g(h())))`.
func (c *SmlVersionClient) Use(hooks ...Hook) {
	c.hooks.SmlVersion = append(c.hooks.SmlVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `smlversion.Intercept(f(g(h())))`.
func (c *SmlVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.SmlVersion = append(c.inters.SmlVersion, interceptors...)
}

// Create returns a builder for creating a SmlVersion entity.
func (c *SmlVersionClient) Create() *SmlVersionCreate {
	mutation := newSmlVersionMutation(c.config, OpCreate)
	return &SmlVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SmlVersion entities.
func (c *SmlVersionClient) CreateBulk(builders ...*SmlVersionCreate) *SmlVersionCreateBulk {
	return &SmlVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SmlVersionClient) MapCreateBulk(slice any, setFunc func(*SmlVersionCreate, int)) *SmlVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SmlVersionCreateBulk{err: fmt.Errorf("calling to SmlVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SmlVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SmlVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SmlVersion.
func (c *SmlVersionClient) Update() *SmlVersionUpdate {
	mutation := newSmlVersionMutation(c.config, OpUpdate)
	return &SmlVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SmlVersionClient) UpdateOne(sv *SmlVersion) *SmlVersionUpdateOne {
	mutation := newSmlVersionMutation(c.config, OpUpdateOne, withSmlVersion(sv))
	return &SmlVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SmlVersionClient) UpdateOneID(id string) *SmlVersionUpdateOne {
	mutation := newSmlVersionMutation(c.config, OpUpdateOne, withSmlVersionID(id))
	return &SmlVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SmlVersion.
func (c *SmlVersionClient) Delete() *SmlVersionDelete {
	mutation := newSmlVersionMutation(c.config, OpDelete)
	return &SmlVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SmlVersionClient) DeleteOne(sv *SmlVersion) *SmlVersionDeleteOne {
	return c.DeleteOneID(sv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SmlVersionClient) DeleteOneID(id string) *SmlVersionDeleteOne {
	builder := c.Delete().Where(smlversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SmlVersionDeleteOne{builder}
}

// Query returns a query builder for SmlVersion.
func (c *SmlVersionClient) Query() *SmlVersionQuery {
	return &SmlVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSmlVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a SmlVersion entity by its id.
func (c *SmlVersionClient) Get(ctx context.Context, id string) (*SmlVersion, error) {
	return c.Query().Where(smlversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SmlVersionClient) GetX(ctx context.Context, id string) *SmlVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargets queries the targets edge of a SmlVersion.
func (c *SmlVersionClient) QueryTargets(sv *SmlVersion) *SmlVersionTargetQuery {
	query := (&SmlVersionTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(smlversion.Table, smlversion.FieldID, id),
			sqlgraph.To(smlversiontarget.Table, smlversiontarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, smlversion.TargetsTable, smlversion.TargetsColumn),
		)
		fromV = sqlgraph.Neighbors(sv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SmlVersionClient) Hooks() []Hook {
	hooks := c.hooks.SmlVersion
	return append(hooks[:len(hooks):len(hooks)], smlversion.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SmlVersionClient) Interceptors() []Interceptor {
	inters := c.inters.SmlVersion
	return append(inters[:len(inters):len(inters)], smlversion.Interceptors[:]...)
}

func (c *SmlVersionClient) mutate(ctx context.Context, m *SmlVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SmlVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SmlVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SmlVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SmlVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SmlVersion mutation op: %q", m.Op())
	}
}

// SmlVersionTargetClient is a client for the SmlVersionTarget schema.
type SmlVersionTargetClient struct {
	config
}

// NewSmlVersionTargetClient returns a client for the SmlVersionTarget from the given config.
func NewSmlVersionTargetClient(c config) *SmlVersionTargetClient {
	return &SmlVersionTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smlversiontarget.Hooks(f(g(h())))`.
func (c *SmlVersionTargetClient) Use(hooks ...Hook) {
	c.hooks.SmlVersionTarget = append(c.hooks.SmlVersionTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `smlversiontarget.Intercept(f(g(h())))`.
func (c *SmlVersionTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.SmlVersionTarget = append(c.inters.SmlVersionTarget, interceptors...)
}

// Create returns a builder for creating a SmlVersionTarget entity.
func (c *SmlVersionTargetClient) Create() *SmlVersionTargetCreate {
	mutation := newSmlVersionTargetMutation(c.config, OpCreate)
	return &SmlVersionTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SmlVersionTarget entities.
func (c *SmlVersionTargetClient) CreateBulk(builders ...*SmlVersionTargetCreate) *SmlVersionTargetCreateBulk {
	return &SmlVersionTargetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SmlVersionTargetClient) MapCreateBulk(slice any, setFunc func(*SmlVersionTargetCreate, int)) *SmlVersionTargetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SmlVersionTargetCreateBulk{err: fmt.Errorf("calling to SmlVersionTargetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SmlVersionTargetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SmlVersionTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SmlVersionTarget.
func (c *SmlVersionTargetClient) Update() *SmlVersionTargetUpdate {
	mutation := newSmlVersionTargetMutation(c.config, OpUpdate)
	return &SmlVersionTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SmlVersionTargetClient) UpdateOne(svt *SmlVersionTarget) *SmlVersionTargetUpdateOne {
	mutation := newSmlVersionTargetMutation(c.config, OpUpdateOne, withSmlVersionTarget(svt))
	return &SmlVersionTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SmlVersionTargetClient) UpdateOneID(id string) *SmlVersionTargetUpdateOne {
	mutation := newSmlVersionTargetMutation(c.config, OpUpdateOne, withSmlVersionTargetID(id))
	return &SmlVersionTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SmlVersionTarget.
func (c *SmlVersionTargetClient) Delete() *SmlVersionTargetDelete {
	mutation := newSmlVersionTargetMutation(c.config, OpDelete)
	return &SmlVersionTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SmlVersionTargetClient) DeleteOne(svt *SmlVersionTarget) *SmlVersionTargetDeleteOne {
	return c.DeleteOneID(svt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SmlVersionTargetClient) DeleteOneID(id string) *SmlVersionTargetDeleteOne {
	builder := c.Delete().Where(smlversiontarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SmlVersionTargetDeleteOne{builder}
}

// Query returns a query builder for SmlVersionTarget.
func (c *SmlVersionTargetClient) Query() *SmlVersionTargetQuery {
	return &SmlVersionTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSmlVersionTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a SmlVersionTarget entity by its id.
func (c *SmlVersionTargetClient) Get(ctx context.Context, id string) (*SmlVersionTarget, error) {
	return c.Query().Where(smlversiontarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SmlVersionTargetClient) GetX(ctx context.Context, id string) *SmlVersionTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySmlVersion queries the sml_version edge of a SmlVersionTarget.
func (c *SmlVersionTargetClient) QuerySmlVersion(svt *SmlVersionTarget) *SmlVersionQuery {
	query := (&SmlVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := svt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(smlversiontarget.Table, smlversiontarget.FieldID, id),
			sqlgraph.To(smlversion.Table, smlversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, smlversiontarget.SmlVersionTable, smlversiontarget.SmlVersionColumn),
		)
		fromV = sqlgraph.Neighbors(svt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SmlVersionTargetClient) Hooks() []Hook {
	return c.hooks.SmlVersionTarget
}

// Interceptors returns the client interceptors.
func (c *SmlVersionTargetClient) Interceptors() []Interceptor {
	return c.inters.SmlVersionTarget
}

func (c *SmlVersionTargetClient) mutate(ctx context.Context, m *SmlVersionTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SmlVersionTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SmlVersionTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SmlVersionTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SmlVersionTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SmlVersionTarget mutation op: %q", m.Op())
	}
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tag.Intercept(f(g(h())))`.
func (c *TagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tag = append(c.inters.Tag, interceptors...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TagClient) MapCreateBulk(slice any, setFunc func(*TagCreate, int)) *TagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TagCreateBulk{err: fmt.Errorf("calling to TagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id string) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id string) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id string) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id string) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMods queries the mods edge of a Tag.
func (c *TagClient) QueryMods(t *Tag) *ModQuery {
	query := (&ModClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(mod.Table, mod.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.ModsTable, tag.ModsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuides queries the guides edge of a Tag.
func (c *TagClient) QueryGuides(t *Tag) *GuideQuery {
	query := (&GuideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(guide.Table, guide.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.GuidesTable, tag.GuidesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModTags queries the mod_tags edge of a Tag.
func (c *TagClient) QueryModTags(t *Tag) *ModTagQuery {
	query := (&ModTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(modtag.Table, modtag.TagColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, tag.ModTagsTable, tag.ModTagsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuideTags queries the guide_tags edge of a Tag.
func (c *TagClient) QueryGuideTags(t *Tag) *GuideTagQuery {
	query := (&GuideTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(guidetag.Table, guidetag.TagColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, tag.GuideTagsTable, tag.GuideTagsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	hooks := c.hooks.Tag
	return append(hooks[:len(hooks):len(hooks)], tag.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TagClient) Interceptors() []Interceptor {
	inters := c.inters.Tag
	return append(inters[:len(inters):len(inters)], tag.Interceptors[:]...)
}

func (c *TagClient) mutate(ctx context.Context, m *TagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tag mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuides queries the guides edge of a User.
func (c *UserClient) QueryGuides(u *User) *GuideQuery {
	query := (&GuideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(guide.Table, guide.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GuidesTable, user.GuidesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *UserSessionQuery {
	query := (&UserSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usersession.Table, usersession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMods queries the mods edge of a User.
func (c *UserClient) QueryMods(u *User) *ModQuery {
	query := (&ModClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(mod.Table, mod.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ModsTable, user.ModsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a User.
func (c *UserClient) QueryGroups(u *User) *UserGroupQuery {
	query := (&UserGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usergroup.Table, usergroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GroupsTable, user.GroupsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserMods queries the user_mods edge of a User.
func (c *UserClient) QueryUserMods(u *User) *UserModQuery {
	query := (&UserModClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usermod.Table, usermod.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserModsTable, user.UserModsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserGroupClient is a client for the UserGroup schema.
type UserGroupClient struct {
	config
}

// NewUserGroupClient returns a client for the UserGroup from the given config.
func NewUserGroupClient(c config) *UserGroupClient {
	return &UserGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usergroup.Hooks(f(g(h())))`.
func (c *UserGroupClient) Use(hooks ...Hook) {
	c.hooks.UserGroup = append(c.hooks.UserGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usergroup.Intercept(f(g(h())))`.
func (c *UserGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserGroup = append(c.inters.UserGroup, interceptors...)
}

// Create returns a builder for creating a UserGroup entity.
func (c *UserGroupClient) Create() *UserGroupCreate {
	mutation := newUserGroupMutation(c.config, OpCreate)
	return &UserGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserGroup entities.
func (c *UserGroupClient) CreateBulk(builders ...*UserGroupCreate) *UserGroupCreateBulk {
	return &UserGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserGroupClient) MapCreateBulk(slice any, setFunc func(*UserGroupCreate, int)) *UserGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserGroupCreateBulk{err: fmt.Errorf("calling to UserGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserGroup.
func (c *UserGroupClient) Update() *UserGroupUpdate {
	mutation := newUserGroupMutation(c.config, OpUpdate)
	return &UserGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserGroupClient) UpdateOne(ug *UserGroup) *UserGroupUpdateOne {
	mutation := newUserGroupMutation(c.config, OpUpdateOne, withUserGroup(ug))
	return &UserGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserGroupClient) UpdateOneID(id string) *UserGroupUpdateOne {
	mutation := newUserGroupMutation(c.config, OpUpdateOne, withUserGroupID(id))
	return &UserGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserGroup.
func (c *UserGroupClient) Delete() *UserGroupDelete {
	mutation := newUserGroupMutation(c.config, OpDelete)
	return &UserGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserGroupClient) DeleteOne(ug *UserGroup) *UserGroupDeleteOne {
	return c.DeleteOneID(ug.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserGroupClient) DeleteOneID(id string) *UserGroupDeleteOne {
	builder := c.Delete().Where(usergroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserGroupDeleteOne{builder}
}

// Query returns a query builder for UserGroup.
func (c *UserGroupClient) Query() *UserGroupQuery {
	return &UserGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a UserGroup entity by its id.
func (c *UserGroupClient) Get(ctx context.Context, id string) (*UserGroup, error) {
	return c.Query().Where(usergroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserGroupClient) GetX(ctx context.Context, id string) *UserGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserGroup.
func (c *UserGroupClient) QueryUser(ug *UserGroup) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ug.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usergroup.Table, usergroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usergroup.UserTable, usergroup.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ug.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserGroupClient) Hooks() []Hook {
	hooks := c.hooks.UserGroup
	return append(hooks[:len(hooks):len(hooks)], usergroup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserGroupClient) Interceptors() []Interceptor {
	inters := c.inters.UserGroup
	return append(inters[:len(inters):len(inters)], usergroup.Interceptors[:]...)
}

func (c *UserGroupClient) mutate(ctx context.Context, m *UserGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserGroup mutation op: %q", m.Op())
	}
}

// UserModClient is a client for the UserMod schema.
type UserModClient struct {
	config
}

// NewUserModClient returns a client for the UserMod from the given config.
func NewUserModClient(c config) *UserModClient {
	return &UserModClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermod.Hooks(f(g(h())))`.
func (c *UserModClient) Use(hooks ...Hook) {
	c.hooks.UserMod = append(c.hooks.UserMod, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usermod.Intercept(f(g(h())))`.
func (c *UserModClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserMod = append(c.inters.UserMod, interceptors...)
}

// Create returns a builder for creating a UserMod entity.
func (c *UserModClient) Create() *UserModCreate {
	mutation := newUserModMutation(c.config, OpCreate)
	return &UserModCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMod entities.
func (c *UserModClient) CreateBulk(builders ...*UserModCreate) *UserModCreateBulk {
	return &UserModCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserModClient) MapCreateBulk(slice any, setFunc func(*UserModCreate, int)) *UserModCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserModCreateBulk{err: fmt.Errorf("calling to UserModClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserModCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserModCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMod.
func (c *UserModClient) Update() *UserModUpdate {
	mutation := newUserModMutation(c.config, OpUpdate)
	return &UserModUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserModClient) UpdateOne(um *UserMod) *UserModUpdateOne {
	mutation := newUserModMutation(c.config, OpUpdateOne)
	mutation.user = &um.UserID
	mutation.mod = &um.ModID
	return &UserModUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMod.
func (c *UserModClient) Delete() *UserModDelete {
	mutation := newUserModMutation(c.config, OpDelete)
	return &UserModDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for UserMod.
func (c *UserModClient) Query() *UserModQuery {
	return &UserModQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserMod},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a UserMod.
func (c *UserModClient) QueryUser(um *UserMod) *UserQuery {
	return c.Query().
		Where(usermod.UserID(um.UserID), usermod.ModID(um.ModID)).
		QueryUser()
}

// QueryMod queries the mod edge of a UserMod.
func (c *UserModClient) QueryMod(um *UserMod) *ModQuery {
	return c.Query().
		Where(usermod.UserID(um.UserID), usermod.ModID(um.ModID)).
		QueryMod()
}

// Hooks returns the client hooks.
func (c *UserModClient) Hooks() []Hook {
	return c.hooks.UserMod
}

// Interceptors returns the client interceptors.
func (c *UserModClient) Interceptors() []Interceptor {
	return c.inters.UserMod
}

func (c *UserModClient) mutate(ctx context.Context, m *UserModMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserModCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserModUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserModUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserModDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserMod mutation op: %q", m.Op())
	}
}

// UserSessionClient is a client for the UserSession schema.
type UserSessionClient struct {
	config
}

// NewUserSessionClient returns a client for the UserSession from the given config.
func NewUserSessionClient(c config) *UserSessionClient {
	return &UserSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersession.Hooks(f(g(h())))`.
func (c *UserSessionClient) Use(hooks ...Hook) {
	c.hooks.UserSession = append(c.hooks.UserSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersession.Intercept(f(g(h())))`.
func (c *UserSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSession = append(c.inters.UserSession, interceptors...)
}

// Create returns a builder for creating a UserSession entity.
func (c *UserSessionClient) Create() *UserSessionCreate {
	mutation := newUserSessionMutation(c.config, OpCreate)
	return &UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSession entities.
func (c *UserSessionClient) CreateBulk(builders ...*UserSessionCreate) *UserSessionCreateBulk {
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSessionClient) MapCreateBulk(slice any, setFunc func(*UserSessionCreate, int)) *UserSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSessionCreateBulk{err: fmt.Errorf("calling to UserSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSession.
func (c *UserSessionClient) Update() *UserSessionUpdate {
	mutation := newUserSessionMutation(c.config, OpUpdate)
	return &UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSessionClient) UpdateOne(us *UserSession) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSession(us))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSessionClient) UpdateOneID(id string) *UserSessionUpdateOne {
	mutation := newUserSessionMutation(c.config, OpUpdateOne, withUserSessionID(id))
	return &UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSession.
func (c *UserSessionClient) Delete() *UserSessionDelete {
	mutation := newUserSessionMutation(c.config, OpDelete)
	return &UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSessionClient) DeleteOne(us *UserSession) *UserSessionDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSessionClient) DeleteOneID(id string) *UserSessionDeleteOne {
	builder := c.Delete().Where(usersession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSessionDeleteOne{builder}
}

// Query returns a query builder for UserSession.
func (c *UserSessionClient) Query() *UserSessionQuery {
	return &UserSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSession},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSession entity by its id.
func (c *UserSessionClient) Get(ctx context.Context, id string) (*UserSession, error) {
	return c.Query().Where(usersession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSessionClient) GetX(ctx context.Context, id string) *UserSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserSession.
func (c *UserSessionClient) QueryUser(us *UserSession) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersession.Table, usersession.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usersession.UserTable, usersession.UserColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSessionClient) Hooks() []Hook {
	hooks := c.hooks.UserSession
	return append(hooks[:len(hooks):len(hooks)], usersession.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserSessionClient) Interceptors() []Interceptor {
	inters := c.inters.UserSession
	return append(inters[:len(inters):len(inters)], usersession.Interceptors[:]...)
}

func (c *UserSessionClient) mutate(ctx context.Context, m *UserSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSession mutation op: %q", m.Op())
	}
}

// VersionClient is a client for the Version schema.
type VersionClient struct {
	config
}

// NewVersionClient returns a client for the Version from the given config.
func NewVersionClient(c config) *VersionClient {
	return &VersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `version.Hooks(f(g(h())))`.
func (c *VersionClient) Use(hooks ...Hook) {
	c.hooks.Version = append(c.hooks.Version, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `version.Intercept(f(g(h())))`.
func (c *VersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Version = append(c.inters.Version, interceptors...)
}

// Create returns a builder for creating a Version entity.
func (c *VersionClient) Create() *VersionCreate {
	mutation := newVersionMutation(c.config, OpCreate)
	return &VersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Version entities.
func (c *VersionClient) CreateBulk(builders ...*VersionCreate) *VersionCreateBulk {
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VersionClient) MapCreateBulk(slice any, setFunc func(*VersionCreate, int)) *VersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VersionCreateBulk{err: fmt.Errorf("calling to VersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Version.
func (c *VersionClient) Update() *VersionUpdate {
	mutation := newVersionMutation(c.config, OpUpdate)
	return &VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionClient) UpdateOne(v *Version) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersion(v))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VersionClient) UpdateOneID(id string) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersionID(id))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Version.
func (c *VersionClient) Delete() *VersionDelete {
	mutation := newVersionMutation(c.config, OpDelete)
	return &VersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VersionClient) DeleteOne(v *Version) *VersionDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VersionClient) DeleteOneID(id string) *VersionDeleteOne {
	builder := c.Delete().Where(version.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VersionDeleteOne{builder}
}

// Query returns a query builder for Version.
func (c *VersionClient) Query() *VersionQuery {
	return &VersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a Version entity by its id.
func (c *VersionClient) Get(ctx context.Context, id string) (*Version, error) {
	return c.Query().Where(version.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VersionClient) GetX(ctx context.Context, id string) *Version {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMod queries the mod edge of a Version.
func (c *VersionClient) QueryMod(v *Version) *ModQuery {
	query := (&ModClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(version.Table, version.FieldID, id),
			sqlgraph.To(mod.Table, mod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, version.ModTable, version.ModColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDependencies queries the dependencies edge of a Version.
func (c *VersionClient) QueryDependencies(v *Version) *ModQuery {
	query := (&ModClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(version.Table, version.FieldID, id),
			sqlgraph.To(mod.Table, mod.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, version.DependenciesTable, version.DependenciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargets queries the targets edge of a Version.
func (c *VersionClient) QueryTargets(v *Version) *VersionTargetQuery {
	query := (&VersionTargetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(version.Table, version.FieldID, id),
			sqlgraph.To(versiontarget.Table, versiontarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, version.TargetsTable, version.TargetsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVersionDependencies queries the version_dependencies edge of a Version.
func (c *VersionClient) QueryVersionDependencies(v *Version) *VersionDependencyQuery {
	query := (&VersionDependencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(version.Table, version.FieldID, id),
			sqlgraph.To(versiondependency.Table, versiondependency.VersionColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, version.VersionDependenciesTable, version.VersionDependenciesColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VersionClient) Hooks() []Hook {
	hooks := c.hooks.Version
	return append(hooks[:len(hooks):len(hooks)], version.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *VersionClient) Interceptors() []Interceptor {
	inters := c.inters.Version
	return append(inters[:len(inters):len(inters)], version.Interceptors[:]...)
}

func (c *VersionClient) mutate(ctx context.Context, m *VersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Version mutation op: %q", m.Op())
	}
}

// VersionDependencyClient is a client for the VersionDependency schema.
type VersionDependencyClient struct {
	config
}

// NewVersionDependencyClient returns a client for the VersionDependency from the given config.
func NewVersionDependencyClient(c config) *VersionDependencyClient {
	return &VersionDependencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `versiondependency.Hooks(f(g(h())))`.
func (c *VersionDependencyClient) Use(hooks ...Hook) {
	c.hooks.VersionDependency = append(c.hooks.VersionDependency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `versiondependency.Intercept(f(g(h())))`.
func (c *VersionDependencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.VersionDependency = append(c.inters.VersionDependency, interceptors...)
}

// Create returns a builder for creating a VersionDependency entity.
func (c *VersionDependencyClient) Create() *VersionDependencyCreate {
	mutation := newVersionDependencyMutation(c.config, OpCreate)
	return &VersionDependencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VersionDependency entities.
func (c *VersionDependencyClient) CreateBulk(builders ...*VersionDependencyCreate) *VersionDependencyCreateBulk {
	return &VersionDependencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VersionDependencyClient) MapCreateBulk(slice any, setFunc func(*VersionDependencyCreate, int)) *VersionDependencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VersionDependencyCreateBulk{err: fmt.Errorf("calling to VersionDependencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VersionDependencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VersionDependencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VersionDependency.
func (c *VersionDependencyClient) Update() *VersionDependencyUpdate {
	mutation := newVersionDependencyMutation(c.config, OpUpdate)
	return &VersionDependencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionDependencyClient) UpdateOne(vd *VersionDependency) *VersionDependencyUpdateOne {
	mutation := newVersionDependencyMutation(c.config, OpUpdateOne)
	mutation.version = &vd.VersionID
	mutation.mod = &vd.ModID
	return &VersionDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VersionDependency.
func (c *VersionDependencyClient) Delete() *VersionDependencyDelete {
	mutation := newVersionDependencyMutation(c.config, OpDelete)
	return &VersionDependencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for VersionDependency.
func (c *VersionDependencyClient) Query() *VersionDependencyQuery {
	return &VersionDependencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVersionDependency},
		inters: c.Interceptors(),
	}
}

// QueryVersion queries the version edge of a VersionDependency.
func (c *VersionDependencyClient) QueryVersion(vd *VersionDependency) *VersionQuery {
	return c.Query().
		Where(versiondependency.VersionID(vd.VersionID), versiondependency.ModID(vd.ModID)).
		QueryVersion()
}

// QueryMod queries the mod edge of a VersionDependency.
func (c *VersionDependencyClient) QueryMod(vd *VersionDependency) *ModQuery {
	return c.Query().
		Where(versiondependency.VersionID(vd.VersionID), versiondependency.ModID(vd.ModID)).
		QueryMod()
}

// Hooks returns the client hooks.
func (c *VersionDependencyClient) Hooks() []Hook {
	hooks := c.hooks.VersionDependency
	return append(hooks[:len(hooks):len(hooks)], versiondependency.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *VersionDependencyClient) Interceptors() []Interceptor {
	inters := c.inters.VersionDependency
	return append(inters[:len(inters):len(inters)], versiondependency.Interceptors[:]...)
}

func (c *VersionDependencyClient) mutate(ctx context.Context, m *VersionDependencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VersionDependencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VersionDependencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VersionDependencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VersionDependencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VersionDependency mutation op: %q", m.Op())
	}
}

// VersionTargetClient is a client for the VersionTarget schema.
type VersionTargetClient struct {
	config
}

// NewVersionTargetClient returns a client for the VersionTarget from the given config.
func NewVersionTargetClient(c config) *VersionTargetClient {
	return &VersionTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `versiontarget.Hooks(f(g(h())))`.
func (c *VersionTargetClient) Use(hooks ...Hook) {
	c.hooks.VersionTarget = append(c.hooks.VersionTarget, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `versiontarget.Intercept(f(g(h())))`.
func (c *VersionTargetClient) Intercept(interceptors ...Interceptor) {
	c.inters.VersionTarget = append(c.inters.VersionTarget, interceptors...)
}

// Create returns a builder for creating a VersionTarget entity.
func (c *VersionTargetClient) Create() *VersionTargetCreate {
	mutation := newVersionTargetMutation(c.config, OpCreate)
	return &VersionTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VersionTarget entities.
func (c *VersionTargetClient) CreateBulk(builders ...*VersionTargetCreate) *VersionTargetCreateBulk {
	return &VersionTargetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VersionTargetClient) MapCreateBulk(slice any, setFunc func(*VersionTargetCreate, int)) *VersionTargetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VersionTargetCreateBulk{err: fmt.Errorf("calling to VersionTargetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VersionTargetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VersionTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VersionTarget.
func (c *VersionTargetClient) Update() *VersionTargetUpdate {
	mutation := newVersionTargetMutation(c.config, OpUpdate)
	return &VersionTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionTargetClient) UpdateOne(vt *VersionTarget) *VersionTargetUpdateOne {
	mutation := newVersionTargetMutation(c.config, OpUpdateOne, withVersionTarget(vt))
	return &VersionTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VersionTargetClient) UpdateOneID(id string) *VersionTargetUpdateOne {
	mutation := newVersionTargetMutation(c.config, OpUpdateOne, withVersionTargetID(id))
	return &VersionTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VersionTarget.
func (c *VersionTargetClient) Delete() *VersionTargetDelete {
	mutation := newVersionTargetMutation(c.config, OpDelete)
	return &VersionTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VersionTargetClient) DeleteOne(vt *VersionTarget) *VersionTargetDeleteOne {
	return c.DeleteOneID(vt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VersionTargetClient) DeleteOneID(id string) *VersionTargetDeleteOne {
	builder := c.Delete().Where(versiontarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VersionTargetDeleteOne{builder}
}

// Query returns a query builder for VersionTarget.
func (c *VersionTargetClient) Query() *VersionTargetQuery {
	return &VersionTargetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVersionTarget},
		inters: c.Interceptors(),
	}
}

// Get returns a VersionTarget entity by its id.
func (c *VersionTargetClient) Get(ctx context.Context, id string) (*VersionTarget, error) {
	return c.Query().Where(versiontarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VersionTargetClient) GetX(ctx context.Context, id string) *VersionTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySmlVersion queries the sml_version edge of a VersionTarget.
func (c *VersionTargetClient) QuerySmlVersion(vt *VersionTarget) *VersionQuery {
	query := (&VersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(versiontarget.Table, versiontarget.FieldID, id),
			sqlgraph.To(version.Table, version.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, versiontarget.SmlVersionTable, versiontarget.SmlVersionColumn),
		)
		fromV = sqlgraph.Neighbors(vt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VersionTargetClient) Hooks() []Hook {
	return c.hooks.VersionTarget
}

// Interceptors returns the client interceptors.
func (c *VersionTargetClient) Interceptors() []Interceptor {
	return c.inters.VersionTarget
}

func (c *VersionTargetClient) mutate(ctx context.Context, m *VersionTargetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VersionTargetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VersionTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VersionTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VersionTargetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VersionTarget mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Announcement, Guide, GuideTag, Mod, ModTag, SmlVersion, SmlVersionTarget, Tag,
		User, UserGroup, UserMod, UserSession, Version, VersionDependency,
		VersionTarget []ent.Hook
	}
	inters struct {
		Announcement, Guide, GuideTag, Mod, ModTag, SmlVersion, SmlVersionTarget, Tag,
		User, UserGroup, UserMod, UserSession, Version, VersionDependency,
		VersionTarget []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
