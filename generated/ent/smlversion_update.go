// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversion"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversiontarget"
	"github.com/satisfactorymodding/smr-api/util"
)

// SmlVersionUpdate is the builder for updating SmlVersion entities.
type SmlVersionUpdate struct {
	config
	hooks     []Hook
	mutation  *SmlVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SmlVersionUpdate builder.
func (svu *SmlVersionUpdate) Where(ps ...predicate.SmlVersion) *SmlVersionUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetUpdatedAt sets the "updated_at" field.
func (svu *SmlVersionUpdate) SetUpdatedAt(t time.Time) *SmlVersionUpdate {
	svu.mutation.SetUpdatedAt(t)
	return svu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (svu *SmlVersionUpdate) ClearUpdatedAt() *SmlVersionUpdate {
	svu.mutation.ClearUpdatedAt()
	return svu
}

// SetDeletedAt sets the "deleted_at" field.
func (svu *SmlVersionUpdate) SetDeletedAt(t time.Time) *SmlVersionUpdate {
	svu.mutation.SetDeletedAt(t)
	return svu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableDeletedAt(t *time.Time) *SmlVersionUpdate {
	if t != nil {
		svu.SetDeletedAt(*t)
	}
	return svu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (svu *SmlVersionUpdate) ClearDeletedAt() *SmlVersionUpdate {
	svu.mutation.ClearDeletedAt()
	return svu
}

// SetVersion sets the "version" field.
func (svu *SmlVersionUpdate) SetVersion(s string) *SmlVersionUpdate {
	svu.mutation.SetVersion(s)
	return svu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableVersion(s *string) *SmlVersionUpdate {
	if s != nil {
		svu.SetVersion(*s)
	}
	return svu
}

// SetSatisfactoryVersion sets the "satisfactory_version" field.
func (svu *SmlVersionUpdate) SetSatisfactoryVersion(i int) *SmlVersionUpdate {
	svu.mutation.ResetSatisfactoryVersion()
	svu.mutation.SetSatisfactoryVersion(i)
	return svu
}

// SetNillableSatisfactoryVersion sets the "satisfactory_version" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableSatisfactoryVersion(i *int) *SmlVersionUpdate {
	if i != nil {
		svu.SetSatisfactoryVersion(*i)
	}
	return svu
}

// AddSatisfactoryVersion adds i to the "satisfactory_version" field.
func (svu *SmlVersionUpdate) AddSatisfactoryVersion(i int) *SmlVersionUpdate {
	svu.mutation.AddSatisfactoryVersion(i)
	return svu
}

// SetStability sets the "stability" field.
func (svu *SmlVersionUpdate) SetStability(u util.Stability) *SmlVersionUpdate {
	svu.mutation.SetStability(u)
	return svu
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableStability(u *util.Stability) *SmlVersionUpdate {
	if u != nil {
		svu.SetStability(*u)
	}
	return svu
}

// SetDate sets the "date" field.
func (svu *SmlVersionUpdate) SetDate(t time.Time) *SmlVersionUpdate {
	svu.mutation.SetDate(t)
	return svu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableDate(t *time.Time) *SmlVersionUpdate {
	if t != nil {
		svu.SetDate(*t)
	}
	return svu
}

// SetLink sets the "link" field.
func (svu *SmlVersionUpdate) SetLink(s string) *SmlVersionUpdate {
	svu.mutation.SetLink(s)
	return svu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableLink(s *string) *SmlVersionUpdate {
	if s != nil {
		svu.SetLink(*s)
	}
	return svu
}

// SetChangelog sets the "changelog" field.
func (svu *SmlVersionUpdate) SetChangelog(s string) *SmlVersionUpdate {
	svu.mutation.SetChangelog(s)
	return svu
}

// SetNillableChangelog sets the "changelog" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableChangelog(s *string) *SmlVersionUpdate {
	if s != nil {
		svu.SetChangelog(*s)
	}
	return svu
}

// SetBootstrapVersion sets the "bootstrap_version" field.
func (svu *SmlVersionUpdate) SetBootstrapVersion(s string) *SmlVersionUpdate {
	svu.mutation.SetBootstrapVersion(s)
	return svu
}

// SetNillableBootstrapVersion sets the "bootstrap_version" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableBootstrapVersion(s *string) *SmlVersionUpdate {
	if s != nil {
		svu.SetBootstrapVersion(*s)
	}
	return svu
}

// ClearBootstrapVersion clears the value of the "bootstrap_version" field.
func (svu *SmlVersionUpdate) ClearBootstrapVersion() *SmlVersionUpdate {
	svu.mutation.ClearBootstrapVersion()
	return svu
}

// SetEngineVersion sets the "engine_version" field.
func (svu *SmlVersionUpdate) SetEngineVersion(s string) *SmlVersionUpdate {
	svu.mutation.SetEngineVersion(s)
	return svu
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (svu *SmlVersionUpdate) SetNillableEngineVersion(s *string) *SmlVersionUpdate {
	if s != nil {
		svu.SetEngineVersion(*s)
	}
	return svu
}

// AddTargetIDs adds the "targets" edge to the SmlVersionTarget entity by IDs.
func (svu *SmlVersionUpdate) AddTargetIDs(ids ...string) *SmlVersionUpdate {
	svu.mutation.AddTargetIDs(ids...)
	return svu
}

// AddTargets adds the "targets" edges to the SmlVersionTarget entity.
func (svu *SmlVersionUpdate) AddTargets(s ...*SmlVersionTarget) *SmlVersionUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return svu.AddTargetIDs(ids...)
}

// Mutation returns the SmlVersionMutation object of the builder.
func (svu *SmlVersionUpdate) Mutation() *SmlVersionMutation {
	return svu.mutation
}

// ClearTargets clears all "targets" edges to the SmlVersionTarget entity.
func (svu *SmlVersionUpdate) ClearTargets() *SmlVersionUpdate {
	svu.mutation.ClearTargets()
	return svu
}

// RemoveTargetIDs removes the "targets" edge to SmlVersionTarget entities by IDs.
func (svu *SmlVersionUpdate) RemoveTargetIDs(ids ...string) *SmlVersionUpdate {
	svu.mutation.RemoveTargetIDs(ids...)
	return svu
}

// RemoveTargets removes "targets" edges to SmlVersionTarget entities.
func (svu *SmlVersionUpdate) RemoveTargets(s ...*SmlVersionTarget) *SmlVersionUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return svu.RemoveTargetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SmlVersionUpdate) Save(ctx context.Context) (int, error) {
	if err := svu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SmlVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SmlVersionUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SmlVersionUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svu *SmlVersionUpdate) defaults() error {
	if _, ok := svu.mutation.UpdatedAt(); !ok && !svu.mutation.UpdatedAtCleared() {
		if smlversion.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized smlversion.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := smlversion.UpdateDefaultUpdatedAt()
		svu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (svu *SmlVersionUpdate) check() error {
	if v, ok := svu.mutation.Version(); ok {
		if err := smlversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.version": %w`, err)}
		}
	}
	if v, ok := svu.mutation.Stability(); ok {
		if err := smlversion.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.stability": %w`, err)}
		}
	}
	if v, ok := svu.mutation.BootstrapVersion(); ok {
		if err := smlversion.BootstrapVersionValidator(v); err != nil {
			return &ValidationError{Name: "bootstrap_version", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.bootstrap_version": %w`, err)}
		}
	}
	if v, ok := svu.mutation.EngineVersion(); ok {
		if err := smlversion.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.engine_version": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (svu *SmlVersionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SmlVersionUpdate {
	svu.modifiers = append(svu.modifiers, modifiers...)
	return svu
}

func (svu *SmlVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(smlversion.Table, smlversion.Columns, sqlgraph.NewFieldSpec(smlversion.FieldID, field.TypeString))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if svu.mutation.CreatedAtCleared() {
		_spec.ClearField(smlversion.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := svu.mutation.UpdatedAt(); ok {
		_spec.SetField(smlversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if svu.mutation.UpdatedAtCleared() {
		_spec.ClearField(smlversion.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := svu.mutation.DeletedAt(); ok {
		_spec.SetField(smlversion.FieldDeletedAt, field.TypeTime, value)
	}
	if svu.mutation.DeletedAtCleared() {
		_spec.ClearField(smlversion.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := svu.mutation.Version(); ok {
		_spec.SetField(smlversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := svu.mutation.SatisfactoryVersion(); ok {
		_spec.SetField(smlversion.FieldSatisfactoryVersion, field.TypeInt, value)
	}
	if value, ok := svu.mutation.AddedSatisfactoryVersion(); ok {
		_spec.AddField(smlversion.FieldSatisfactoryVersion, field.TypeInt, value)
	}
	if value, ok := svu.mutation.Stability(); ok {
		_spec.SetField(smlversion.FieldStability, field.TypeEnum, value)
	}
	if value, ok := svu.mutation.Date(); ok {
		_spec.SetField(smlversion.FieldDate, field.TypeTime, value)
	}
	if value, ok := svu.mutation.Link(); ok {
		_spec.SetField(smlversion.FieldLink, field.TypeString, value)
	}
	if value, ok := svu.mutation.Changelog(); ok {
		_spec.SetField(smlversion.FieldChangelog, field.TypeString, value)
	}
	if value, ok := svu.mutation.BootstrapVersion(); ok {
		_spec.SetField(smlversion.FieldBootstrapVersion, field.TypeString, value)
	}
	if svu.mutation.BootstrapVersionCleared() {
		_spec.ClearField(smlversion.FieldBootstrapVersion, field.TypeString)
	}
	if value, ok := svu.mutation.EngineVersion(); ok {
		_spec.SetField(smlversion.FieldEngineVersion, field.TypeString, value)
	}
	if svu.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   smlversion.TargetsTable,
			Columns: []string{smlversion.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.RemovedTargetsIDs(); len(nodes) > 0 && !svu.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   smlversion.TargetsTable,
			Columns: []string{smlversion.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.TargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   smlversion.TargetsTable,
			Columns: []string{smlversion.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(svu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smlversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SmlVersionUpdateOne is the builder for updating a single SmlVersion entity.
type SmlVersionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SmlVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (svuo *SmlVersionUpdateOne) SetUpdatedAt(t time.Time) *SmlVersionUpdateOne {
	svuo.mutation.SetUpdatedAt(t)
	return svuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (svuo *SmlVersionUpdateOne) ClearUpdatedAt() *SmlVersionUpdateOne {
	svuo.mutation.ClearUpdatedAt()
	return svuo
}

// SetDeletedAt sets the "deleted_at" field.
func (svuo *SmlVersionUpdateOne) SetDeletedAt(t time.Time) *SmlVersionUpdateOne {
	svuo.mutation.SetDeletedAt(t)
	return svuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableDeletedAt(t *time.Time) *SmlVersionUpdateOne {
	if t != nil {
		svuo.SetDeletedAt(*t)
	}
	return svuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (svuo *SmlVersionUpdateOne) ClearDeletedAt() *SmlVersionUpdateOne {
	svuo.mutation.ClearDeletedAt()
	return svuo
}

// SetVersion sets the "version" field.
func (svuo *SmlVersionUpdateOne) SetVersion(s string) *SmlVersionUpdateOne {
	svuo.mutation.SetVersion(s)
	return svuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableVersion(s *string) *SmlVersionUpdateOne {
	if s != nil {
		svuo.SetVersion(*s)
	}
	return svuo
}

// SetSatisfactoryVersion sets the "satisfactory_version" field.
func (svuo *SmlVersionUpdateOne) SetSatisfactoryVersion(i int) *SmlVersionUpdateOne {
	svuo.mutation.ResetSatisfactoryVersion()
	svuo.mutation.SetSatisfactoryVersion(i)
	return svuo
}

// SetNillableSatisfactoryVersion sets the "satisfactory_version" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableSatisfactoryVersion(i *int) *SmlVersionUpdateOne {
	if i != nil {
		svuo.SetSatisfactoryVersion(*i)
	}
	return svuo
}

// AddSatisfactoryVersion adds i to the "satisfactory_version" field.
func (svuo *SmlVersionUpdateOne) AddSatisfactoryVersion(i int) *SmlVersionUpdateOne {
	svuo.mutation.AddSatisfactoryVersion(i)
	return svuo
}

// SetStability sets the "stability" field.
func (svuo *SmlVersionUpdateOne) SetStability(u util.Stability) *SmlVersionUpdateOne {
	svuo.mutation.SetStability(u)
	return svuo
}

// SetNillableStability sets the "stability" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableStability(u *util.Stability) *SmlVersionUpdateOne {
	if u != nil {
		svuo.SetStability(*u)
	}
	return svuo
}

// SetDate sets the "date" field.
func (svuo *SmlVersionUpdateOne) SetDate(t time.Time) *SmlVersionUpdateOne {
	svuo.mutation.SetDate(t)
	return svuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableDate(t *time.Time) *SmlVersionUpdateOne {
	if t != nil {
		svuo.SetDate(*t)
	}
	return svuo
}

// SetLink sets the "link" field.
func (svuo *SmlVersionUpdateOne) SetLink(s string) *SmlVersionUpdateOne {
	svuo.mutation.SetLink(s)
	return svuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableLink(s *string) *SmlVersionUpdateOne {
	if s != nil {
		svuo.SetLink(*s)
	}
	return svuo
}

// SetChangelog sets the "changelog" field.
func (svuo *SmlVersionUpdateOne) SetChangelog(s string) *SmlVersionUpdateOne {
	svuo.mutation.SetChangelog(s)
	return svuo
}

// SetNillableChangelog sets the "changelog" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableChangelog(s *string) *SmlVersionUpdateOne {
	if s != nil {
		svuo.SetChangelog(*s)
	}
	return svuo
}

// SetBootstrapVersion sets the "bootstrap_version" field.
func (svuo *SmlVersionUpdateOne) SetBootstrapVersion(s string) *SmlVersionUpdateOne {
	svuo.mutation.SetBootstrapVersion(s)
	return svuo
}

// SetNillableBootstrapVersion sets the "bootstrap_version" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableBootstrapVersion(s *string) *SmlVersionUpdateOne {
	if s != nil {
		svuo.SetBootstrapVersion(*s)
	}
	return svuo
}

// ClearBootstrapVersion clears the value of the "bootstrap_version" field.
func (svuo *SmlVersionUpdateOne) ClearBootstrapVersion() *SmlVersionUpdateOne {
	svuo.mutation.ClearBootstrapVersion()
	return svuo
}

// SetEngineVersion sets the "engine_version" field.
func (svuo *SmlVersionUpdateOne) SetEngineVersion(s string) *SmlVersionUpdateOne {
	svuo.mutation.SetEngineVersion(s)
	return svuo
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (svuo *SmlVersionUpdateOne) SetNillableEngineVersion(s *string) *SmlVersionUpdateOne {
	if s != nil {
		svuo.SetEngineVersion(*s)
	}
	return svuo
}

// AddTargetIDs adds the "targets" edge to the SmlVersionTarget entity by IDs.
func (svuo *SmlVersionUpdateOne) AddTargetIDs(ids ...string) *SmlVersionUpdateOne {
	svuo.mutation.AddTargetIDs(ids...)
	return svuo
}

// AddTargets adds the "targets" edges to the SmlVersionTarget entity.
func (svuo *SmlVersionUpdateOne) AddTargets(s ...*SmlVersionTarget) *SmlVersionUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return svuo.AddTargetIDs(ids...)
}

// Mutation returns the SmlVersionMutation object of the builder.
func (svuo *SmlVersionUpdateOne) Mutation() *SmlVersionMutation {
	return svuo.mutation
}

// ClearTargets clears all "targets" edges to the SmlVersionTarget entity.
func (svuo *SmlVersionUpdateOne) ClearTargets() *SmlVersionUpdateOne {
	svuo.mutation.ClearTargets()
	return svuo
}

// RemoveTargetIDs removes the "targets" edge to SmlVersionTarget entities by IDs.
func (svuo *SmlVersionUpdateOne) RemoveTargetIDs(ids ...string) *SmlVersionUpdateOne {
	svuo.mutation.RemoveTargetIDs(ids...)
	return svuo
}

// RemoveTargets removes "targets" edges to SmlVersionTarget entities.
func (svuo *SmlVersionUpdateOne) RemoveTargets(s ...*SmlVersionTarget) *SmlVersionUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return svuo.RemoveTargetIDs(ids...)
}

// Where appends a list predicates to the SmlVersionUpdate builder.
func (svuo *SmlVersionUpdateOne) Where(ps ...predicate.SmlVersion) *SmlVersionUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SmlVersionUpdateOne) Select(field string, fields ...string) *SmlVersionUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SmlVersion entity.
func (svuo *SmlVersionUpdateOne) Save(ctx context.Context) (*SmlVersion, error) {
	if err := svuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SmlVersionUpdateOne) SaveX(ctx context.Context) *SmlVersion {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SmlVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SmlVersionUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svuo *SmlVersionUpdateOne) defaults() error {
	if _, ok := svuo.mutation.UpdatedAt(); !ok && !svuo.mutation.UpdatedAtCleared() {
		if smlversion.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized smlversion.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := smlversion.UpdateDefaultUpdatedAt()
		svuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SmlVersionUpdateOne) check() error {
	if v, ok := svuo.mutation.Version(); ok {
		if err := smlversion.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.version": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.Stability(); ok {
		if err := smlversion.StabilityValidator(v); err != nil {
			return &ValidationError{Name: "stability", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.stability": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.BootstrapVersion(); ok {
		if err := smlversion.BootstrapVersionValidator(v); err != nil {
			return &ValidationError{Name: "bootstrap_version", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.bootstrap_version": %w`, err)}
		}
	}
	if v, ok := svuo.mutation.EngineVersion(); ok {
		if err := smlversion.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "SmlVersion.engine_version": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (svuo *SmlVersionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SmlVersionUpdateOne {
	svuo.modifiers = append(svuo.modifiers, modifiers...)
	return svuo
}

func (svuo *SmlVersionUpdateOne) sqlSave(ctx context.Context) (_node *SmlVersion, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(smlversion.Table, smlversion.Columns, sqlgraph.NewFieldSpec(smlversion.FieldID, field.TypeString))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SmlVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smlversion.FieldID)
		for _, f := range fields {
			if !smlversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smlversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if svuo.mutation.CreatedAtCleared() {
		_spec.ClearField(smlversion.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := svuo.mutation.UpdatedAt(); ok {
		_spec.SetField(smlversion.FieldUpdatedAt, field.TypeTime, value)
	}
	if svuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(smlversion.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := svuo.mutation.DeletedAt(); ok {
		_spec.SetField(smlversion.FieldDeletedAt, field.TypeTime, value)
	}
	if svuo.mutation.DeletedAtCleared() {
		_spec.ClearField(smlversion.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := svuo.mutation.Version(); ok {
		_spec.SetField(smlversion.FieldVersion, field.TypeString, value)
	}
	if value, ok := svuo.mutation.SatisfactoryVersion(); ok {
		_spec.SetField(smlversion.FieldSatisfactoryVersion, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.AddedSatisfactoryVersion(); ok {
		_spec.AddField(smlversion.FieldSatisfactoryVersion, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.Stability(); ok {
		_spec.SetField(smlversion.FieldStability, field.TypeEnum, value)
	}
	if value, ok := svuo.mutation.Date(); ok {
		_spec.SetField(smlversion.FieldDate, field.TypeTime, value)
	}
	if value, ok := svuo.mutation.Link(); ok {
		_spec.SetField(smlversion.FieldLink, field.TypeString, value)
	}
	if value, ok := svuo.mutation.Changelog(); ok {
		_spec.SetField(smlversion.FieldChangelog, field.TypeString, value)
	}
	if value, ok := svuo.mutation.BootstrapVersion(); ok {
		_spec.SetField(smlversion.FieldBootstrapVersion, field.TypeString, value)
	}
	if svuo.mutation.BootstrapVersionCleared() {
		_spec.ClearField(smlversion.FieldBootstrapVersion, field.TypeString)
	}
	if value, ok := svuo.mutation.EngineVersion(); ok {
		_spec.SetField(smlversion.FieldEngineVersion, field.TypeString, value)
	}
	if svuo.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   smlversion.TargetsTable,
			Columns: []string{smlversion.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.RemovedTargetsIDs(); len(nodes) > 0 && !svuo.mutation.TargetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   smlversion.TargetsTable,
			Columns: []string{smlversion.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.TargetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   smlversion.TargetsTable,
			Columns: []string{smlversion.TargetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(svuo.modifiers...)
	_node = &SmlVersion{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smlversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
