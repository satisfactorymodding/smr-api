// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/util"
)

// ModCreate is the builder for creating a Mod entity.
type ModCreate struct {
	config
	mutation *ModMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *ModCreate) SetCreatedAt(t time.Time) *ModCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *ModCreate) SetNillableCreatedAt(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *ModCreate) SetUpdatedAt(t time.Time) *ModCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *ModCreate) SetNillableUpdatedAt(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *ModCreate) SetDeletedAt(t time.Time) *ModCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *ModCreate) SetNillableDeletedAt(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *ModCreate) SetName(s string) *ModCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetShortDescription sets the "short_description" field.
func (mc *ModCreate) SetShortDescription(s string) *ModCreate {
	mc.mutation.SetShortDescription(s)
	return mc
}

// SetFullDescription sets the "full_description" field.
func (mc *ModCreate) SetFullDescription(s string) *ModCreate {
	mc.mutation.SetFullDescription(s)
	return mc
}

// SetLogo sets the "logo" field.
func (mc *ModCreate) SetLogo(s string) *ModCreate {
	mc.mutation.SetLogo(s)
	return mc
}

// SetLogoThumbhash sets the "logo_thumbhash" field.
func (mc *ModCreate) SetLogoThumbhash(s string) *ModCreate {
	mc.mutation.SetLogoThumbhash(s)
	return mc
}

// SetNillableLogoThumbhash sets the "logo_thumbhash" field if the given value is not nil.
func (mc *ModCreate) SetNillableLogoThumbhash(s *string) *ModCreate {
	if s != nil {
		mc.SetLogoThumbhash(*s)
	}
	return mc
}

// SetSourceURL sets the "source_url" field.
func (mc *ModCreate) SetSourceURL(s string) *ModCreate {
	mc.mutation.SetSourceURL(s)
	return mc
}

// SetNillableSourceURL sets the "source_url" field if the given value is not nil.
func (mc *ModCreate) SetNillableSourceURL(s *string) *ModCreate {
	if s != nil {
		mc.SetSourceURL(*s)
	}
	return mc
}

// SetCreatorID sets the "creator_id" field.
func (mc *ModCreate) SetCreatorID(s string) *ModCreate {
	mc.mutation.SetCreatorID(s)
	return mc
}

// SetApproved sets the "approved" field.
func (mc *ModCreate) SetApproved(b bool) *ModCreate {
	mc.mutation.SetApproved(b)
	return mc
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (mc *ModCreate) SetNillableApproved(b *bool) *ModCreate {
	if b != nil {
		mc.SetApproved(*b)
	}
	return mc
}

// SetViews sets the "views" field.
func (mc *ModCreate) SetViews(u uint) *ModCreate {
	mc.mutation.SetViews(u)
	return mc
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (mc *ModCreate) SetNillableViews(u *uint) *ModCreate {
	if u != nil {
		mc.SetViews(*u)
	}
	return mc
}

// SetHotness sets the "hotness" field.
func (mc *ModCreate) SetHotness(u uint) *ModCreate {
	mc.mutation.SetHotness(u)
	return mc
}

// SetNillableHotness sets the "hotness" field if the given value is not nil.
func (mc *ModCreate) SetNillableHotness(u *uint) *ModCreate {
	if u != nil {
		mc.SetHotness(*u)
	}
	return mc
}

// SetPopularity sets the "popularity" field.
func (mc *ModCreate) SetPopularity(u uint) *ModCreate {
	mc.mutation.SetPopularity(u)
	return mc
}

// SetNillablePopularity sets the "popularity" field if the given value is not nil.
func (mc *ModCreate) SetNillablePopularity(u *uint) *ModCreate {
	if u != nil {
		mc.SetPopularity(*u)
	}
	return mc
}

// SetDownloads sets the "downloads" field.
func (mc *ModCreate) SetDownloads(u uint) *ModCreate {
	mc.mutation.SetDownloads(u)
	return mc
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (mc *ModCreate) SetNillableDownloads(u *uint) *ModCreate {
	if u != nil {
		mc.SetDownloads(*u)
	}
	return mc
}

// SetDenied sets the "denied" field.
func (mc *ModCreate) SetDenied(b bool) *ModCreate {
	mc.mutation.SetDenied(b)
	return mc
}

// SetNillableDenied sets the "denied" field if the given value is not nil.
func (mc *ModCreate) SetNillableDenied(b *bool) *ModCreate {
	if b != nil {
		mc.SetDenied(*b)
	}
	return mc
}

// SetLastVersionDate sets the "last_version_date" field.
func (mc *ModCreate) SetLastVersionDate(t time.Time) *ModCreate {
	mc.mutation.SetLastVersionDate(t)
	return mc
}

// SetNillableLastVersionDate sets the "last_version_date" field if the given value is not nil.
func (mc *ModCreate) SetNillableLastVersionDate(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetLastVersionDate(*t)
	}
	return mc
}

// SetModReference sets the "mod_reference" field.
func (mc *ModCreate) SetModReference(s string) *ModCreate {
	mc.mutation.SetModReference(s)
	return mc
}

// SetHidden sets the "hidden" field.
func (mc *ModCreate) SetHidden(b bool) *ModCreate {
	mc.mutation.SetHidden(b)
	return mc
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (mc *ModCreate) SetNillableHidden(b *bool) *ModCreate {
	if b != nil {
		mc.SetHidden(*b)
	}
	return mc
}

// SetCompatibility sets the "compatibility" field.
func (mc *ModCreate) SetCompatibility(ui *util.CompatibilityInfo) *ModCreate {
	mc.mutation.SetCompatibility(ui)
	return mc
}

// SetID sets the "id" field.
func (mc *ModCreate) SetID(s string) *ModCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *ModCreate) SetNillableID(s *string) *ModCreate {
	if s != nil {
		mc.SetID(*s)
	}
	return mc
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (mc *ModCreate) AddVersionIDs(ids ...string) *ModCreate {
	mc.mutation.AddVersionIDs(ids...)
	return mc
}

// AddVersions adds the "versions" edges to the Version entity.
func (mc *ModCreate) AddVersions(v ...*Version) *ModCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mc.AddVersionIDs(ids...)
}

// AddAuthorIDs adds the "authors" edge to the User entity by IDs.
func (mc *ModCreate) AddAuthorIDs(ids ...string) *ModCreate {
	mc.mutation.AddAuthorIDs(ids...)
	return mc
}

// AddAuthors adds the "authors" edges to the User entity.
func (mc *ModCreate) AddAuthors(u ...*User) *ModCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mc.AddAuthorIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (mc *ModCreate) AddTagIDs(ids ...string) *ModCreate {
	mc.mutation.AddTagIDs(ids...)
	return mc
}

// AddTags adds the "tags" edges to the Tag entity.
func (mc *ModCreate) AddTags(t ...*Tag) *ModCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTagIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Version entity by IDs.
func (mc *ModCreate) AddDependentIDs(ids ...string) *ModCreate {
	mc.mutation.AddDependentIDs(ids...)
	return mc
}

// AddDependents adds the "dependents" edges to the Version entity.
func (mc *ModCreate) AddDependents(v ...*Version) *ModCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mc.AddDependentIDs(ids...)
}

// Mutation returns the ModMutation object of the builder.
func (mc *ModCreate) Mutation() *ModMutation {
	return mc.mutation
}

// Save creates the Mod in the database.
func (mc *ModCreate) Save(ctx context.Context) (*Mod, error) {
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModCreate) SaveX(ctx context.Context) *Mod {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ModCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ModCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *ModCreate) defaults() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if mod.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized mod.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := mod.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if mod.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mod.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mod.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.Approved(); !ok {
		v := mod.DefaultApproved
		mc.mutation.SetApproved(v)
	}
	if _, ok := mc.mutation.Views(); !ok {
		v := mod.DefaultViews
		mc.mutation.SetViews(v)
	}
	if _, ok := mc.mutation.Hotness(); !ok {
		v := mod.DefaultHotness
		mc.mutation.SetHotness(v)
	}
	if _, ok := mc.mutation.Popularity(); !ok {
		v := mod.DefaultPopularity
		mc.mutation.SetPopularity(v)
	}
	if _, ok := mc.mutation.Downloads(); !ok {
		v := mod.DefaultDownloads
		mc.mutation.SetDownloads(v)
	}
	if _, ok := mc.mutation.Denied(); !ok {
		v := mod.DefaultDenied
		mc.mutation.SetDenied(v)
	}
	if _, ok := mc.mutation.Hidden(); !ok {
		v := mod.DefaultHidden
		mc.mutation.SetHidden(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		if mod.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized mod.DefaultID (forgotten import ent/runtime?)")
		}
		v := mod.DefaultID()
		mc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *ModCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Mod.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Mod.updated_at"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Mod.name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := mod.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Mod.name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.ShortDescription(); !ok {
		return &ValidationError{Name: "short_description", err: errors.New(`ent: missing required field "Mod.short_description"`)}
	}
	if v, ok := mc.mutation.ShortDescription(); ok {
		if err := mod.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "Mod.short_description": %w`, err)}
		}
	}
	if _, ok := mc.mutation.FullDescription(); !ok {
		return &ValidationError{Name: "full_description", err: errors.New(`ent: missing required field "Mod.full_description"`)}
	}
	if _, ok := mc.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`ent: missing required field "Mod.logo"`)}
	}
	if _, ok := mc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Mod.creator_id"`)}
	}
	if _, ok := mc.mutation.Approved(); !ok {
		return &ValidationError{Name: "approved", err: errors.New(`ent: missing required field "Mod.approved"`)}
	}
	if _, ok := mc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "Mod.views"`)}
	}
	if _, ok := mc.mutation.Hotness(); !ok {
		return &ValidationError{Name: "hotness", err: errors.New(`ent: missing required field "Mod.hotness"`)}
	}
	if _, ok := mc.mutation.Popularity(); !ok {
		return &ValidationError{Name: "popularity", err: errors.New(`ent: missing required field "Mod.popularity"`)}
	}
	if _, ok := mc.mutation.Downloads(); !ok {
		return &ValidationError{Name: "downloads", err: errors.New(`ent: missing required field "Mod.downloads"`)}
	}
	if _, ok := mc.mutation.Denied(); !ok {
		return &ValidationError{Name: "denied", err: errors.New(`ent: missing required field "Mod.denied"`)}
	}
	if _, ok := mc.mutation.ModReference(); !ok {
		return &ValidationError{Name: "mod_reference", err: errors.New(`ent: missing required field "Mod.mod_reference"`)}
	}
	if v, ok := mc.mutation.ModReference(); ok {
		if err := mod.ModReferenceValidator(v); err != nil {
			return &ValidationError{Name: "mod_reference", err: fmt.Errorf(`ent: validator failed for field "Mod.mod_reference": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Hidden(); !ok {
		return &ValidationError{Name: "hidden", err: errors.New(`ent: missing required field "Mod.hidden"`)}
	}
	return nil
}

func (mc *ModCreate) sqlSave(ctx context.Context) (*Mod, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Mod.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *ModCreate) createSpec() (*Mod, *sqlgraph.CreateSpec) {
	var (
		_node = &Mod{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mod.Table, sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(mod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(mod.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(mod.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(mod.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.ShortDescription(); ok {
		_spec.SetField(mod.FieldShortDescription, field.TypeString, value)
		_node.ShortDescription = value
	}
	if value, ok := mc.mutation.FullDescription(); ok {
		_spec.SetField(mod.FieldFullDescription, field.TypeString, value)
		_node.FullDescription = value
	}
	if value, ok := mc.mutation.Logo(); ok {
		_spec.SetField(mod.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := mc.mutation.LogoThumbhash(); ok {
		_spec.SetField(mod.FieldLogoThumbhash, field.TypeString, value)
		_node.LogoThumbhash = value
	}
	if value, ok := mc.mutation.SourceURL(); ok {
		_spec.SetField(mod.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = value
	}
	if value, ok := mc.mutation.CreatorID(); ok {
		_spec.SetField(mod.FieldCreatorID, field.TypeString, value)
		_node.CreatorID = value
	}
	if value, ok := mc.mutation.Approved(); ok {
		_spec.SetField(mod.FieldApproved, field.TypeBool, value)
		_node.Approved = value
	}
	if value, ok := mc.mutation.Views(); ok {
		_spec.SetField(mod.FieldViews, field.TypeUint, value)
		_node.Views = value
	}
	if value, ok := mc.mutation.Hotness(); ok {
		_spec.SetField(mod.FieldHotness, field.TypeUint, value)
		_node.Hotness = value
	}
	if value, ok := mc.mutation.Popularity(); ok {
		_spec.SetField(mod.FieldPopularity, field.TypeUint, value)
		_node.Popularity = value
	}
	if value, ok := mc.mutation.Downloads(); ok {
		_spec.SetField(mod.FieldDownloads, field.TypeUint, value)
		_node.Downloads = value
	}
	if value, ok := mc.mutation.Denied(); ok {
		_spec.SetField(mod.FieldDenied, field.TypeBool, value)
		_node.Denied = value
	}
	if value, ok := mc.mutation.LastVersionDate(); ok {
		_spec.SetField(mod.FieldLastVersionDate, field.TypeTime, value)
		_node.LastVersionDate = value
	}
	if value, ok := mc.mutation.ModReference(); ok {
		_spec.SetField(mod.FieldModReference, field.TypeString, value)
		_node.ModReference = value
	}
	if value, ok := mc.mutation.Hidden(); ok {
		_spec.SetField(mod.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := mc.mutation.Compatibility(); ok {
		_spec.SetField(mod.FieldCompatibility, field.TypeJSON, value)
		_node.Compatibility = value
	}
	if nodes := mc.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: mc.config, mutation: newVersionDependencyMutation(mc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mod.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *ModCreate) OnConflict(opts ...sql.ConflictOption) *ModUpsertOne {
	mc.conflict = opts
	return &ModUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *ModCreate) OnConflictColumns(columns ...string) *ModUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &ModUpsertOne{
		create: mc,
	}
}

type (
	// ModUpsertOne is the builder for "upsert"-ing
	//  one Mod node.
	ModUpsertOne struct {
		create *ModCreate
	}

	// ModUpsert is the "OnConflict" setter.
	ModUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ModUpsert) SetUpdatedAt(v time.Time) *ModUpsert {
	u.Set(mod.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModUpsert) UpdateUpdatedAt() *ModUpsert {
	u.SetExcluded(mod.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModUpsert) SetDeletedAt(v time.Time) *ModUpsert {
	u.Set(mod.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModUpsert) UpdateDeletedAt() *ModUpsert {
	u.SetExcluded(mod.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ModUpsert) ClearDeletedAt() *ModUpsert {
	u.SetNull(mod.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *ModUpsert) SetName(v string) *ModUpsert {
	u.Set(mod.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ModUpsert) UpdateName() *ModUpsert {
	u.SetExcluded(mod.FieldName)
	return u
}

// SetShortDescription sets the "short_description" field.
func (u *ModUpsert) SetShortDescription(v string) *ModUpsert {
	u.Set(mod.FieldShortDescription, v)
	return u
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *ModUpsert) UpdateShortDescription() *ModUpsert {
	u.SetExcluded(mod.FieldShortDescription)
	return u
}

// SetFullDescription sets the "full_description" field.
func (u *ModUpsert) SetFullDescription(v string) *ModUpsert {
	u.Set(mod.FieldFullDescription, v)
	return u
}

// UpdateFullDescription sets the "full_description" field to the value that was provided on create.
func (u *ModUpsert) UpdateFullDescription() *ModUpsert {
	u.SetExcluded(mod.FieldFullDescription)
	return u
}

// SetLogo sets the "logo" field.
func (u *ModUpsert) SetLogo(v string) *ModUpsert {
	u.Set(mod.FieldLogo, v)
	return u
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *ModUpsert) UpdateLogo() *ModUpsert {
	u.SetExcluded(mod.FieldLogo)
	return u
}

// SetLogoThumbhash sets the "logo_thumbhash" field.
func (u *ModUpsert) SetLogoThumbhash(v string) *ModUpsert {
	u.Set(mod.FieldLogoThumbhash, v)
	return u
}

// UpdateLogoThumbhash sets the "logo_thumbhash" field to the value that was provided on create.
func (u *ModUpsert) UpdateLogoThumbhash() *ModUpsert {
	u.SetExcluded(mod.FieldLogoThumbhash)
	return u
}

// ClearLogoThumbhash clears the value of the "logo_thumbhash" field.
func (u *ModUpsert) ClearLogoThumbhash() *ModUpsert {
	u.SetNull(mod.FieldLogoThumbhash)
	return u
}

// SetSourceURL sets the "source_url" field.
func (u *ModUpsert) SetSourceURL(v string) *ModUpsert {
	u.Set(mod.FieldSourceURL, v)
	return u
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *ModUpsert) UpdateSourceURL() *ModUpsert {
	u.SetExcluded(mod.FieldSourceURL)
	return u
}

// ClearSourceURL clears the value of the "source_url" field.
func (u *ModUpsert) ClearSourceURL() *ModUpsert {
	u.SetNull(mod.FieldSourceURL)
	return u
}

// SetCreatorID sets the "creator_id" field.
func (u *ModUpsert) SetCreatorID(v string) *ModUpsert {
	u.Set(mod.FieldCreatorID, v)
	return u
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *ModUpsert) UpdateCreatorID() *ModUpsert {
	u.SetExcluded(mod.FieldCreatorID)
	return u
}

// SetApproved sets the "approved" field.
func (u *ModUpsert) SetApproved(v bool) *ModUpsert {
	u.Set(mod.FieldApproved, v)
	return u
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *ModUpsert) UpdateApproved() *ModUpsert {
	u.SetExcluded(mod.FieldApproved)
	return u
}

// SetViews sets the "views" field.
func (u *ModUpsert) SetViews(v uint) *ModUpsert {
	u.Set(mod.FieldViews, v)
	return u
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *ModUpsert) UpdateViews() *ModUpsert {
	u.SetExcluded(mod.FieldViews)
	return u
}

// AddViews adds v to the "views" field.
func (u *ModUpsert) AddViews(v uint) *ModUpsert {
	u.Add(mod.FieldViews, v)
	return u
}

// SetHotness sets the "hotness" field.
func (u *ModUpsert) SetHotness(v uint) *ModUpsert {
	u.Set(mod.FieldHotness, v)
	return u
}

// UpdateHotness sets the "hotness" field to the value that was provided on create.
func (u *ModUpsert) UpdateHotness() *ModUpsert {
	u.SetExcluded(mod.FieldHotness)
	return u
}

// AddHotness adds v to the "hotness" field.
func (u *ModUpsert) AddHotness(v uint) *ModUpsert {
	u.Add(mod.FieldHotness, v)
	return u
}

// SetPopularity sets the "popularity" field.
func (u *ModUpsert) SetPopularity(v uint) *ModUpsert {
	u.Set(mod.FieldPopularity, v)
	return u
}

// UpdatePopularity sets the "popularity" field to the value that was provided on create.
func (u *ModUpsert) UpdatePopularity() *ModUpsert {
	u.SetExcluded(mod.FieldPopularity)
	return u
}

// AddPopularity adds v to the "popularity" field.
func (u *ModUpsert) AddPopularity(v uint) *ModUpsert {
	u.Add(mod.FieldPopularity, v)
	return u
}

// SetDownloads sets the "downloads" field.
func (u *ModUpsert) SetDownloads(v uint) *ModUpsert {
	u.Set(mod.FieldDownloads, v)
	return u
}

// UpdateDownloads sets the "downloads" field to the value that was provided on create.
func (u *ModUpsert) UpdateDownloads() *ModUpsert {
	u.SetExcluded(mod.FieldDownloads)
	return u
}

// AddDownloads adds v to the "downloads" field.
func (u *ModUpsert) AddDownloads(v uint) *ModUpsert {
	u.Add(mod.FieldDownloads, v)
	return u
}

// SetDenied sets the "denied" field.
func (u *ModUpsert) SetDenied(v bool) *ModUpsert {
	u.Set(mod.FieldDenied, v)
	return u
}

// UpdateDenied sets the "denied" field to the value that was provided on create.
func (u *ModUpsert) UpdateDenied() *ModUpsert {
	u.SetExcluded(mod.FieldDenied)
	return u
}

// SetLastVersionDate sets the "last_version_date" field.
func (u *ModUpsert) SetLastVersionDate(v time.Time) *ModUpsert {
	u.Set(mod.FieldLastVersionDate, v)
	return u
}

// UpdateLastVersionDate sets the "last_version_date" field to the value that was provided on create.
func (u *ModUpsert) UpdateLastVersionDate() *ModUpsert {
	u.SetExcluded(mod.FieldLastVersionDate)
	return u
}

// ClearLastVersionDate clears the value of the "last_version_date" field.
func (u *ModUpsert) ClearLastVersionDate() *ModUpsert {
	u.SetNull(mod.FieldLastVersionDate)
	return u
}

// SetModReference sets the "mod_reference" field.
func (u *ModUpsert) SetModReference(v string) *ModUpsert {
	u.Set(mod.FieldModReference, v)
	return u
}

// UpdateModReference sets the "mod_reference" field to the value that was provided on create.
func (u *ModUpsert) UpdateModReference() *ModUpsert {
	u.SetExcluded(mod.FieldModReference)
	return u
}

// SetHidden sets the "hidden" field.
func (u *ModUpsert) SetHidden(v bool) *ModUpsert {
	u.Set(mod.FieldHidden, v)
	return u
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *ModUpsert) UpdateHidden() *ModUpsert {
	u.SetExcluded(mod.FieldHidden)
	return u
}

// SetCompatibility sets the "compatibility" field.
func (u *ModUpsert) SetCompatibility(v *util.CompatibilityInfo) *ModUpsert {
	u.Set(mod.FieldCompatibility, v)
	return u
}

// UpdateCompatibility sets the "compatibility" field to the value that was provided on create.
func (u *ModUpsert) UpdateCompatibility() *ModUpsert {
	u.SetExcluded(mod.FieldCompatibility)
	return u
}

// ClearCompatibility clears the value of the "compatibility" field.
func (u *ModUpsert) ClearCompatibility() *ModUpsert {
	u.SetNull(mod.FieldCompatibility)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Mod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModUpsertOne) UpdateNewValues() *ModUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mod.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(mod.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mod.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ModUpsertOne) Ignore() *ModUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModUpsertOne) DoNothing() *ModUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModCreate.OnConflict
// documentation for more info.
func (u *ModUpsertOne) Update(set func(*ModUpsert)) *ModUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModUpsertOne) SetUpdatedAt(v time.Time) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateUpdatedAt() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModUpsertOne) SetDeletedAt(v time.Time) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateDeletedAt() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ModUpsertOne) ClearDeletedAt() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ModUpsertOne) SetName(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateName() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateName()
	})
}

// SetShortDescription sets the "short_description" field.
func (u *ModUpsertOne) SetShortDescription(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetShortDescription(v)
	})
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateShortDescription() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateShortDescription()
	})
}

// SetFullDescription sets the "full_description" field.
func (u *ModUpsertOne) SetFullDescription(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetFullDescription(v)
	})
}

// UpdateFullDescription sets the "full_description" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateFullDescription() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateFullDescription()
	})
}

// SetLogo sets the "logo" field.
func (u *ModUpsertOne) SetLogo(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateLogo() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateLogo()
	})
}

// SetLogoThumbhash sets the "logo_thumbhash" field.
func (u *ModUpsertOne) SetLogoThumbhash(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetLogoThumbhash(v)
	})
}

// UpdateLogoThumbhash sets the "logo_thumbhash" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateLogoThumbhash() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateLogoThumbhash()
	})
}

// ClearLogoThumbhash clears the value of the "logo_thumbhash" field.
func (u *ModUpsertOne) ClearLogoThumbhash() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.ClearLogoThumbhash()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *ModUpsertOne) SetSourceURL(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateSourceURL() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateSourceURL()
	})
}

// ClearSourceURL clears the value of the "source_url" field.
func (u *ModUpsertOne) ClearSourceURL() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.ClearSourceURL()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *ModUpsertOne) SetCreatorID(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateCreatorID() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateCreatorID()
	})
}

// SetApproved sets the "approved" field.
func (u *ModUpsertOne) SetApproved(v bool) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetApproved(v)
	})
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateApproved() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateApproved()
	})
}

// SetViews sets the "views" field.
func (u *ModUpsertOne) SetViews(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *ModUpsertOne) AddViews(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateViews() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateViews()
	})
}

// SetHotness sets the "hotness" field.
func (u *ModUpsertOne) SetHotness(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetHotness(v)
	})
}

// AddHotness adds v to the "hotness" field.
func (u *ModUpsertOne) AddHotness(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.AddHotness(v)
	})
}

// UpdateHotness sets the "hotness" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateHotness() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateHotness()
	})
}

// SetPopularity sets the "popularity" field.
func (u *ModUpsertOne) SetPopularity(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetPopularity(v)
	})
}

// AddPopularity adds v to the "popularity" field.
func (u *ModUpsertOne) AddPopularity(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.AddPopularity(v)
	})
}

// UpdatePopularity sets the "popularity" field to the value that was provided on create.
func (u *ModUpsertOne) UpdatePopularity() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdatePopularity()
	})
}

// SetDownloads sets the "downloads" field.
func (u *ModUpsertOne) SetDownloads(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetDownloads(v)
	})
}

// AddDownloads adds v to the "downloads" field.
func (u *ModUpsertOne) AddDownloads(v uint) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.AddDownloads(v)
	})
}

// UpdateDownloads sets the "downloads" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateDownloads() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateDownloads()
	})
}

// SetDenied sets the "denied" field.
func (u *ModUpsertOne) SetDenied(v bool) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetDenied(v)
	})
}

// UpdateDenied sets the "denied" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateDenied() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateDenied()
	})
}

// SetLastVersionDate sets the "last_version_date" field.
func (u *ModUpsertOne) SetLastVersionDate(v time.Time) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetLastVersionDate(v)
	})
}

// UpdateLastVersionDate sets the "last_version_date" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateLastVersionDate() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateLastVersionDate()
	})
}

// ClearLastVersionDate clears the value of the "last_version_date" field.
func (u *ModUpsertOne) ClearLastVersionDate() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.ClearLastVersionDate()
	})
}

// SetModReference sets the "mod_reference" field.
func (u *ModUpsertOne) SetModReference(v string) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetModReference(v)
	})
}

// UpdateModReference sets the "mod_reference" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateModReference() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateModReference()
	})
}

// SetHidden sets the "hidden" field.
func (u *ModUpsertOne) SetHidden(v bool) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetHidden(v)
	})
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateHidden() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateHidden()
	})
}

// SetCompatibility sets the "compatibility" field.
func (u *ModUpsertOne) SetCompatibility(v *util.CompatibilityInfo) *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.SetCompatibility(v)
	})
}

// UpdateCompatibility sets the "compatibility" field to the value that was provided on create.
func (u *ModUpsertOne) UpdateCompatibility() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.UpdateCompatibility()
	})
}

// ClearCompatibility clears the value of the "compatibility" field.
func (u *ModUpsertOne) ClearCompatibility() *ModUpsertOne {
	return u.Update(func(s *ModUpsert) {
		s.ClearCompatibility()
	})
}

// Exec executes the query.
func (u *ModUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ModUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ModUpsertOne.ID is not supported by MySQL driver. Use ModUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ModUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ModCreateBulk is the builder for creating many Mod entities in bulk.
type ModCreateBulk struct {
	config
	err      error
	builders []*ModCreate
	conflict []sql.ConflictOption
}

// Save creates the Mod entities in the database.
func (mcb *ModCreateBulk) Save(ctx context.Context) ([]*Mod, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mod, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ModCreateBulk) SaveX(ctx context.Context) []*Mod {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ModCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ModCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mod.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ModUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *ModCreateBulk) OnConflict(opts ...sql.ConflictOption) *ModUpsertBulk {
	mcb.conflict = opts
	return &ModUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *ModCreateBulk) OnConflictColumns(columns ...string) *ModUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &ModUpsertBulk{
		create: mcb,
	}
}

// ModUpsertBulk is the builder for "upsert"-ing
// a bulk of Mod nodes.
type ModUpsertBulk struct {
	create *ModCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ModUpsertBulk) UpdateNewValues() *ModUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mod.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(mod.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mod.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ModUpsertBulk) Ignore() *ModUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ModUpsertBulk) DoNothing() *ModUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ModCreateBulk.OnConflict
// documentation for more info.
func (u *ModUpsertBulk) Update(set func(*ModUpsert)) *ModUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ModUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ModUpsertBulk) SetUpdatedAt(v time.Time) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateUpdatedAt() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ModUpsertBulk) SetDeletedAt(v time.Time) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateDeletedAt() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ModUpsertBulk) ClearDeletedAt() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *ModUpsertBulk) SetName(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateName() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateName()
	})
}

// SetShortDescription sets the "short_description" field.
func (u *ModUpsertBulk) SetShortDescription(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetShortDescription(v)
	})
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateShortDescription() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateShortDescription()
	})
}

// SetFullDescription sets the "full_description" field.
func (u *ModUpsertBulk) SetFullDescription(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetFullDescription(v)
	})
}

// UpdateFullDescription sets the "full_description" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateFullDescription() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateFullDescription()
	})
}

// SetLogo sets the "logo" field.
func (u *ModUpsertBulk) SetLogo(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetLogo(v)
	})
}

// UpdateLogo sets the "logo" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateLogo() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateLogo()
	})
}

// SetLogoThumbhash sets the "logo_thumbhash" field.
func (u *ModUpsertBulk) SetLogoThumbhash(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetLogoThumbhash(v)
	})
}

// UpdateLogoThumbhash sets the "logo_thumbhash" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateLogoThumbhash() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateLogoThumbhash()
	})
}

// ClearLogoThumbhash clears the value of the "logo_thumbhash" field.
func (u *ModUpsertBulk) ClearLogoThumbhash() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.ClearLogoThumbhash()
	})
}

// SetSourceURL sets the "source_url" field.
func (u *ModUpsertBulk) SetSourceURL(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetSourceURL(v)
	})
}

// UpdateSourceURL sets the "source_url" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateSourceURL() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateSourceURL()
	})
}

// ClearSourceURL clears the value of the "source_url" field.
func (u *ModUpsertBulk) ClearSourceURL() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.ClearSourceURL()
	})
}

// SetCreatorID sets the "creator_id" field.
func (u *ModUpsertBulk) SetCreatorID(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetCreatorID(v)
	})
}

// UpdateCreatorID sets the "creator_id" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateCreatorID() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateCreatorID()
	})
}

// SetApproved sets the "approved" field.
func (u *ModUpsertBulk) SetApproved(v bool) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetApproved(v)
	})
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateApproved() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateApproved()
	})
}

// SetViews sets the "views" field.
func (u *ModUpsertBulk) SetViews(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *ModUpsertBulk) AddViews(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateViews() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateViews()
	})
}

// SetHotness sets the "hotness" field.
func (u *ModUpsertBulk) SetHotness(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetHotness(v)
	})
}

// AddHotness adds v to the "hotness" field.
func (u *ModUpsertBulk) AddHotness(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.AddHotness(v)
	})
}

// UpdateHotness sets the "hotness" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateHotness() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateHotness()
	})
}

// SetPopularity sets the "popularity" field.
func (u *ModUpsertBulk) SetPopularity(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetPopularity(v)
	})
}

// AddPopularity adds v to the "popularity" field.
func (u *ModUpsertBulk) AddPopularity(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.AddPopularity(v)
	})
}

// UpdatePopularity sets the "popularity" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdatePopularity() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdatePopularity()
	})
}

// SetDownloads sets the "downloads" field.
func (u *ModUpsertBulk) SetDownloads(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetDownloads(v)
	})
}

// AddDownloads adds v to the "downloads" field.
func (u *ModUpsertBulk) AddDownloads(v uint) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.AddDownloads(v)
	})
}

// UpdateDownloads sets the "downloads" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateDownloads() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateDownloads()
	})
}

// SetDenied sets the "denied" field.
func (u *ModUpsertBulk) SetDenied(v bool) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetDenied(v)
	})
}

// UpdateDenied sets the "denied" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateDenied() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateDenied()
	})
}

// SetLastVersionDate sets the "last_version_date" field.
func (u *ModUpsertBulk) SetLastVersionDate(v time.Time) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetLastVersionDate(v)
	})
}

// UpdateLastVersionDate sets the "last_version_date" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateLastVersionDate() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateLastVersionDate()
	})
}

// ClearLastVersionDate clears the value of the "last_version_date" field.
func (u *ModUpsertBulk) ClearLastVersionDate() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.ClearLastVersionDate()
	})
}

// SetModReference sets the "mod_reference" field.
func (u *ModUpsertBulk) SetModReference(v string) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetModReference(v)
	})
}

// UpdateModReference sets the "mod_reference" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateModReference() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateModReference()
	})
}

// SetHidden sets the "hidden" field.
func (u *ModUpsertBulk) SetHidden(v bool) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetHidden(v)
	})
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateHidden() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateHidden()
	})
}

// SetCompatibility sets the "compatibility" field.
func (u *ModUpsertBulk) SetCompatibility(v *util.CompatibilityInfo) *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.SetCompatibility(v)
	})
}

// UpdateCompatibility sets the "compatibility" field to the value that was provided on create.
func (u *ModUpsertBulk) UpdateCompatibility() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.UpdateCompatibility()
	})
}

// ClearCompatibility clears the value of the "compatibility" field.
func (u *ModUpsertBulk) ClearCompatibility() *ModUpsertBulk {
	return u.Update(func(s *ModUpsert) {
		s.ClearCompatibility()
	})
}

// Exec executes the query.
func (u *ModUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ModCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ModCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ModUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
