// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/db/postgres"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
)

// ModCreate is the builder for creating a Mod entity.
type ModCreate struct {
	config
	mutation *ModMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mc *ModCreate) SetCreatedAt(t time.Time) *ModCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *ModCreate) SetNillableCreatedAt(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *ModCreate) SetUpdatedAt(t time.Time) *ModCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *ModCreate) SetNillableUpdatedAt(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *ModCreate) SetDeletedAt(t time.Time) *ModCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *ModCreate) SetNillableDeletedAt(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *ModCreate) SetName(s string) *ModCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetShortDescription sets the "short_description" field.
func (mc *ModCreate) SetShortDescription(s string) *ModCreate {
	mc.mutation.SetShortDescription(s)
	return mc
}

// SetFullDescription sets the "full_description" field.
func (mc *ModCreate) SetFullDescription(s string) *ModCreate {
	mc.mutation.SetFullDescription(s)
	return mc
}

// SetLogo sets the "logo" field.
func (mc *ModCreate) SetLogo(s string) *ModCreate {
	mc.mutation.SetLogo(s)
	return mc
}

// SetSourceURL sets the "source_url" field.
func (mc *ModCreate) SetSourceURL(s string) *ModCreate {
	mc.mutation.SetSourceURL(s)
	return mc
}

// SetCreatorID sets the "creator_id" field.
func (mc *ModCreate) SetCreatorID(s string) *ModCreate {
	mc.mutation.SetCreatorID(s)
	return mc
}

// SetApproved sets the "approved" field.
func (mc *ModCreate) SetApproved(b bool) *ModCreate {
	mc.mutation.SetApproved(b)
	return mc
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (mc *ModCreate) SetNillableApproved(b *bool) *ModCreate {
	if b != nil {
		mc.SetApproved(*b)
	}
	return mc
}

// SetViews sets the "views" field.
func (mc *ModCreate) SetViews(u uint) *ModCreate {
	mc.mutation.SetViews(u)
	return mc
}

// SetHotness sets the "hotness" field.
func (mc *ModCreate) SetHotness(u uint) *ModCreate {
	mc.mutation.SetHotness(u)
	return mc
}

// SetPopularity sets the "popularity" field.
func (mc *ModCreate) SetPopularity(u uint) *ModCreate {
	mc.mutation.SetPopularity(u)
	return mc
}

// SetDownloads sets the "downloads" field.
func (mc *ModCreate) SetDownloads(u uint) *ModCreate {
	mc.mutation.SetDownloads(u)
	return mc
}

// SetDenied sets the "denied" field.
func (mc *ModCreate) SetDenied(b bool) *ModCreate {
	mc.mutation.SetDenied(b)
	return mc
}

// SetNillableDenied sets the "denied" field if the given value is not nil.
func (mc *ModCreate) SetNillableDenied(b *bool) *ModCreate {
	if b != nil {
		mc.SetDenied(*b)
	}
	return mc
}

// SetLastVersionDate sets the "last_version_date" field.
func (mc *ModCreate) SetLastVersionDate(t time.Time) *ModCreate {
	mc.mutation.SetLastVersionDate(t)
	return mc
}

// SetModReference sets the "mod_reference" field.
func (mc *ModCreate) SetModReference(s string) *ModCreate {
	mc.mutation.SetModReference(s)
	return mc
}

// SetHidden sets the "hidden" field.
func (mc *ModCreate) SetHidden(b bool) *ModCreate {
	mc.mutation.SetHidden(b)
	return mc
}

// SetCompatibility sets the "compatibility" field.
func (mc *ModCreate) SetCompatibility(pi *postgres.CompatibilityInfo) *ModCreate {
	mc.mutation.SetCompatibility(pi)
	return mc
}

// SetID sets the "id" field.
func (mc *ModCreate) SetID(s string) *ModCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *ModCreate) SetNillableID(s *string) *ModCreate {
	if s != nil {
		mc.SetID(*s)
	}
	return mc
}

// AddVersionIDs adds the "versions" edge to the Version entity by IDs.
func (mc *ModCreate) AddVersionIDs(ids ...string) *ModCreate {
	mc.mutation.AddVersionIDs(ids...)
	return mc
}

// AddVersions adds the "versions" edges to the Version entity.
func (mc *ModCreate) AddVersions(v ...*Version) *ModCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mc.AddVersionIDs(ids...)
}

// AddAuthorIDs adds the "authors" edge to the User entity by IDs.
func (mc *ModCreate) AddAuthorIDs(ids ...string) *ModCreate {
	mc.mutation.AddAuthorIDs(ids...)
	return mc
}

// AddAuthors adds the "authors" edges to the User entity.
func (mc *ModCreate) AddAuthors(u ...*User) *ModCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mc.AddAuthorIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (mc *ModCreate) AddTagIDs(ids ...string) *ModCreate {
	mc.mutation.AddTagIDs(ids...)
	return mc
}

// AddTags adds the "tags" edges to the Tag entity.
func (mc *ModCreate) AddTags(t ...*Tag) *ModCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTagIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Version entity by IDs.
func (mc *ModCreate) AddDependentIDs(ids ...string) *ModCreate {
	mc.mutation.AddDependentIDs(ids...)
	return mc
}

// AddDependents adds the "dependents" edges to the Version entity.
func (mc *ModCreate) AddDependents(v ...*Version) *ModCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return mc.AddDependentIDs(ids...)
}

// Mutation returns the ModMutation object of the builder.
func (mc *ModCreate) Mutation() *ModMutation {
	return mc.mutation
}

// Save creates the Mod in the database.
func (mc *ModCreate) Save(ctx context.Context) (*Mod, error) {
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModCreate) SaveX(ctx context.Context) *Mod {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ModCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ModCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *ModCreate) defaults() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if mod.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized mod.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := mod.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if mod.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mod.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mod.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.Approved(); !ok {
		v := mod.DefaultApproved
		mc.mutation.SetApproved(v)
	}
	if _, ok := mc.mutation.Denied(); !ok {
		v := mod.DefaultDenied
		mc.mutation.SetDenied(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		if mod.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized mod.DefaultID (forgotten import ent/runtime?)")
		}
		v := mod.DefaultID()
		mc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *ModCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Mod.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Mod.updated_at"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Mod.name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := mod.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Mod.name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.ShortDescription(); !ok {
		return &ValidationError{Name: "short_description", err: errors.New(`ent: missing required field "Mod.short_description"`)}
	}
	if v, ok := mc.mutation.ShortDescription(); ok {
		if err := mod.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "Mod.short_description": %w`, err)}
		}
	}
	if _, ok := mc.mutation.FullDescription(); !ok {
		return &ValidationError{Name: "full_description", err: errors.New(`ent: missing required field "Mod.full_description"`)}
	}
	if _, ok := mc.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`ent: missing required field "Mod.logo"`)}
	}
	if _, ok := mc.mutation.SourceURL(); !ok {
		return &ValidationError{Name: "source_url", err: errors.New(`ent: missing required field "Mod.source_url"`)}
	}
	if _, ok := mc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "Mod.creator_id"`)}
	}
	if _, ok := mc.mutation.Approved(); !ok {
		return &ValidationError{Name: "approved", err: errors.New(`ent: missing required field "Mod.approved"`)}
	}
	if _, ok := mc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "Mod.views"`)}
	}
	if _, ok := mc.mutation.Hotness(); !ok {
		return &ValidationError{Name: "hotness", err: errors.New(`ent: missing required field "Mod.hotness"`)}
	}
	if _, ok := mc.mutation.Popularity(); !ok {
		return &ValidationError{Name: "popularity", err: errors.New(`ent: missing required field "Mod.popularity"`)}
	}
	if _, ok := mc.mutation.Downloads(); !ok {
		return &ValidationError{Name: "downloads", err: errors.New(`ent: missing required field "Mod.downloads"`)}
	}
	if _, ok := mc.mutation.Denied(); !ok {
		return &ValidationError{Name: "denied", err: errors.New(`ent: missing required field "Mod.denied"`)}
	}
	if _, ok := mc.mutation.LastVersionDate(); !ok {
		return &ValidationError{Name: "last_version_date", err: errors.New(`ent: missing required field "Mod.last_version_date"`)}
	}
	if _, ok := mc.mutation.ModReference(); !ok {
		return &ValidationError{Name: "mod_reference", err: errors.New(`ent: missing required field "Mod.mod_reference"`)}
	}
	if v, ok := mc.mutation.ModReference(); ok {
		if err := mod.ModReferenceValidator(v); err != nil {
			return &ValidationError{Name: "mod_reference", err: fmt.Errorf(`ent: validator failed for field "Mod.mod_reference": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Hidden(); !ok {
		return &ValidationError{Name: "hidden", err: errors.New(`ent: missing required field "Mod.hidden"`)}
	}
	if _, ok := mc.mutation.Compatibility(); !ok {
		return &ValidationError{Name: "compatibility", err: errors.New(`ent: missing required field "Mod.compatibility"`)}
	}
	return nil
}

func (mc *ModCreate) sqlSave(ctx context.Context) (*Mod, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Mod.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *ModCreate) createSpec() (*Mod, *sqlgraph.CreateSpec) {
	var (
		_node = &Mod{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mod.Table, sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(mod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(mod.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(mod.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(mod.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.ShortDescription(); ok {
		_spec.SetField(mod.FieldShortDescription, field.TypeString, value)
		_node.ShortDescription = value
	}
	if value, ok := mc.mutation.FullDescription(); ok {
		_spec.SetField(mod.FieldFullDescription, field.TypeString, value)
		_node.FullDescription = value
	}
	if value, ok := mc.mutation.Logo(); ok {
		_spec.SetField(mod.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := mc.mutation.SourceURL(); ok {
		_spec.SetField(mod.FieldSourceURL, field.TypeString, value)
		_node.SourceURL = value
	}
	if value, ok := mc.mutation.CreatorID(); ok {
		_spec.SetField(mod.FieldCreatorID, field.TypeString, value)
		_node.CreatorID = value
	}
	if value, ok := mc.mutation.Approved(); ok {
		_spec.SetField(mod.FieldApproved, field.TypeBool, value)
		_node.Approved = value
	}
	if value, ok := mc.mutation.Views(); ok {
		_spec.SetField(mod.FieldViews, field.TypeUint, value)
		_node.Views = value
	}
	if value, ok := mc.mutation.Hotness(); ok {
		_spec.SetField(mod.FieldHotness, field.TypeUint, value)
		_node.Hotness = value
	}
	if value, ok := mc.mutation.Popularity(); ok {
		_spec.SetField(mod.FieldPopularity, field.TypeUint, value)
		_node.Popularity = value
	}
	if value, ok := mc.mutation.Downloads(); ok {
		_spec.SetField(mod.FieldDownloads, field.TypeUint, value)
		_node.Downloads = value
	}
	if value, ok := mc.mutation.Denied(); ok {
		_spec.SetField(mod.FieldDenied, field.TypeBool, value)
		_node.Denied = value
	}
	if value, ok := mc.mutation.LastVersionDate(); ok {
		_spec.SetField(mod.FieldLastVersionDate, field.TypeTime, value)
		_node.LastVersionDate = value
	}
	if value, ok := mc.mutation.ModReference(); ok {
		_spec.SetField(mod.FieldModReference, field.TypeString, value)
		_node.ModReference = value
	}
	if value, ok := mc.mutation.Hidden(); ok {
		_spec.SetField(mod.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := mc.mutation.Compatibility(); ok {
		_spec.SetField(mod.FieldCompatibility, field.TypeJSON, value)
		_node.Compatibility = value
	}
	if nodes := mc.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.VersionsTable,
			Columns: []string{mod.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.AuthorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.AuthorsTable,
			Columns: mod.AuthorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mod.TagsTable,
			Columns: mod.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.DependentsTable,
			Columns: mod.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &VersionDependencyCreate{config: mc.config, mutation: newVersionDependencyMutation(mc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModCreateBulk is the builder for creating many Mod entities in bulk.
type ModCreateBulk struct {
	config
	err      error
	builders []*ModCreate
}

// Save creates the Mod entities in the database.
func (mcb *ModCreateBulk) Save(ctx context.Context) ([]*Mod, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mod, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ModCreateBulk) SaveX(ctx context.Context) []*Mod {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ModCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ModCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
