// Code generated by ent, DO NOT EDIT.

package virustotalresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// Safe applies equality check predicate on the "safe" field. It's identical to SafeEQ.
func Safe(v bool) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldSafe, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldHash, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldFileName, v))
}

// VersionID applies equality check predicate on the "version_id" field. It's identical to VersionIDEQ.
func VersionID(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldVersionID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLTE(FieldUpdatedAt, v))
}

// SafeEQ applies the EQ predicate on the "safe" field.
func SafeEQ(v bool) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldSafe, v))
}

// SafeNEQ applies the NEQ predicate on the "safe" field.
func SafeNEQ(v bool) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNEQ(FieldSafe, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldContainsFold(FieldHash, v))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldContainsFold(FieldFileName, v))
}

// VersionIDEQ applies the EQ predicate on the "version_id" field.
func VersionIDEQ(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEQ(FieldVersionID, v))
}

// VersionIDNEQ applies the NEQ predicate on the "version_id" field.
func VersionIDNEQ(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNEQ(FieldVersionID, v))
}

// VersionIDIn applies the In predicate on the "version_id" field.
func VersionIDIn(vs ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldIn(FieldVersionID, vs...))
}

// VersionIDNotIn applies the NotIn predicate on the "version_id" field.
func VersionIDNotIn(vs ...string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldNotIn(FieldVersionID, vs...))
}

// VersionIDGT applies the GT predicate on the "version_id" field.
func VersionIDGT(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGT(FieldVersionID, v))
}

// VersionIDGTE applies the GTE predicate on the "version_id" field.
func VersionIDGTE(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldGTE(FieldVersionID, v))
}

// VersionIDLT applies the LT predicate on the "version_id" field.
func VersionIDLT(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLT(FieldVersionID, v))
}

// VersionIDLTE applies the LTE predicate on the "version_id" field.
func VersionIDLTE(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldLTE(FieldVersionID, v))
}

// VersionIDContains applies the Contains predicate on the "version_id" field.
func VersionIDContains(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldContains(FieldVersionID, v))
}

// VersionIDHasPrefix applies the HasPrefix predicate on the "version_id" field.
func VersionIDHasPrefix(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldHasPrefix(FieldVersionID, v))
}

// VersionIDHasSuffix applies the HasSuffix predicate on the "version_id" field.
func VersionIDHasSuffix(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldHasSuffix(FieldVersionID, v))
}

// VersionIDEqualFold applies the EqualFold predicate on the "version_id" field.
func VersionIDEqualFold(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldEqualFold(FieldVersionID, v))
}

// VersionIDContainsFold applies the ContainsFold predicate on the "version_id" field.
func VersionIDContainsFold(v string) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.FieldContainsFold(FieldVersionID, v))
}

// HasVersion applies the HasEdge predicate on the "version" edge.
func HasVersion() predicate.VirustotalResult {
	return predicate.VirustotalResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VersionTable, VersionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionWith applies the HasEdge predicate on the "version" edge with a given conditions (other predicates).
func HasVersionWith(preds ...predicate.Version) predicate.VirustotalResult {
	return predicate.VirustotalResult(func(s *sql.Selector) {
		step := newVersionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VirustotalResult) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VirustotalResult) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VirustotalResult) predicate.VirustotalResult {
	return predicate.VirustotalResult(sql.NotPredicates(p))
}
