// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/guide"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
)

// GuideCreate is the builder for creating a Guide entity.
type GuideCreate struct {
	config
	mutation *GuideMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gc *GuideCreate) SetCreatedAt(t time.Time) *GuideCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableCreatedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GuideCreate) SetUpdatedAt(t time.Time) *GuideCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableUpdatedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetDeletedAt sets the "deleted_at" field.
func (gc *GuideCreate) SetDeletedAt(t time.Time) *GuideCreate {
	gc.mutation.SetDeletedAt(t)
	return gc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableDeletedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetDeletedAt(*t)
	}
	return gc
}

// SetUserID sets the "user_id" field.
func (gc *GuideCreate) SetUserID(s string) *GuideCreate {
	gc.mutation.SetUserID(s)
	return gc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (gc *GuideCreate) SetNillableUserID(s *string) *GuideCreate {
	if s != nil {
		gc.SetUserID(*s)
	}
	return gc
}

// SetName sets the "name" field.
func (gc *GuideCreate) SetName(s string) *GuideCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetShortDescription sets the "short_description" field.
func (gc *GuideCreate) SetShortDescription(s string) *GuideCreate {
	gc.mutation.SetShortDescription(s)
	return gc
}

// SetGuide sets the "guide" field.
func (gc *GuideCreate) SetGuide(s string) *GuideCreate {
	gc.mutation.SetGuide(s)
	return gc
}

// SetViews sets the "views" field.
func (gc *GuideCreate) SetViews(i int) *GuideCreate {
	gc.mutation.SetViews(i)
	return gc
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (gc *GuideCreate) SetNillableViews(i *int) *GuideCreate {
	if i != nil {
		gc.SetViews(*i)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GuideCreate) SetID(s string) *GuideCreate {
	gc.mutation.SetID(s)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GuideCreate) SetNillableID(s *string) *GuideCreate {
	if s != nil {
		gc.SetID(*s)
	}
	return gc
}

// SetUser sets the "user" edge to the User entity.
func (gc *GuideCreate) SetUser(u *User) *GuideCreate {
	return gc.SetUserID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (gc *GuideCreate) AddTagIDs(ids ...string) *GuideCreate {
	gc.mutation.AddTagIDs(ids...)
	return gc
}

// AddTags adds the "tags" edges to the Tag entity.
func (gc *GuideCreate) AddTags(t ...*Tag) *GuideCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gc.AddTagIDs(ids...)
}

// Mutation returns the GuideMutation object of the builder.
func (gc *GuideCreate) Mutation() *GuideMutation {
	return gc.mutation
}

// Save creates the Guide in the database.
func (gc *GuideCreate) Save(ctx context.Context) (*Guide, error) {
	if err := gc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuideCreate) SaveX(ctx context.Context) *Guide {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GuideCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GuideCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GuideCreate) defaults() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		if guide.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized guide.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := guide.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		if guide.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized guide.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := guide.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.Views(); !ok {
		v := guide.DefaultViews
		gc.mutation.SetViews(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		if guide.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized guide.DefaultID (forgotten import ent/runtime?)")
		}
		v := guide.DefaultID()
		gc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gc *GuideCreate) check() error {
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Guide.name"`)}
	}
	if v, ok := gc.mutation.Name(); ok {
		if err := guide.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guide.name": %w`, err)}
		}
	}
	if _, ok := gc.mutation.ShortDescription(); !ok {
		return &ValidationError{Name: "short_description", err: errors.New(`ent: missing required field "Guide.short_description"`)}
	}
	if v, ok := gc.mutation.ShortDescription(); ok {
		if err := guide.ShortDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "short_description", err: fmt.Errorf(`ent: validator failed for field "Guide.short_description": %w`, err)}
		}
	}
	if _, ok := gc.mutation.Guide(); !ok {
		return &ValidationError{Name: "guide", err: errors.New(`ent: missing required field "Guide.guide"`)}
	}
	if _, ok := gc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "Guide.views"`)}
	}
	return nil
}

func (gc *GuideCreate) sqlSave(ctx context.Context) (*Guide, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Guide.ID type: %T", _spec.ID.Value)
		}
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GuideCreate) createSpec() (*Guide, *sqlgraph.CreateSpec) {
	var (
		_node = &Guide{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(guide.Table, sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString))
	)
	_spec.OnConflict = gc.conflict
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(guide.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(guide.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.DeletedAt(); ok {
		_spec.SetField(guide.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(guide.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.ShortDescription(); ok {
		_spec.SetField(guide.FieldShortDescription, field.TypeString, value)
		_node.ShortDescription = value
	}
	if value, ok := gc.mutation.Guide(); ok {
		_spec.SetField(guide.FieldGuide, field.TypeString, value)
		_node.Guide = value
	}
	if value, ok := gc.mutation.Views(); ok {
		_spec.SetField(guide.FieldViews, field.TypeInt, value)
		_node.Views = value
	}
	if nodes := gc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.UserTable,
			Columns: []string{guide.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guide.TagsTable,
			Columns: guide.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Guide.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GuideUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gc *GuideCreate) OnConflict(opts ...sql.ConflictOption) *GuideUpsertOne {
	gc.conflict = opts
	return &GuideUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GuideCreate) OnConflictColumns(columns ...string) *GuideUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GuideUpsertOne{
		create: gc,
	}
}

type (
	// GuideUpsertOne is the builder for "upsert"-ing
	//  one Guide node.
	GuideUpsertOne struct {
		create *GuideCreate
	}

	// GuideUpsert is the "OnConflict" setter.
	GuideUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GuideUpsert) SetUpdatedAt(v time.Time) *GuideUpsert {
	u.Set(guide.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GuideUpsert) UpdateUpdatedAt() *GuideUpsert {
	u.SetExcluded(guide.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *GuideUpsert) ClearUpdatedAt() *GuideUpsert {
	u.SetNull(guide.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GuideUpsert) SetDeletedAt(v time.Time) *GuideUpsert {
	u.Set(guide.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GuideUpsert) UpdateDeletedAt() *GuideUpsert {
	u.SetExcluded(guide.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GuideUpsert) ClearDeletedAt() *GuideUpsert {
	u.SetNull(guide.FieldDeletedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GuideUpsert) SetUserID(v string) *GuideUpsert {
	u.Set(guide.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GuideUpsert) UpdateUserID() *GuideUpsert {
	u.SetExcluded(guide.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *GuideUpsert) ClearUserID() *GuideUpsert {
	u.SetNull(guide.FieldUserID)
	return u
}

// SetName sets the "name" field.
func (u *GuideUpsert) SetName(v string) *GuideUpsert {
	u.Set(guide.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuideUpsert) UpdateName() *GuideUpsert {
	u.SetExcluded(guide.FieldName)
	return u
}

// SetShortDescription sets the "short_description" field.
func (u *GuideUpsert) SetShortDescription(v string) *GuideUpsert {
	u.Set(guide.FieldShortDescription, v)
	return u
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *GuideUpsert) UpdateShortDescription() *GuideUpsert {
	u.SetExcluded(guide.FieldShortDescription)
	return u
}

// SetGuide sets the "guide" field.
func (u *GuideUpsert) SetGuide(v string) *GuideUpsert {
	u.Set(guide.FieldGuide, v)
	return u
}

// UpdateGuide sets the "guide" field to the value that was provided on create.
func (u *GuideUpsert) UpdateGuide() *GuideUpsert {
	u.SetExcluded(guide.FieldGuide)
	return u
}

// SetViews sets the "views" field.
func (u *GuideUpsert) SetViews(v int) *GuideUpsert {
	u.Set(guide.FieldViews, v)
	return u
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *GuideUpsert) UpdateViews() *GuideUpsert {
	u.SetExcluded(guide.FieldViews)
	return u
}

// AddViews adds v to the "views" field.
func (u *GuideUpsert) AddViews(v int) *GuideUpsert {
	u.Add(guide.FieldViews, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(guide.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GuideUpsertOne) UpdateNewValues() *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(guide.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(guide.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Guide.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GuideUpsertOne) Ignore() *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GuideUpsertOne) DoNothing() *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GuideCreate.OnConflict
// documentation for more info.
func (u *GuideUpsertOne) Update(set func(*GuideUpsert)) *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GuideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GuideUpsertOne) SetUpdatedAt(v time.Time) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateUpdatedAt() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *GuideUpsertOne) ClearUpdatedAt() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GuideUpsertOne) SetDeletedAt(v time.Time) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateDeletedAt() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GuideUpsertOne) ClearDeletedAt() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *GuideUpsertOne) SetUserID(v string) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateUserID() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GuideUpsertOne) ClearUserID() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.ClearUserID()
	})
}

// SetName sets the "name" field.
func (u *GuideUpsertOne) SetName(v string) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateName() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateName()
	})
}

// SetShortDescription sets the "short_description" field.
func (u *GuideUpsertOne) SetShortDescription(v string) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetShortDescription(v)
	})
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateShortDescription() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateShortDescription()
	})
}

// SetGuide sets the "guide" field.
func (u *GuideUpsertOne) SetGuide(v string) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetGuide(v)
	})
}

// UpdateGuide sets the "guide" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateGuide() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateGuide()
	})
}

// SetViews sets the "views" field.
func (u *GuideUpsertOne) SetViews(v int) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *GuideUpsertOne) AddViews(v int) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateViews() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateViews()
	})
}

// Exec executes the query.
func (u *GuideUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GuideCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GuideUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GuideUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GuideUpsertOne.ID is not supported by MySQL driver. Use GuideUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GuideUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GuideCreateBulk is the builder for creating many Guide entities in bulk.
type GuideCreateBulk struct {
	config
	err      error
	builders []*GuideCreate
	conflict []sql.ConflictOption
}

// Save creates the Guide entities in the database.
func (gcb *GuideCreateBulk) Save(ctx context.Context) ([]*Guide, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Guide, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GuideCreateBulk) SaveX(ctx context.Context) []*Guide {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GuideCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GuideCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Guide.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GuideUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gcb *GuideCreateBulk) OnConflict(opts ...sql.ConflictOption) *GuideUpsertBulk {
	gcb.conflict = opts
	return &GuideUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GuideCreateBulk) OnConflictColumns(columns ...string) *GuideUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GuideUpsertBulk{
		create: gcb,
	}
}

// GuideUpsertBulk is the builder for "upsert"-ing
// a bulk of Guide nodes.
type GuideUpsertBulk struct {
	create *GuideCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(guide.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GuideUpsertBulk) UpdateNewValues() *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(guide.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(guide.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GuideUpsertBulk) Ignore() *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GuideUpsertBulk) DoNothing() *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GuideCreateBulk.OnConflict
// documentation for more info.
func (u *GuideUpsertBulk) Update(set func(*GuideUpsert)) *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GuideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GuideUpsertBulk) SetUpdatedAt(v time.Time) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateUpdatedAt() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *GuideUpsertBulk) ClearUpdatedAt() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GuideUpsertBulk) SetDeletedAt(v time.Time) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateDeletedAt() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GuideUpsertBulk) ClearDeletedAt() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *GuideUpsertBulk) SetUserID(v string) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateUserID() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *GuideUpsertBulk) ClearUserID() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.ClearUserID()
	})
}

// SetName sets the "name" field.
func (u *GuideUpsertBulk) SetName(v string) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateName() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateName()
	})
}

// SetShortDescription sets the "short_description" field.
func (u *GuideUpsertBulk) SetShortDescription(v string) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetShortDescription(v)
	})
}

// UpdateShortDescription sets the "short_description" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateShortDescription() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateShortDescription()
	})
}

// SetGuide sets the "guide" field.
func (u *GuideUpsertBulk) SetGuide(v string) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetGuide(v)
	})
}

// UpdateGuide sets the "guide" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateGuide() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateGuide()
	})
}

// SetViews sets the "views" field.
func (u *GuideUpsertBulk) SetViews(v int) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *GuideUpsertBulk) AddViews(v int) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateViews() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateViews()
	})
}

// Exec executes the query.
func (u *GuideUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GuideCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GuideCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GuideUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
