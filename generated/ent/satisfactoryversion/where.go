// Code generated by ent, DO NOT EDIT.

package satisfactoryversion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldDeletedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldVersion, v))
}

// EngineVersion applies equality check predicate on the "engine_version" field. It's identical to EngineVersionEQ.
func EngineVersion(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldEngineVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNotNull(FieldDeletedAt))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLTE(FieldVersion, v))
}

// EngineVersionEQ applies the EQ predicate on the "engine_version" field.
func EngineVersionEQ(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEQ(FieldEngineVersion, v))
}

// EngineVersionNEQ applies the NEQ predicate on the "engine_version" field.
func EngineVersionNEQ(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNEQ(FieldEngineVersion, v))
}

// EngineVersionIn applies the In predicate on the "engine_version" field.
func EngineVersionIn(vs ...string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldIn(FieldEngineVersion, vs...))
}

// EngineVersionNotIn applies the NotIn predicate on the "engine_version" field.
func EngineVersionNotIn(vs ...string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldNotIn(FieldEngineVersion, vs...))
}

// EngineVersionGT applies the GT predicate on the "engine_version" field.
func EngineVersionGT(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGT(FieldEngineVersion, v))
}

// EngineVersionGTE applies the GTE predicate on the "engine_version" field.
func EngineVersionGTE(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldGTE(FieldEngineVersion, v))
}

// EngineVersionLT applies the LT predicate on the "engine_version" field.
func EngineVersionLT(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLT(FieldEngineVersion, v))
}

// EngineVersionLTE applies the LTE predicate on the "engine_version" field.
func EngineVersionLTE(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldLTE(FieldEngineVersion, v))
}

// EngineVersionContains applies the Contains predicate on the "engine_version" field.
func EngineVersionContains(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldContains(FieldEngineVersion, v))
}

// EngineVersionHasPrefix applies the HasPrefix predicate on the "engine_version" field.
func EngineVersionHasPrefix(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldHasPrefix(FieldEngineVersion, v))
}

// EngineVersionHasSuffix applies the HasSuffix predicate on the "engine_version" field.
func EngineVersionHasSuffix(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldHasSuffix(FieldEngineVersion, v))
}

// EngineVersionEqualFold applies the EqualFold predicate on the "engine_version" field.
func EngineVersionEqualFold(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldEqualFold(FieldEngineVersion, v))
}

// EngineVersionContainsFold applies the ContainsFold predicate on the "engine_version" field.
func EngineVersionContainsFold(v string) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.FieldContainsFold(FieldEngineVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SatisfactoryVersion) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SatisfactoryVersion) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SatisfactoryVersion) predicate.SatisfactoryVersion {
	return predicate.SatisfactoryVersion(sql.NotPredicates(p))
}
