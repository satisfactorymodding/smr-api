// Code generated by ent, DO NOT EDIT.

package satisfactoryversion

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the satisfactoryversion type in the database.
	Label = "satisfactory_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldEngineVersion holds the string denoting the engine_version field in the database.
	FieldEngineVersion = "engine_version"
	// Table holds the table name of the satisfactoryversion in the database.
	Table = "satisfactory_versions"
)

// Columns holds all SQL columns for satisfactoryversion fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldEngineVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEngineVersion holds the default value on creation for the "engine_version" field.
	DefaultEngineVersion string
	// EngineVersionValidator is a validator for the "engine_version" field. It is called by the builders before save.
	EngineVersionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the SatisfactoryVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByEngineVersion orders the results by the engine_version field.
func ByEngineVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEngineVersion, opts...).ToFunc()
}
