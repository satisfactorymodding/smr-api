// Code generated by ent, DO NOT EDIT.

package version

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/util"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldDeletedAt, v))
}

// ModID applies equality check predicate on the "mod_id" field. It's identical to ModIDEQ.
func ModID(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldModID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersion, v))
}

// GameVersion applies equality check predicate on the "game_version" field. It's identical to GameVersionEQ.
func GameVersion(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldGameVersion, v))
}

// Changelog applies equality check predicate on the "changelog" field. It's identical to ChangelogEQ.
func Changelog(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldChangelog, v))
}

// Downloads applies equality check predicate on the "downloads" field. It's identical to DownloadsEQ.
func Downloads(v uint) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldDownloads, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldKey, v))
}

// Approved applies equality check predicate on the "approved" field. It's identical to ApprovedEQ.
func Approved(v bool) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldApproved, v))
}

// Hotness applies equality check predicate on the "hotness" field. It's identical to HotnessEQ.
func Hotness(v uint) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldHotness, v))
}

// Denied applies equality check predicate on the "denied" field. It's identical to DeniedEQ.
func Denied(v bool) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldDenied, v))
}

// Metadata applies equality check predicate on the "metadata" field. It's identical to MetadataEQ.
func Metadata(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldMetadata, v))
}

// ModReference applies equality check predicate on the "mod_reference" field. It's identical to ModReferenceEQ.
func ModReference(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldModReference, v))
}

// VersionMajor applies equality check predicate on the "version_major" field. It's identical to VersionMajorEQ.
func VersionMajor(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersionMajor, v))
}

// VersionMinor applies equality check predicate on the "version_minor" field. It's identical to VersionMinorEQ.
func VersionMinor(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersionMinor, v))
}

// VersionPatch applies equality check predicate on the "version_patch" field. It's identical to VersionPatchEQ.
func VersionPatch(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersionPatch, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int64) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldSize, v))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldDeletedAt))
}

// ModIDEQ applies the EQ predicate on the "mod_id" field.
func ModIDEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldModID, v))
}

// ModIDNEQ applies the NEQ predicate on the "mod_id" field.
func ModIDNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldModID, v))
}

// ModIDIn applies the In predicate on the "mod_id" field.
func ModIDIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldModID, vs...))
}

// ModIDNotIn applies the NotIn predicate on the "mod_id" field.
func ModIDNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldModID, vs...))
}

// ModIDGT applies the GT predicate on the "mod_id" field.
func ModIDGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldModID, v))
}

// ModIDGTE applies the GTE predicate on the "mod_id" field.
func ModIDGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldModID, v))
}

// ModIDLT applies the LT predicate on the "mod_id" field.
func ModIDLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldModID, v))
}

// ModIDLTE applies the LTE predicate on the "mod_id" field.
func ModIDLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldModID, v))
}

// ModIDContains applies the Contains predicate on the "mod_id" field.
func ModIDContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldModID, v))
}

// ModIDHasPrefix applies the HasPrefix predicate on the "mod_id" field.
func ModIDHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldModID, v))
}

// ModIDHasSuffix applies the HasSuffix predicate on the "mod_id" field.
func ModIDHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldModID, v))
}

// ModIDEqualFold applies the EqualFold predicate on the "mod_id" field.
func ModIDEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldModID, v))
}

// ModIDContainsFold applies the ContainsFold predicate on the "mod_id" field.
func ModIDContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldModID, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldVersion, v))
}

// GameVersionEQ applies the EQ predicate on the "game_version" field.
func GameVersionEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldGameVersion, v))
}

// GameVersionNEQ applies the NEQ predicate on the "game_version" field.
func GameVersionNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldGameVersion, v))
}

// GameVersionIn applies the In predicate on the "game_version" field.
func GameVersionIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldGameVersion, vs...))
}

// GameVersionNotIn applies the NotIn predicate on the "game_version" field.
func GameVersionNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldGameVersion, vs...))
}

// GameVersionGT applies the GT predicate on the "game_version" field.
func GameVersionGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldGameVersion, v))
}

// GameVersionGTE applies the GTE predicate on the "game_version" field.
func GameVersionGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldGameVersion, v))
}

// GameVersionLT applies the LT predicate on the "game_version" field.
func GameVersionLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldGameVersion, v))
}

// GameVersionLTE applies the LTE predicate on the "game_version" field.
func GameVersionLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldGameVersion, v))
}

// GameVersionContains applies the Contains predicate on the "game_version" field.
func GameVersionContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldGameVersion, v))
}

// GameVersionHasPrefix applies the HasPrefix predicate on the "game_version" field.
func GameVersionHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldGameVersion, v))
}

// GameVersionHasSuffix applies the HasSuffix predicate on the "game_version" field.
func GameVersionHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldGameVersion, v))
}

// GameVersionEqualFold applies the EqualFold predicate on the "game_version" field.
func GameVersionEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldGameVersion, v))
}

// GameVersionContainsFold applies the ContainsFold predicate on the "game_version" field.
func GameVersionContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldGameVersion, v))
}

// ChangelogEQ applies the EQ predicate on the "changelog" field.
func ChangelogEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldChangelog, v))
}

// ChangelogNEQ applies the NEQ predicate on the "changelog" field.
func ChangelogNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldChangelog, v))
}

// ChangelogIn applies the In predicate on the "changelog" field.
func ChangelogIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldChangelog, vs...))
}

// ChangelogNotIn applies the NotIn predicate on the "changelog" field.
func ChangelogNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldChangelog, vs...))
}

// ChangelogGT applies the GT predicate on the "changelog" field.
func ChangelogGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldChangelog, v))
}

// ChangelogGTE applies the GTE predicate on the "changelog" field.
func ChangelogGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldChangelog, v))
}

// ChangelogLT applies the LT predicate on the "changelog" field.
func ChangelogLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldChangelog, v))
}

// ChangelogLTE applies the LTE predicate on the "changelog" field.
func ChangelogLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldChangelog, v))
}

// ChangelogContains applies the Contains predicate on the "changelog" field.
func ChangelogContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldChangelog, v))
}

// ChangelogHasPrefix applies the HasPrefix predicate on the "changelog" field.
func ChangelogHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldChangelog, v))
}

// ChangelogHasSuffix applies the HasSuffix predicate on the "changelog" field.
func ChangelogHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldChangelog, v))
}

// ChangelogIsNil applies the IsNil predicate on the "changelog" field.
func ChangelogIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldChangelog))
}

// ChangelogNotNil applies the NotNil predicate on the "changelog" field.
func ChangelogNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldChangelog))
}

// ChangelogEqualFold applies the EqualFold predicate on the "changelog" field.
func ChangelogEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldChangelog, v))
}

// ChangelogContainsFold applies the ContainsFold predicate on the "changelog" field.
func ChangelogContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldChangelog, v))
}

// DownloadsEQ applies the EQ predicate on the "downloads" field.
func DownloadsEQ(v uint) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldDownloads, v))
}

// DownloadsNEQ applies the NEQ predicate on the "downloads" field.
func DownloadsNEQ(v uint) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldDownloads, v))
}

// DownloadsIn applies the In predicate on the "downloads" field.
func DownloadsIn(vs ...uint) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldDownloads, vs...))
}

// DownloadsNotIn applies the NotIn predicate on the "downloads" field.
func DownloadsNotIn(vs ...uint) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldDownloads, vs...))
}

// DownloadsGT applies the GT predicate on the "downloads" field.
func DownloadsGT(v uint) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldDownloads, v))
}

// DownloadsGTE applies the GTE predicate on the "downloads" field.
func DownloadsGTE(v uint) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldDownloads, v))
}

// DownloadsLT applies the LT predicate on the "downloads" field.
func DownloadsLT(v uint) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldDownloads, v))
}

// DownloadsLTE applies the LTE predicate on the "downloads" field.
func DownloadsLTE(v uint) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldDownloads, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldKey, v))
}

// KeyIsNil applies the IsNil predicate on the "key" field.
func KeyIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldKey))
}

// KeyNotNil applies the NotNil predicate on the "key" field.
func KeyNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldKey))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldKey, v))
}

// StabilityEQ applies the EQ predicate on the "stability" field.
func StabilityEQ(v util.Stability) predicate.Version {
	vc := v
	return predicate.Version(sql.FieldEQ(FieldStability, vc))
}

// StabilityNEQ applies the NEQ predicate on the "stability" field.
func StabilityNEQ(v util.Stability) predicate.Version {
	vc := v
	return predicate.Version(sql.FieldNEQ(FieldStability, vc))
}

// StabilityIn applies the In predicate on the "stability" field.
func StabilityIn(vs ...util.Stability) predicate.Version {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(sql.FieldIn(FieldStability, v...))
}

// StabilityNotIn applies the NotIn predicate on the "stability" field.
func StabilityNotIn(vs ...util.Stability) predicate.Version {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Version(sql.FieldNotIn(FieldStability, v...))
}

// ApprovedEQ applies the EQ predicate on the "approved" field.
func ApprovedEQ(v bool) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldApproved, v))
}

// ApprovedNEQ applies the NEQ predicate on the "approved" field.
func ApprovedNEQ(v bool) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldApproved, v))
}

// HotnessEQ applies the EQ predicate on the "hotness" field.
func HotnessEQ(v uint) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldHotness, v))
}

// HotnessNEQ applies the NEQ predicate on the "hotness" field.
func HotnessNEQ(v uint) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldHotness, v))
}

// HotnessIn applies the In predicate on the "hotness" field.
func HotnessIn(vs ...uint) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldHotness, vs...))
}

// HotnessNotIn applies the NotIn predicate on the "hotness" field.
func HotnessNotIn(vs ...uint) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldHotness, vs...))
}

// HotnessGT applies the GT predicate on the "hotness" field.
func HotnessGT(v uint) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldHotness, v))
}

// HotnessGTE applies the GTE predicate on the "hotness" field.
func HotnessGTE(v uint) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldHotness, v))
}

// HotnessLT applies the LT predicate on the "hotness" field.
func HotnessLT(v uint) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldHotness, v))
}

// HotnessLTE applies the LTE predicate on the "hotness" field.
func HotnessLTE(v uint) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldHotness, v))
}

// DeniedEQ applies the EQ predicate on the "denied" field.
func DeniedEQ(v bool) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldDenied, v))
}

// DeniedNEQ applies the NEQ predicate on the "denied" field.
func DeniedNEQ(v bool) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldDenied, v))
}

// MetadataEQ applies the EQ predicate on the "metadata" field.
func MetadataEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldMetadata, v))
}

// MetadataNEQ applies the NEQ predicate on the "metadata" field.
func MetadataNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldMetadata, v))
}

// MetadataIn applies the In predicate on the "metadata" field.
func MetadataIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldMetadata, vs...))
}

// MetadataNotIn applies the NotIn predicate on the "metadata" field.
func MetadataNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldMetadata, vs...))
}

// MetadataGT applies the GT predicate on the "metadata" field.
func MetadataGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldMetadata, v))
}

// MetadataGTE applies the GTE predicate on the "metadata" field.
func MetadataGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldMetadata, v))
}

// MetadataLT applies the LT predicate on the "metadata" field.
func MetadataLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldMetadata, v))
}

// MetadataLTE applies the LTE predicate on the "metadata" field.
func MetadataLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldMetadata, v))
}

// MetadataContains applies the Contains predicate on the "metadata" field.
func MetadataContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldMetadata, v))
}

// MetadataHasPrefix applies the HasPrefix predicate on the "metadata" field.
func MetadataHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldMetadata, v))
}

// MetadataHasSuffix applies the HasSuffix predicate on the "metadata" field.
func MetadataHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldMetadata, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldMetadata))
}

// MetadataEqualFold applies the EqualFold predicate on the "metadata" field.
func MetadataEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldMetadata, v))
}

// MetadataContainsFold applies the ContainsFold predicate on the "metadata" field.
func MetadataContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldMetadata, v))
}

// ModReferenceEQ applies the EQ predicate on the "mod_reference" field.
func ModReferenceEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldModReference, v))
}

// ModReferenceNEQ applies the NEQ predicate on the "mod_reference" field.
func ModReferenceNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldModReference, v))
}

// ModReferenceIn applies the In predicate on the "mod_reference" field.
func ModReferenceIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldModReference, vs...))
}

// ModReferenceNotIn applies the NotIn predicate on the "mod_reference" field.
func ModReferenceNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldModReference, vs...))
}

// ModReferenceGT applies the GT predicate on the "mod_reference" field.
func ModReferenceGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldModReference, v))
}

// ModReferenceGTE applies the GTE predicate on the "mod_reference" field.
func ModReferenceGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldModReference, v))
}

// ModReferenceLT applies the LT predicate on the "mod_reference" field.
func ModReferenceLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldModReference, v))
}

// ModReferenceLTE applies the LTE predicate on the "mod_reference" field.
func ModReferenceLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldModReference, v))
}

// ModReferenceContains applies the Contains predicate on the "mod_reference" field.
func ModReferenceContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldModReference, v))
}

// ModReferenceHasPrefix applies the HasPrefix predicate on the "mod_reference" field.
func ModReferenceHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldModReference, v))
}

// ModReferenceHasSuffix applies the HasSuffix predicate on the "mod_reference" field.
func ModReferenceHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldModReference, v))
}

// ModReferenceEqualFold applies the EqualFold predicate on the "mod_reference" field.
func ModReferenceEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldModReference, v))
}

// ModReferenceContainsFold applies the ContainsFold predicate on the "mod_reference" field.
func ModReferenceContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldModReference, v))
}

// VersionMajorEQ applies the EQ predicate on the "version_major" field.
func VersionMajorEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersionMajor, v))
}

// VersionMajorNEQ applies the NEQ predicate on the "version_major" field.
func VersionMajorNEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldVersionMajor, v))
}

// VersionMajorIn applies the In predicate on the "version_major" field.
func VersionMajorIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldVersionMajor, vs...))
}

// VersionMajorNotIn applies the NotIn predicate on the "version_major" field.
func VersionMajorNotIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldVersionMajor, vs...))
}

// VersionMajorGT applies the GT predicate on the "version_major" field.
func VersionMajorGT(v int) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldVersionMajor, v))
}

// VersionMajorGTE applies the GTE predicate on the "version_major" field.
func VersionMajorGTE(v int) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldVersionMajor, v))
}

// VersionMajorLT applies the LT predicate on the "version_major" field.
func VersionMajorLT(v int) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldVersionMajor, v))
}

// VersionMajorLTE applies the LTE predicate on the "version_major" field.
func VersionMajorLTE(v int) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldVersionMajor, v))
}

// VersionMajorIsNil applies the IsNil predicate on the "version_major" field.
func VersionMajorIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldVersionMajor))
}

// VersionMajorNotNil applies the NotNil predicate on the "version_major" field.
func VersionMajorNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldVersionMajor))
}

// VersionMinorEQ applies the EQ predicate on the "version_minor" field.
func VersionMinorEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersionMinor, v))
}

// VersionMinorNEQ applies the NEQ predicate on the "version_minor" field.
func VersionMinorNEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldVersionMinor, v))
}

// VersionMinorIn applies the In predicate on the "version_minor" field.
func VersionMinorIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldVersionMinor, vs...))
}

// VersionMinorNotIn applies the NotIn predicate on the "version_minor" field.
func VersionMinorNotIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldVersionMinor, vs...))
}

// VersionMinorGT applies the GT predicate on the "version_minor" field.
func VersionMinorGT(v int) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldVersionMinor, v))
}

// VersionMinorGTE applies the GTE predicate on the "version_minor" field.
func VersionMinorGTE(v int) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldVersionMinor, v))
}

// VersionMinorLT applies the LT predicate on the "version_minor" field.
func VersionMinorLT(v int) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldVersionMinor, v))
}

// VersionMinorLTE applies the LTE predicate on the "version_minor" field.
func VersionMinorLTE(v int) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldVersionMinor, v))
}

// VersionMinorIsNil applies the IsNil predicate on the "version_minor" field.
func VersionMinorIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldVersionMinor))
}

// VersionMinorNotNil applies the NotNil predicate on the "version_minor" field.
func VersionMinorNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldVersionMinor))
}

// VersionPatchEQ applies the EQ predicate on the "version_patch" field.
func VersionPatchEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldVersionPatch, v))
}

// VersionPatchNEQ applies the NEQ predicate on the "version_patch" field.
func VersionPatchNEQ(v int) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldVersionPatch, v))
}

// VersionPatchIn applies the In predicate on the "version_patch" field.
func VersionPatchIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldVersionPatch, vs...))
}

// VersionPatchNotIn applies the NotIn predicate on the "version_patch" field.
func VersionPatchNotIn(vs ...int) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldVersionPatch, vs...))
}

// VersionPatchGT applies the GT predicate on the "version_patch" field.
func VersionPatchGT(v int) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldVersionPatch, v))
}

// VersionPatchGTE applies the GTE predicate on the "version_patch" field.
func VersionPatchGTE(v int) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldVersionPatch, v))
}

// VersionPatchLT applies the LT predicate on the "version_patch" field.
func VersionPatchLT(v int) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldVersionPatch, v))
}

// VersionPatchLTE applies the LTE predicate on the "version_patch" field.
func VersionPatchLTE(v int) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldVersionPatch, v))
}

// VersionPatchIsNil applies the IsNil predicate on the "version_patch" field.
func VersionPatchIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldVersionPatch))
}

// VersionPatchNotNil applies the NotNil predicate on the "version_patch" field.
func VersionPatchNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldVersionPatch))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int64) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int64) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int64) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int64) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int64) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int64) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int64) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int64) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldSize, v))
}

// SizeIsNil applies the IsNil predicate on the "size" field.
func SizeIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldSize))
}

// SizeNotNil applies the NotNil predicate on the "size" field.
func SizeNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldSize))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.Version {
	return predicate.Version(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.Version {
	return predicate.Version(sql.FieldHasSuffix(FieldHash, v))
}

// HashIsNil applies the IsNil predicate on the "hash" field.
func HashIsNil() predicate.Version {
	return predicate.Version(sql.FieldIsNull(FieldHash))
}

// HashNotNil applies the NotNil predicate on the "hash" field.
func HashNotNil() predicate.Version {
	return predicate.Version(sql.FieldNotNull(FieldHash))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.Version {
	return predicate.Version(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.Version {
	return predicate.Version(sql.FieldContainsFold(FieldHash, v))
}

// HasMod applies the HasEdge predicate on the "mod" edge.
func HasMod() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModTable, ModColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModWith applies the HasEdge predicate on the "mod" edge with a given conditions (other predicates).
func HasModWith(preds ...predicate.Mod) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := newModStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependencies applies the HasEdge predicate on the "dependencies" edge.
func HasDependencies() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DependenciesTable, DependenciesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependenciesWith applies the HasEdge predicate on the "dependencies" edge with a given conditions (other predicates).
func HasDependenciesWith(preds ...predicate.Mod) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := newDependenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargets applies the HasEdge predicate on the "targets" edge.
func HasTargets() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TargetsTable, TargetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetsWith applies the HasEdge predicate on the "targets" edge with a given conditions (other predicates).
func HasTargetsWith(preds ...predicate.VersionTarget) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := newTargetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVersionDependencies applies the HasEdge predicate on the "version_dependencies" edge.
func HasVersionDependencies() predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, VersionDependenciesTable, VersionDependenciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionDependenciesWith applies the HasEdge predicate on the "version_dependencies" edge with a given conditions (other predicates).
func HasVersionDependenciesWith(preds ...predicate.VersionDependency) predicate.Version {
	return predicate.Version(func(s *sql.Selector) {
		step := newVersionDependenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Version) predicate.Version {
	return predicate.Version(sql.NotPredicates(p))
}
