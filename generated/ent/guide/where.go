// Code generated by ent, DO NOT EDIT.

package guide

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldName, v))
}

// ShortDescription applies equality check predicate on the "short_description" field. It's identical to ShortDescriptionEQ.
func ShortDescription(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldShortDescription, v))
}

// Guide applies equality check predicate on the "guide" field. It's identical to GuideEQ.
func Guide(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldGuide, v))
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v int) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldViews, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Guide {
	return predicate.Guide(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Guide {
	return predicate.Guide(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldName, v))
}

// ShortDescriptionEQ applies the EQ predicate on the "short_description" field.
func ShortDescriptionEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldShortDescription, v))
}

// ShortDescriptionNEQ applies the NEQ predicate on the "short_description" field.
func ShortDescriptionNEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldShortDescription, v))
}

// ShortDescriptionIn applies the In predicate on the "short_description" field.
func ShortDescriptionIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldShortDescription, vs...))
}

// ShortDescriptionNotIn applies the NotIn predicate on the "short_description" field.
func ShortDescriptionNotIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldShortDescription, vs...))
}

// ShortDescriptionGT applies the GT predicate on the "short_description" field.
func ShortDescriptionGT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldShortDescription, v))
}

// ShortDescriptionGTE applies the GTE predicate on the "short_description" field.
func ShortDescriptionGTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldShortDescription, v))
}

// ShortDescriptionLT applies the LT predicate on the "short_description" field.
func ShortDescriptionLT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldShortDescription, v))
}

// ShortDescriptionLTE applies the LTE predicate on the "short_description" field.
func ShortDescriptionLTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldShortDescription, v))
}

// ShortDescriptionContains applies the Contains predicate on the "short_description" field.
func ShortDescriptionContains(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContains(FieldShortDescription, v))
}

// ShortDescriptionHasPrefix applies the HasPrefix predicate on the "short_description" field.
func ShortDescriptionHasPrefix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasPrefix(FieldShortDescription, v))
}

// ShortDescriptionHasSuffix applies the HasSuffix predicate on the "short_description" field.
func ShortDescriptionHasSuffix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasSuffix(FieldShortDescription, v))
}

// ShortDescriptionEqualFold applies the EqualFold predicate on the "short_description" field.
func ShortDescriptionEqualFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldShortDescription, v))
}

// ShortDescriptionContainsFold applies the ContainsFold predicate on the "short_description" field.
func ShortDescriptionContainsFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldShortDescription, v))
}

// GuideEQ applies the EQ predicate on the "guide" field.
func GuideEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldGuide, v))
}

// GuideNEQ applies the NEQ predicate on the "guide" field.
func GuideNEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldGuide, v))
}

// GuideIn applies the In predicate on the "guide" field.
func GuideIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldGuide, vs...))
}

// GuideNotIn applies the NotIn predicate on the "guide" field.
func GuideNotIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldGuide, vs...))
}

// GuideGT applies the GT predicate on the "guide" field.
func GuideGT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldGuide, v))
}

// GuideGTE applies the GTE predicate on the "guide" field.
func GuideGTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldGuide, v))
}

// GuideLT applies the LT predicate on the "guide" field.
func GuideLT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldGuide, v))
}

// GuideLTE applies the LTE predicate on the "guide" field.
func GuideLTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldGuide, v))
}

// GuideContains applies the Contains predicate on the "guide" field.
func GuideContains(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContains(FieldGuide, v))
}

// GuideHasPrefix applies the HasPrefix predicate on the "guide" field.
func GuideHasPrefix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasPrefix(FieldGuide, v))
}

// GuideHasSuffix applies the HasSuffix predicate on the "guide" field.
func GuideHasSuffix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasSuffix(FieldGuide, v))
}

// GuideEqualFold applies the EqualFold predicate on the "guide" field.
func GuideEqualFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldGuide, v))
}

// GuideContainsFold applies the ContainsFold predicate on the "guide" field.
func GuideContainsFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldGuide, v))
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v int) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldViews, v))
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v int) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldViews, v))
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...int) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldViews, vs...))
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...int) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldViews, vs...))
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v int) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldViews, v))
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v int) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldViews, v))
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v int) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldViews, v))
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v int) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldViews, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGuideTags applies the HasEdge predicate on the "guide_tags" edge.
func HasGuideTags() predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, GuideTagsTable, GuideTagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuideTagsWith applies the HasEdge predicate on the "guide_tags" edge with a given conditions (other predicates).
func HasGuideTagsWith(preds ...predicate.GuideTag) predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := newGuideTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Guide) predicate.Guide {
	return predicate.Guide(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Guide) predicate.Guide {
	return predicate.Guide(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Guide) predicate.Guide {
	return predicate.Guide(sql.NotPredicates(p))
}
