// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/satisfactoryversion"
)

// SatisfactoryVersionUpdate is the builder for updating SatisfactoryVersion entities.
type SatisfactoryVersionUpdate struct {
	config
	hooks     []Hook
	mutation  *SatisfactoryVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SatisfactoryVersionUpdate builder.
func (svu *SatisfactoryVersionUpdate) Where(ps ...predicate.SatisfactoryVersion) *SatisfactoryVersionUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetVersion sets the "version" field.
func (svu *SatisfactoryVersionUpdate) SetVersion(i int) *SatisfactoryVersionUpdate {
	svu.mutation.ResetVersion()
	svu.mutation.SetVersion(i)
	return svu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (svu *SatisfactoryVersionUpdate) SetNillableVersion(i *int) *SatisfactoryVersionUpdate {
	if i != nil {
		svu.SetVersion(*i)
	}
	return svu
}

// AddVersion adds i to the "version" field.
func (svu *SatisfactoryVersionUpdate) AddVersion(i int) *SatisfactoryVersionUpdate {
	svu.mutation.AddVersion(i)
	return svu
}

// SetEngineVersion sets the "engine_version" field.
func (svu *SatisfactoryVersionUpdate) SetEngineVersion(s string) *SatisfactoryVersionUpdate {
	svu.mutation.SetEngineVersion(s)
	return svu
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (svu *SatisfactoryVersionUpdate) SetNillableEngineVersion(s *string) *SatisfactoryVersionUpdate {
	if s != nil {
		svu.SetEngineVersion(*s)
	}
	return svu
}

// Mutation returns the SatisfactoryVersionMutation object of the builder.
func (svu *SatisfactoryVersionUpdate) Mutation() *SatisfactoryVersionMutation {
	return svu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SatisfactoryVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SatisfactoryVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SatisfactoryVersionUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SatisfactoryVersionUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *SatisfactoryVersionUpdate) check() error {
	if v, ok := svu.mutation.EngineVersion(); ok {
		if err := satisfactoryversion.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "SatisfactoryVersion.engine_version": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (svu *SatisfactoryVersionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SatisfactoryVersionUpdate {
	svu.modifiers = append(svu.modifiers, modifiers...)
	return svu
}

func (svu *SatisfactoryVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(satisfactoryversion.Table, satisfactoryversion.Columns, sqlgraph.NewFieldSpec(satisfactoryversion.FieldID, field.TypeString))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.Version(); ok {
		_spec.SetField(satisfactoryversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := svu.mutation.AddedVersion(); ok {
		_spec.AddField(satisfactoryversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := svu.mutation.EngineVersion(); ok {
		_spec.SetField(satisfactoryversion.FieldEngineVersion, field.TypeString, value)
	}
	_spec.AddModifiers(svu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{satisfactoryversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SatisfactoryVersionUpdateOne is the builder for updating a single SatisfactoryVersion entity.
type SatisfactoryVersionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SatisfactoryVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVersion sets the "version" field.
func (svuo *SatisfactoryVersionUpdateOne) SetVersion(i int) *SatisfactoryVersionUpdateOne {
	svuo.mutation.ResetVersion()
	svuo.mutation.SetVersion(i)
	return svuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (svuo *SatisfactoryVersionUpdateOne) SetNillableVersion(i *int) *SatisfactoryVersionUpdateOne {
	if i != nil {
		svuo.SetVersion(*i)
	}
	return svuo
}

// AddVersion adds i to the "version" field.
func (svuo *SatisfactoryVersionUpdateOne) AddVersion(i int) *SatisfactoryVersionUpdateOne {
	svuo.mutation.AddVersion(i)
	return svuo
}

// SetEngineVersion sets the "engine_version" field.
func (svuo *SatisfactoryVersionUpdateOne) SetEngineVersion(s string) *SatisfactoryVersionUpdateOne {
	svuo.mutation.SetEngineVersion(s)
	return svuo
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (svuo *SatisfactoryVersionUpdateOne) SetNillableEngineVersion(s *string) *SatisfactoryVersionUpdateOne {
	if s != nil {
		svuo.SetEngineVersion(*s)
	}
	return svuo
}

// Mutation returns the SatisfactoryVersionMutation object of the builder.
func (svuo *SatisfactoryVersionUpdateOne) Mutation() *SatisfactoryVersionMutation {
	return svuo.mutation
}

// Where appends a list predicates to the SatisfactoryVersionUpdate builder.
func (svuo *SatisfactoryVersionUpdateOne) Where(ps ...predicate.SatisfactoryVersion) *SatisfactoryVersionUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SatisfactoryVersionUpdateOne) Select(field string, fields ...string) *SatisfactoryVersionUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SatisfactoryVersion entity.
func (svuo *SatisfactoryVersionUpdateOne) Save(ctx context.Context) (*SatisfactoryVersion, error) {
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SatisfactoryVersionUpdateOne) SaveX(ctx context.Context) *SatisfactoryVersion {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SatisfactoryVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SatisfactoryVersionUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SatisfactoryVersionUpdateOne) check() error {
	if v, ok := svuo.mutation.EngineVersion(); ok {
		if err := satisfactoryversion.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "SatisfactoryVersion.engine_version": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (svuo *SatisfactoryVersionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SatisfactoryVersionUpdateOne {
	svuo.modifiers = append(svuo.modifiers, modifiers...)
	return svuo
}

func (svuo *SatisfactoryVersionUpdateOne) sqlSave(ctx context.Context) (_node *SatisfactoryVersion, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(satisfactoryversion.Table, satisfactoryversion.Columns, sqlgraph.NewFieldSpec(satisfactoryversion.FieldID, field.TypeString))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SatisfactoryVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, satisfactoryversion.FieldID)
		for _, f := range fields {
			if !satisfactoryversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != satisfactoryversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.Version(); ok {
		_spec.SetField(satisfactoryversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.AddedVersion(); ok {
		_spec.AddField(satisfactoryversion.FieldVersion, field.TypeInt, value)
	}
	if value, ok := svuo.mutation.EngineVersion(); ok {
		_spec.SetField(satisfactoryversion.FieldEngineVersion, field.TypeString, value)
	}
	_spec.AddModifiers(svuo.modifiers...)
	_node = &SatisfactoryVersion{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{satisfactoryversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
