// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/virustotalresult"
)

// VirustotalResultCreate is the builder for creating a VirustotalResult entity.
type VirustotalResultCreate struct {
	config
	mutation *VirustotalResultMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vrc *VirustotalResultCreate) SetCreatedAt(t time.Time) *VirustotalResultCreate {
	vrc.mutation.SetCreatedAt(t)
	return vrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vrc *VirustotalResultCreate) SetNillableCreatedAt(t *time.Time) *VirustotalResultCreate {
	if t != nil {
		vrc.SetCreatedAt(*t)
	}
	return vrc
}

// SetUpdatedAt sets the "updated_at" field.
func (vrc *VirustotalResultCreate) SetUpdatedAt(t time.Time) *VirustotalResultCreate {
	vrc.mutation.SetUpdatedAt(t)
	return vrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vrc *VirustotalResultCreate) SetNillableUpdatedAt(t *time.Time) *VirustotalResultCreate {
	if t != nil {
		vrc.SetUpdatedAt(*t)
	}
	return vrc
}

// SetSafe sets the "safe" field.
func (vrc *VirustotalResultCreate) SetSafe(b bool) *VirustotalResultCreate {
	vrc.mutation.SetSafe(b)
	return vrc
}

// SetNillableSafe sets the "safe" field if the given value is not nil.
func (vrc *VirustotalResultCreate) SetNillableSafe(b *bool) *VirustotalResultCreate {
	if b != nil {
		vrc.SetSafe(*b)
	}
	return vrc
}

// SetHash sets the "hash" field.
func (vrc *VirustotalResultCreate) SetHash(s string) *VirustotalResultCreate {
	vrc.mutation.SetHash(s)
	return vrc
}

// SetFileName sets the "file_name" field.
func (vrc *VirustotalResultCreate) SetFileName(s string) *VirustotalResultCreate {
	vrc.mutation.SetFileName(s)
	return vrc
}

// SetVersionID sets the "version_id" field.
func (vrc *VirustotalResultCreate) SetVersionID(s string) *VirustotalResultCreate {
	vrc.mutation.SetVersionID(s)
	return vrc
}

// SetID sets the "id" field.
func (vrc *VirustotalResultCreate) SetID(s string) *VirustotalResultCreate {
	vrc.mutation.SetID(s)
	return vrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vrc *VirustotalResultCreate) SetNillableID(s *string) *VirustotalResultCreate {
	if s != nil {
		vrc.SetID(*s)
	}
	return vrc
}

// SetVersion sets the "version" edge to the Version entity.
func (vrc *VirustotalResultCreate) SetVersion(v *Version) *VirustotalResultCreate {
	return vrc.SetVersionID(v.ID)
}

// Mutation returns the VirustotalResultMutation object of the builder.
func (vrc *VirustotalResultCreate) Mutation() *VirustotalResultMutation {
	return vrc.mutation
}

// Save creates the VirustotalResult in the database.
func (vrc *VirustotalResultCreate) Save(ctx context.Context) (*VirustotalResult, error) {
	vrc.defaults()
	return withHooks(ctx, vrc.sqlSave, vrc.mutation, vrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vrc *VirustotalResultCreate) SaveX(ctx context.Context) *VirustotalResult {
	v, err := vrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrc *VirustotalResultCreate) Exec(ctx context.Context) error {
	_, err := vrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrc *VirustotalResultCreate) ExecX(ctx context.Context) {
	if err := vrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vrc *VirustotalResultCreate) defaults() {
	if _, ok := vrc.mutation.CreatedAt(); !ok {
		v := virustotalresult.DefaultCreatedAt()
		vrc.mutation.SetCreatedAt(v)
	}
	if _, ok := vrc.mutation.UpdatedAt(); !ok {
		v := virustotalresult.DefaultUpdatedAt()
		vrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vrc.mutation.Safe(); !ok {
		v := virustotalresult.DefaultSafe
		vrc.mutation.SetSafe(v)
	}
	if _, ok := vrc.mutation.ID(); !ok {
		v := virustotalresult.DefaultID()
		vrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vrc *VirustotalResultCreate) check() error {
	if _, ok := vrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VirustotalResult.created_at"`)}
	}
	if _, ok := vrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VirustotalResult.updated_at"`)}
	}
	if _, ok := vrc.mutation.Safe(); !ok {
		return &ValidationError{Name: "safe", err: errors.New(`ent: missing required field "VirustotalResult.safe"`)}
	}
	if _, ok := vrc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "VirustotalResult.hash"`)}
	}
	if v, ok := vrc.mutation.Hash(); ok {
		if err := virustotalresult.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.hash": %w`, err)}
		}
	}
	if _, ok := vrc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "VirustotalResult.file_name"`)}
	}
	if v, ok := vrc.mutation.FileName(); ok {
		if err := virustotalresult.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.file_name": %w`, err)}
		}
	}
	if _, ok := vrc.mutation.VersionID(); !ok {
		return &ValidationError{Name: "version_id", err: errors.New(`ent: missing required field "VirustotalResult.version_id"`)}
	}
	if v, ok := vrc.mutation.VersionID(); ok {
		if err := virustotalresult.VersionIDValidator(v); err != nil {
			return &ValidationError{Name: "version_id", err: fmt.Errorf(`ent: validator failed for field "VirustotalResult.version_id": %w`, err)}
		}
	}
	if len(vrc.mutation.VersionIDs()) == 0 {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required edge "VirustotalResult.version"`)}
	}
	return nil
}

func (vrc *VirustotalResultCreate) sqlSave(ctx context.Context) (*VirustotalResult, error) {
	if err := vrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VirustotalResult.ID type: %T", _spec.ID.Value)
		}
	}
	vrc.mutation.id = &_node.ID
	vrc.mutation.done = true
	return _node, nil
}

func (vrc *VirustotalResultCreate) createSpec() (*VirustotalResult, *sqlgraph.CreateSpec) {
	var (
		_node = &VirustotalResult{config: vrc.config}
		_spec = sqlgraph.NewCreateSpec(virustotalresult.Table, sqlgraph.NewFieldSpec(virustotalresult.FieldID, field.TypeString))
	)
	_spec.OnConflict = vrc.conflict
	if id, ok := vrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vrc.mutation.CreatedAt(); ok {
		_spec.SetField(virustotalresult.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vrc.mutation.UpdatedAt(); ok {
		_spec.SetField(virustotalresult.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vrc.mutation.Safe(); ok {
		_spec.SetField(virustotalresult.FieldSafe, field.TypeBool, value)
		_node.Safe = value
	}
	if value, ok := vrc.mutation.Hash(); ok {
		_spec.SetField(virustotalresult.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := vrc.mutation.FileName(); ok {
		_spec.SetField(virustotalresult.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if nodes := vrc.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   virustotalresult.VersionTable,
			Columns: []string{virustotalresult.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VersionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VirustotalResult.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VirustotalResultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vrc *VirustotalResultCreate) OnConflict(opts ...sql.ConflictOption) *VirustotalResultUpsertOne {
	vrc.conflict = opts
	return &VirustotalResultUpsertOne{
		create: vrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VirustotalResult.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vrc *VirustotalResultCreate) OnConflictColumns(columns ...string) *VirustotalResultUpsertOne {
	vrc.conflict = append(vrc.conflict, sql.ConflictColumns(columns...))
	return &VirustotalResultUpsertOne{
		create: vrc,
	}
}

type (
	// VirustotalResultUpsertOne is the builder for "upsert"-ing
	//  one VirustotalResult node.
	VirustotalResultUpsertOne struct {
		create *VirustotalResultCreate
	}

	// VirustotalResultUpsert is the "OnConflict" setter.
	VirustotalResultUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *VirustotalResultUpsert) SetUpdatedAt(v time.Time) *VirustotalResultUpsert {
	u.Set(virustotalresult.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VirustotalResultUpsert) UpdateUpdatedAt() *VirustotalResultUpsert {
	u.SetExcluded(virustotalresult.FieldUpdatedAt)
	return u
}

// SetSafe sets the "safe" field.
func (u *VirustotalResultUpsert) SetSafe(v bool) *VirustotalResultUpsert {
	u.Set(virustotalresult.FieldSafe, v)
	return u
}

// UpdateSafe sets the "safe" field to the value that was provided on create.
func (u *VirustotalResultUpsert) UpdateSafe() *VirustotalResultUpsert {
	u.SetExcluded(virustotalresult.FieldSafe)
	return u
}

// SetHash sets the "hash" field.
func (u *VirustotalResultUpsert) SetHash(v string) *VirustotalResultUpsert {
	u.Set(virustotalresult.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *VirustotalResultUpsert) UpdateHash() *VirustotalResultUpsert {
	u.SetExcluded(virustotalresult.FieldHash)
	return u
}

// SetFileName sets the "file_name" field.
func (u *VirustotalResultUpsert) SetFileName(v string) *VirustotalResultUpsert {
	u.Set(virustotalresult.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *VirustotalResultUpsert) UpdateFileName() *VirustotalResultUpsert {
	u.SetExcluded(virustotalresult.FieldFileName)
	return u
}

// SetVersionID sets the "version_id" field.
func (u *VirustotalResultUpsert) SetVersionID(v string) *VirustotalResultUpsert {
	u.Set(virustotalresult.FieldVersionID, v)
	return u
}

// UpdateVersionID sets the "version_id" field to the value that was provided on create.
func (u *VirustotalResultUpsert) UpdateVersionID() *VirustotalResultUpsert {
	u.SetExcluded(virustotalresult.FieldVersionID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.VirustotalResult.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(virustotalresult.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VirustotalResultUpsertOne) UpdateNewValues() *VirustotalResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(virustotalresult.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(virustotalresult.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VirustotalResult.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VirustotalResultUpsertOne) Ignore() *VirustotalResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VirustotalResultUpsertOne) DoNothing() *VirustotalResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VirustotalResultCreate.OnConflict
// documentation for more info.
func (u *VirustotalResultUpsertOne) Update(set func(*VirustotalResultUpsert)) *VirustotalResultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VirustotalResultUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VirustotalResultUpsertOne) SetUpdatedAt(v time.Time) *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VirustotalResultUpsertOne) UpdateUpdatedAt() *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSafe sets the "safe" field.
func (u *VirustotalResultUpsertOne) SetSafe(v bool) *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetSafe(v)
	})
}

// UpdateSafe sets the "safe" field to the value that was provided on create.
func (u *VirustotalResultUpsertOne) UpdateSafe() *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateSafe()
	})
}

// SetHash sets the "hash" field.
func (u *VirustotalResultUpsertOne) SetHash(v string) *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *VirustotalResultUpsertOne) UpdateHash() *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateHash()
	})
}

// SetFileName sets the "file_name" field.
func (u *VirustotalResultUpsertOne) SetFileName(v string) *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *VirustotalResultUpsertOne) UpdateFileName() *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateFileName()
	})
}

// SetVersionID sets the "version_id" field.
func (u *VirustotalResultUpsertOne) SetVersionID(v string) *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetVersionID(v)
	})
}

// UpdateVersionID sets the "version_id" field to the value that was provided on create.
func (u *VirustotalResultUpsertOne) UpdateVersionID() *VirustotalResultUpsertOne {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateVersionID()
	})
}

// Exec executes the query.
func (u *VirustotalResultUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VirustotalResultCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VirustotalResultUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VirustotalResultUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VirustotalResultUpsertOne.ID is not supported by MySQL driver. Use VirustotalResultUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VirustotalResultUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VirustotalResultCreateBulk is the builder for creating many VirustotalResult entities in bulk.
type VirustotalResultCreateBulk struct {
	config
	err      error
	builders []*VirustotalResultCreate
	conflict []sql.ConflictOption
}

// Save creates the VirustotalResult entities in the database.
func (vrcb *VirustotalResultCreateBulk) Save(ctx context.Context) ([]*VirustotalResult, error) {
	if vrcb.err != nil {
		return nil, vrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vrcb.builders))
	nodes := make([]*VirustotalResult, len(vrcb.builders))
	mutators := make([]Mutator, len(vrcb.builders))
	for i := range vrcb.builders {
		func(i int, root context.Context) {
			builder := vrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VirustotalResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vrcb *VirustotalResultCreateBulk) SaveX(ctx context.Context) []*VirustotalResult {
	v, err := vrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vrcb *VirustotalResultCreateBulk) Exec(ctx context.Context) error {
	_, err := vrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vrcb *VirustotalResultCreateBulk) ExecX(ctx context.Context) {
	if err := vrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.VirustotalResult.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VirustotalResultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vrcb *VirustotalResultCreateBulk) OnConflict(opts ...sql.ConflictOption) *VirustotalResultUpsertBulk {
	vrcb.conflict = opts
	return &VirustotalResultUpsertBulk{
		create: vrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.VirustotalResult.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vrcb *VirustotalResultCreateBulk) OnConflictColumns(columns ...string) *VirustotalResultUpsertBulk {
	vrcb.conflict = append(vrcb.conflict, sql.ConflictColumns(columns...))
	return &VirustotalResultUpsertBulk{
		create: vrcb,
	}
}

// VirustotalResultUpsertBulk is the builder for "upsert"-ing
// a bulk of VirustotalResult nodes.
type VirustotalResultUpsertBulk struct {
	create *VirustotalResultCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.VirustotalResult.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(virustotalresult.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *VirustotalResultUpsertBulk) UpdateNewValues() *VirustotalResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(virustotalresult.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(virustotalresult.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.VirustotalResult.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VirustotalResultUpsertBulk) Ignore() *VirustotalResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VirustotalResultUpsertBulk) DoNothing() *VirustotalResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VirustotalResultCreateBulk.OnConflict
// documentation for more info.
func (u *VirustotalResultUpsertBulk) Update(set func(*VirustotalResultUpsert)) *VirustotalResultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VirustotalResultUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VirustotalResultUpsertBulk) SetUpdatedAt(v time.Time) *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VirustotalResultUpsertBulk) UpdateUpdatedAt() *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSafe sets the "safe" field.
func (u *VirustotalResultUpsertBulk) SetSafe(v bool) *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetSafe(v)
	})
}

// UpdateSafe sets the "safe" field to the value that was provided on create.
func (u *VirustotalResultUpsertBulk) UpdateSafe() *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateSafe()
	})
}

// SetHash sets the "hash" field.
func (u *VirustotalResultUpsertBulk) SetHash(v string) *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *VirustotalResultUpsertBulk) UpdateHash() *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateHash()
	})
}

// SetFileName sets the "file_name" field.
func (u *VirustotalResultUpsertBulk) SetFileName(v string) *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *VirustotalResultUpsertBulk) UpdateFileName() *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateFileName()
	})
}

// SetVersionID sets the "version_id" field.
func (u *VirustotalResultUpsertBulk) SetVersionID(v string) *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.SetVersionID(v)
	})
}

// UpdateVersionID sets the "version_id" field to the value that was provided on create.
func (u *VirustotalResultUpsertBulk) UpdateVersionID() *VirustotalResultUpsertBulk {
	return u.Update(func(s *VirustotalResultUpsert) {
		s.UpdateVersionID()
	})
}

// Exec executes the query.
func (u *VirustotalResultUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VirustotalResultCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VirustotalResultCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VirustotalResultUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
