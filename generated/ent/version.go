// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
)

// Version is the model entity for the Version schema.
type Version struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ModID holds the value of the "mod_id" field.
	ModID string `json:"mod_id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// SmlVersion holds the value of the "sml_version" field.
	SmlVersion string `json:"sml_version,omitempty"`
	// Changelog holds the value of the "changelog" field.
	Changelog string `json:"changelog,omitempty"`
	// Downloads holds the value of the "downloads" field.
	Downloads uint `json:"downloads,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Stability holds the value of the "stability" field.
	Stability version.Stability `json:"stability,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// Hotness holds the value of the "hotness" field.
	Hotness uint `json:"hotness,omitempty"`
	// Denied holds the value of the "denied" field.
	Denied bool `json:"denied,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// ModReference holds the value of the "mod_reference" field.
	ModReference string `json:"mod_reference,omitempty"`
	// VersionMajor holds the value of the "version_major" field.
	VersionMajor int `json:"version_major,omitempty"`
	// VersionMinor holds the value of the "version_minor" field.
	VersionMinor int `json:"version_minor,omitempty"`
	// VersionPatch holds the value of the "version_patch" field.
	VersionPatch int `json:"version_patch,omitempty"`
	// Size holds the value of the "size" field.
	Size int64 `json:"size,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VersionQuery when eager-loading is set.
	Edges        VersionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VersionEdges holds the relations/edges for other nodes in the graph.
type VersionEdges struct {
	// Mod holds the value of the mod edge.
	Mod *Mod `json:"mod,omitempty"`
	// Dependencies holds the value of the dependencies edge.
	Dependencies []*Mod `json:"dependencies,omitempty"`
	// Targets holds the value of the targets edge.
	Targets []*VersionTarget `json:"targets,omitempty"`
	// VersionDependencies holds the value of the version_dependencies edge.
	VersionDependencies []*VersionDependency `json:"version_dependencies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ModOrErr returns the Mod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VersionEdges) ModOrErr() (*Mod, error) {
	if e.loadedTypes[0] {
		if e.Mod == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: mod.Label}
		}
		return e.Mod, nil
	}
	return nil, &NotLoadedError{edge: "mod"}
}

// DependenciesOrErr returns the Dependencies value or an error if the edge
// was not loaded in eager-loading.
func (e VersionEdges) DependenciesOrErr() ([]*Mod, error) {
	if e.loadedTypes[1] {
		return e.Dependencies, nil
	}
	return nil, &NotLoadedError{edge: "dependencies"}
}

// TargetsOrErr returns the Targets value or an error if the edge
// was not loaded in eager-loading.
func (e VersionEdges) TargetsOrErr() ([]*VersionTarget, error) {
	if e.loadedTypes[2] {
		return e.Targets, nil
	}
	return nil, &NotLoadedError{edge: "targets"}
}

// VersionDependenciesOrErr returns the VersionDependencies value or an error if the edge
// was not loaded in eager-loading.
func (e VersionEdges) VersionDependenciesOrErr() ([]*VersionDependency, error) {
	if e.loadedTypes[3] {
		return e.VersionDependencies, nil
	}
	return nil, &NotLoadedError{edge: "version_dependencies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Version) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case version.FieldApproved, version.FieldDenied:
			values[i] = new(sql.NullBool)
		case version.FieldDownloads, version.FieldHotness, version.FieldVersionMajor, version.FieldVersionMinor, version.FieldVersionPatch, version.FieldSize:
			values[i] = new(sql.NullInt64)
		case version.FieldID, version.FieldModID, version.FieldVersion, version.FieldSmlVersion, version.FieldChangelog, version.FieldKey, version.FieldStability, version.FieldMetadata, version.FieldModReference, version.FieldHash:
			values[i] = new(sql.NullString)
		case version.FieldCreatedAt, version.FieldUpdatedAt, version.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Version fields.
func (v *Version) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case version.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				v.ID = value.String
			}
		case version.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case version.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case version.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				v.DeletedAt = value.Time
			}
		case version.FieldModID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mod_id", values[i])
			} else if value.Valid {
				v.ModID = value.String
			}
		case version.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				v.Version = value.String
			}
		case version.FieldSmlVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sml_version", values[i])
			} else if value.Valid {
				v.SmlVersion = value.String
			}
		case version.FieldChangelog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field changelog", values[i])
			} else if value.Valid {
				v.Changelog = value.String
			}
		case version.FieldDownloads:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field downloads", values[i])
			} else if value.Valid {
				v.Downloads = uint(value.Int64)
			}
		case version.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				v.Key = value.String
			}
		case version.FieldStability:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stability", values[i])
			} else if value.Valid {
				v.Stability = version.Stability(value.String)
			}
		case version.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				v.Approved = value.Bool
			}
		case version.FieldHotness:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hotness", values[i])
			} else if value.Valid {
				v.Hotness = uint(value.Int64)
			}
		case version.FieldDenied:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field denied", values[i])
			} else if value.Valid {
				v.Denied = value.Bool
			}
		case version.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				v.Metadata = value.String
			}
		case version.FieldModReference:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mod_reference", values[i])
			} else if value.Valid {
				v.ModReference = value.String
			}
		case version.FieldVersionMajor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_major", values[i])
			} else if value.Valid {
				v.VersionMajor = int(value.Int64)
			}
		case version.FieldVersionMinor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_minor", values[i])
			} else if value.Valid {
				v.VersionMinor = int(value.Int64)
			}
		case version.FieldVersionPatch:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_patch", values[i])
			} else if value.Valid {
				v.VersionPatch = int(value.Int64)
			}
		case version.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				v.Size = value.Int64
			}
		case version.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				v.Hash = value.String
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Version.
// This includes values selected through modifiers, order, etc.
func (v *Version) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryMod queries the "mod" edge of the Version entity.
func (v *Version) QueryMod() *ModQuery {
	return NewVersionClient(v.config).QueryMod(v)
}

// QueryDependencies queries the "dependencies" edge of the Version entity.
func (v *Version) QueryDependencies() *ModQuery {
	return NewVersionClient(v.config).QueryDependencies(v)
}

// QueryTargets queries the "targets" edge of the Version entity.
func (v *Version) QueryTargets() *VersionTargetQuery {
	return NewVersionClient(v.config).QueryTargets(v)
}

// QueryVersionDependencies queries the "version_dependencies" edge of the Version entity.
func (v *Version) QueryVersionDependencies() *VersionDependencyQuery {
	return NewVersionClient(v.config).QueryVersionDependencies(v)
}

// Update returns a builder for updating this Version.
// Note that you need to call Version.Unwrap() before calling this method if this Version
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Version) Update() *VersionUpdateOne {
	return NewVersionClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Version entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Version) Unwrap() *Version {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Version is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Version) String() string {
	var builder strings.Builder
	builder.WriteString("Version(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(v.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mod_id=")
	builder.WriteString(v.ModID)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(v.Version)
	builder.WriteString(", ")
	builder.WriteString("sml_version=")
	builder.WriteString(v.SmlVersion)
	builder.WriteString(", ")
	builder.WriteString("changelog=")
	builder.WriteString(v.Changelog)
	builder.WriteString(", ")
	builder.WriteString("downloads=")
	builder.WriteString(fmt.Sprintf("%v", v.Downloads))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(v.Key)
	builder.WriteString(", ")
	builder.WriteString("stability=")
	builder.WriteString(fmt.Sprintf("%v", v.Stability))
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", v.Approved))
	builder.WriteString(", ")
	builder.WriteString("hotness=")
	builder.WriteString(fmt.Sprintf("%v", v.Hotness))
	builder.WriteString(", ")
	builder.WriteString("denied=")
	builder.WriteString(fmt.Sprintf("%v", v.Denied))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(v.Metadata)
	builder.WriteString(", ")
	builder.WriteString("mod_reference=")
	builder.WriteString(v.ModReference)
	builder.WriteString(", ")
	builder.WriteString("version_major=")
	builder.WriteString(fmt.Sprintf("%v", v.VersionMajor))
	builder.WriteString(", ")
	builder.WriteString("version_minor=")
	builder.WriteString(fmt.Sprintf("%v", v.VersionMinor))
	builder.WriteString(", ")
	builder.WriteString("version_patch=")
	builder.WriteString(fmt.Sprintf("%v", v.VersionPatch))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", v.Size))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(v.Hash)
	builder.WriteByte(')')
	return builder.String()
}

// Versions is a parsable slice of Version.
type Versions []*Version
