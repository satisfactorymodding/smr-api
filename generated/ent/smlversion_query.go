// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversion"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversiontarget"
)

// SmlVersionQuery is the builder for querying SmlVersion entities.
type SmlVersionQuery struct {
	config
	ctx         *QueryContext
	order       []smlversion.OrderOption
	inters      []Interceptor
	predicates  []predicate.SmlVersion
	withTargets *SmlVersionTargetQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SmlVersionQuery builder.
func (svq *SmlVersionQuery) Where(ps ...predicate.SmlVersion) *SmlVersionQuery {
	svq.predicates = append(svq.predicates, ps...)
	return svq
}

// Limit the number of records to be returned by this query.
func (svq *SmlVersionQuery) Limit(limit int) *SmlVersionQuery {
	svq.ctx.Limit = &limit
	return svq
}

// Offset to start from.
func (svq *SmlVersionQuery) Offset(offset int) *SmlVersionQuery {
	svq.ctx.Offset = &offset
	return svq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (svq *SmlVersionQuery) Unique(unique bool) *SmlVersionQuery {
	svq.ctx.Unique = &unique
	return svq
}

// Order specifies how the records should be ordered.
func (svq *SmlVersionQuery) Order(o ...smlversion.OrderOption) *SmlVersionQuery {
	svq.order = append(svq.order, o...)
	return svq
}

// QueryTargets chains the current query on the "targets" edge.
func (svq *SmlVersionQuery) QueryTargets() *SmlVersionTargetQuery {
	query := (&SmlVersionTargetClient{config: svq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := svq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := svq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(smlversion.Table, smlversion.FieldID, selector),
			sqlgraph.To(smlversiontarget.Table, smlversiontarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, smlversion.TargetsTable, smlversion.TargetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(svq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SmlVersion entity from the query.
// Returns a *NotFoundError when no SmlVersion was found.
func (svq *SmlVersionQuery) First(ctx context.Context) (*SmlVersion, error) {
	nodes, err := svq.Limit(1).All(setContextOp(ctx, svq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{smlversion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (svq *SmlVersionQuery) FirstX(ctx context.Context) *SmlVersion {
	node, err := svq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SmlVersion ID from the query.
// Returns a *NotFoundError when no SmlVersion ID was found.
func (svq *SmlVersionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = svq.Limit(1).IDs(setContextOp(ctx, svq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{smlversion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (svq *SmlVersionQuery) FirstIDX(ctx context.Context) string {
	id, err := svq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SmlVersion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SmlVersion entity is found.
// Returns a *NotFoundError when no SmlVersion entities are found.
func (svq *SmlVersionQuery) Only(ctx context.Context) (*SmlVersion, error) {
	nodes, err := svq.Limit(2).All(setContextOp(ctx, svq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{smlversion.Label}
	default:
		return nil, &NotSingularError{smlversion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (svq *SmlVersionQuery) OnlyX(ctx context.Context) *SmlVersion {
	node, err := svq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SmlVersion ID in the query.
// Returns a *NotSingularError when more than one SmlVersion ID is found.
// Returns a *NotFoundError when no entities are found.
func (svq *SmlVersionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = svq.Limit(2).IDs(setContextOp(ctx, svq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{smlversion.Label}
	default:
		err = &NotSingularError{smlversion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (svq *SmlVersionQuery) OnlyIDX(ctx context.Context) string {
	id, err := svq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SmlVersions.
func (svq *SmlVersionQuery) All(ctx context.Context) ([]*SmlVersion, error) {
	ctx = setContextOp(ctx, svq.ctx, "All")
	if err := svq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SmlVersion, *SmlVersionQuery]()
	return withInterceptors[[]*SmlVersion](ctx, svq, qr, svq.inters)
}

// AllX is like All, but panics if an error occurs.
func (svq *SmlVersionQuery) AllX(ctx context.Context) []*SmlVersion {
	nodes, err := svq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SmlVersion IDs.
func (svq *SmlVersionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if svq.ctx.Unique == nil && svq.path != nil {
		svq.Unique(true)
	}
	ctx = setContextOp(ctx, svq.ctx, "IDs")
	if err = svq.Select(smlversion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (svq *SmlVersionQuery) IDsX(ctx context.Context) []string {
	ids, err := svq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (svq *SmlVersionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, svq.ctx, "Count")
	if err := svq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, svq, querierCount[*SmlVersionQuery](), svq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (svq *SmlVersionQuery) CountX(ctx context.Context) int {
	count, err := svq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (svq *SmlVersionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, svq.ctx, "Exist")
	switch _, err := svq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (svq *SmlVersionQuery) ExistX(ctx context.Context) bool {
	exist, err := svq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SmlVersionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (svq *SmlVersionQuery) Clone() *SmlVersionQuery {
	if svq == nil {
		return nil
	}
	return &SmlVersionQuery{
		config:      svq.config,
		ctx:         svq.ctx.Clone(),
		order:       append([]smlversion.OrderOption{}, svq.order...),
		inters:      append([]Interceptor{}, svq.inters...),
		predicates:  append([]predicate.SmlVersion{}, svq.predicates...),
		withTargets: svq.withTargets.Clone(),
		// clone intermediate query.
		sql:  svq.sql.Clone(),
		path: svq.path,
	}
}

// WithTargets tells the query-builder to eager-load the nodes that are connected to
// the "targets" edge. The optional arguments are used to configure the query builder of the edge.
func (svq *SmlVersionQuery) WithTargets(opts ...func(*SmlVersionTargetQuery)) *SmlVersionQuery {
	query := (&SmlVersionTargetClient{config: svq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	svq.withTargets = query
	return svq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SmlVersion.Query().
//		GroupBy(smlversion.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (svq *SmlVersionQuery) GroupBy(field string, fields ...string) *SmlVersionGroupBy {
	svq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SmlVersionGroupBy{build: svq}
	grbuild.flds = &svq.ctx.Fields
	grbuild.label = smlversion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SmlVersion.Query().
//		Select(smlversion.FieldCreatedAt).
//		Scan(ctx, &v)
func (svq *SmlVersionQuery) Select(fields ...string) *SmlVersionSelect {
	svq.ctx.Fields = append(svq.ctx.Fields, fields...)
	sbuild := &SmlVersionSelect{SmlVersionQuery: svq}
	sbuild.label = smlversion.Label
	sbuild.flds, sbuild.scan = &svq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SmlVersionSelect configured with the given aggregations.
func (svq *SmlVersionQuery) Aggregate(fns ...AggregateFunc) *SmlVersionSelect {
	return svq.Select().Aggregate(fns...)
}

func (svq *SmlVersionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range svq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, svq); err != nil {
				return err
			}
		}
	}
	for _, f := range svq.ctx.Fields {
		if !smlversion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if svq.path != nil {
		prev, err := svq.path(ctx)
		if err != nil {
			return err
		}
		svq.sql = prev
	}
	return nil
}

func (svq *SmlVersionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SmlVersion, error) {
	var (
		nodes       = []*SmlVersion{}
		_spec       = svq.querySpec()
		loadedTypes = [1]bool{
			svq.withTargets != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SmlVersion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SmlVersion{config: svq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(svq.modifiers) > 0 {
		_spec.Modifiers = svq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, svq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := svq.withTargets; query != nil {
		if err := svq.loadTargets(ctx, query, nodes,
			func(n *SmlVersion) { n.Edges.Targets = []*SmlVersionTarget{} },
			func(n *SmlVersion, e *SmlVersionTarget) { n.Edges.Targets = append(n.Edges.Targets, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (svq *SmlVersionQuery) loadTargets(ctx context.Context, query *SmlVersionTargetQuery, nodes []*SmlVersion, init func(*SmlVersion), assign func(*SmlVersion, *SmlVersionTarget)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*SmlVersion)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(smlversiontarget.FieldVersionID)
	}
	query.Where(predicate.SmlVersionTarget(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(smlversion.TargetsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.VersionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "version_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (svq *SmlVersionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := svq.querySpec()
	if len(svq.modifiers) > 0 {
		_spec.Modifiers = svq.modifiers
	}
	_spec.Node.Columns = svq.ctx.Fields
	if len(svq.ctx.Fields) > 0 {
		_spec.Unique = svq.ctx.Unique != nil && *svq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, svq.driver, _spec)
}

func (svq *SmlVersionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(smlversion.Table, smlversion.Columns, sqlgraph.NewFieldSpec(smlversion.FieldID, field.TypeString))
	_spec.From = svq.sql
	if unique := svq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if svq.path != nil {
		_spec.Unique = true
	}
	if fields := svq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smlversion.FieldID)
		for i := range fields {
			if fields[i] != smlversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := svq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := svq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := svq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := svq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (svq *SmlVersionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(svq.driver.Dialect())
	t1 := builder.Table(smlversion.Table)
	columns := svq.ctx.Fields
	if len(columns) == 0 {
		columns = smlversion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if svq.sql != nil {
		selector = svq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if svq.ctx.Unique != nil && *svq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range svq.modifiers {
		m(selector)
	}
	for _, p := range svq.predicates {
		p(selector)
	}
	for _, p := range svq.order {
		p(selector)
	}
	if offset := svq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := svq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (svq *SmlVersionQuery) Modify(modifiers ...func(s *sql.Selector)) *SmlVersionSelect {
	svq.modifiers = append(svq.modifiers, modifiers...)
	return svq.Select()
}

// SmlVersionGroupBy is the group-by builder for SmlVersion entities.
type SmlVersionGroupBy struct {
	selector
	build *SmlVersionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (svgb *SmlVersionGroupBy) Aggregate(fns ...AggregateFunc) *SmlVersionGroupBy {
	svgb.fns = append(svgb.fns, fns...)
	return svgb
}

// Scan applies the selector query and scans the result into the given value.
func (svgb *SmlVersionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, svgb.build.ctx, "GroupBy")
	if err := svgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SmlVersionQuery, *SmlVersionGroupBy](ctx, svgb.build, svgb, svgb.build.inters, v)
}

func (svgb *SmlVersionGroupBy) sqlScan(ctx context.Context, root *SmlVersionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(svgb.fns))
	for _, fn := range svgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*svgb.flds)+len(svgb.fns))
		for _, f := range *svgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*svgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := svgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SmlVersionSelect is the builder for selecting fields of SmlVersion entities.
type SmlVersionSelect struct {
	*SmlVersionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (svs *SmlVersionSelect) Aggregate(fns ...AggregateFunc) *SmlVersionSelect {
	svs.fns = append(svs.fns, fns...)
	return svs
}

// Scan applies the selector query and scans the result into the given value.
func (svs *SmlVersionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, svs.ctx, "Select")
	if err := svs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SmlVersionQuery, *SmlVersionSelect](ctx, svs.SmlVersionQuery, svs, svs.inters, v)
}

func (svs *SmlVersionSelect) sqlScan(ctx context.Context, root *SmlVersionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(svs.fns))
	for _, fn := range svs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*svs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := svs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (svs *SmlVersionSelect) Modify(modifiers ...func(s *sql.Selector)) *SmlVersionSelect {
	svs.modifiers = append(svs.modifiers, modifiers...)
	return svs
}
