// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/virustotalresult"
)

// VirustotalResultDelete is the builder for deleting a VirustotalResult entity.
type VirustotalResultDelete struct {
	config
	hooks    []Hook
	mutation *VirustotalResultMutation
}

// Where appends a list predicates to the VirustotalResultDelete builder.
func (vrd *VirustotalResultDelete) Where(ps ...predicate.VirustotalResult) *VirustotalResultDelete {
	vrd.mutation.Where(ps...)
	return vrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vrd *VirustotalResultDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vrd.sqlExec, vrd.mutation, vrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vrd *VirustotalResultDelete) ExecX(ctx context.Context) int {
	n, err := vrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vrd *VirustotalResultDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(virustotalresult.Table, sqlgraph.NewFieldSpec(virustotalresult.FieldID, field.TypeString))
	if ps := vrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vrd.mutation.done = true
	return affected, err
}

// VirustotalResultDeleteOne is the builder for deleting a single VirustotalResult entity.
type VirustotalResultDeleteOne struct {
	vrd *VirustotalResultDelete
}

// Where appends a list predicates to the VirustotalResultDelete builder.
func (vrdo *VirustotalResultDeleteOne) Where(ps ...predicate.VirustotalResult) *VirustotalResultDeleteOne {
	vrdo.vrd.mutation.Where(ps...)
	return vrdo
}

// Exec executes the deletion query.
func (vrdo *VirustotalResultDeleteOne) Exec(ctx context.Context) error {
	n, err := vrdo.vrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{virustotalresult.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vrdo *VirustotalResultDeleteOne) ExecX(ctx context.Context) {
	if err := vrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
