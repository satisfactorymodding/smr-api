// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiondependency"
)

// VersionDependencyCreate is the builder for creating a VersionDependency entity.
type VersionDependencyCreate struct {
	config
	mutation *VersionDependencyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vdc *VersionDependencyCreate) SetCreatedAt(t time.Time) *VersionDependencyCreate {
	vdc.mutation.SetCreatedAt(t)
	return vdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vdc *VersionDependencyCreate) SetNillableCreatedAt(t *time.Time) *VersionDependencyCreate {
	if t != nil {
		vdc.SetCreatedAt(*t)
	}
	return vdc
}

// SetUpdatedAt sets the "updated_at" field.
func (vdc *VersionDependencyCreate) SetUpdatedAt(t time.Time) *VersionDependencyCreate {
	vdc.mutation.SetUpdatedAt(t)
	return vdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vdc *VersionDependencyCreate) SetNillableUpdatedAt(t *time.Time) *VersionDependencyCreate {
	if t != nil {
		vdc.SetUpdatedAt(*t)
	}
	return vdc
}

// SetDeletedAt sets the "deleted_at" field.
func (vdc *VersionDependencyCreate) SetDeletedAt(t time.Time) *VersionDependencyCreate {
	vdc.mutation.SetDeletedAt(t)
	return vdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vdc *VersionDependencyCreate) SetNillableDeletedAt(t *time.Time) *VersionDependencyCreate {
	if t != nil {
		vdc.SetDeletedAt(*t)
	}
	return vdc
}

// SetVersionID sets the "version_id" field.
func (vdc *VersionDependencyCreate) SetVersionID(s string) *VersionDependencyCreate {
	vdc.mutation.SetVersionID(s)
	return vdc
}

// SetModID sets the "mod_id" field.
func (vdc *VersionDependencyCreate) SetModID(s string) *VersionDependencyCreate {
	vdc.mutation.SetModID(s)
	return vdc
}

// SetCondition sets the "condition" field.
func (vdc *VersionDependencyCreate) SetCondition(s string) *VersionDependencyCreate {
	vdc.mutation.SetCondition(s)
	return vdc
}

// SetOptional sets the "optional" field.
func (vdc *VersionDependencyCreate) SetOptional(b bool) *VersionDependencyCreate {
	vdc.mutation.SetOptional(b)
	return vdc
}

// SetVersion sets the "version" edge to the Version entity.
func (vdc *VersionDependencyCreate) SetVersion(v *Version) *VersionDependencyCreate {
	return vdc.SetVersionID(v.ID)
}

// SetMod sets the "mod" edge to the Mod entity.
func (vdc *VersionDependencyCreate) SetMod(m *Mod) *VersionDependencyCreate {
	return vdc.SetModID(m.ID)
}

// Mutation returns the VersionDependencyMutation object of the builder.
func (vdc *VersionDependencyCreate) Mutation() *VersionDependencyMutation {
	return vdc.mutation
}

// Save creates the VersionDependency in the database.
func (vdc *VersionDependencyCreate) Save(ctx context.Context) (*VersionDependency, error) {
	if err := vdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vdc.sqlSave, vdc.mutation, vdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vdc *VersionDependencyCreate) SaveX(ctx context.Context) *VersionDependency {
	v, err := vdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdc *VersionDependencyCreate) Exec(ctx context.Context) error {
	_, err := vdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdc *VersionDependencyCreate) ExecX(ctx context.Context) {
	if err := vdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdc *VersionDependencyCreate) defaults() error {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		if versiondependency.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized versiondependency.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := versiondependency.DefaultCreatedAt()
		vdc.mutation.SetCreatedAt(v)
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		if versiondependency.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized versiondependency.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := versiondependency.DefaultUpdatedAt()
		vdc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vdc *VersionDependencyCreate) check() error {
	if _, ok := vdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "VersionDependency.created_at"`)}
	}
	if _, ok := vdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "VersionDependency.updated_at"`)}
	}
	if _, ok := vdc.mutation.VersionID(); !ok {
		return &ValidationError{Name: "version_id", err: errors.New(`ent: missing required field "VersionDependency.version_id"`)}
	}
	if _, ok := vdc.mutation.ModID(); !ok {
		return &ValidationError{Name: "mod_id", err: errors.New(`ent: missing required field "VersionDependency.mod_id"`)}
	}
	if _, ok := vdc.mutation.Condition(); !ok {
		return &ValidationError{Name: "condition", err: errors.New(`ent: missing required field "VersionDependency.condition"`)}
	}
	if v, ok := vdc.mutation.Condition(); ok {
		if err := versiondependency.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf(`ent: validator failed for field "VersionDependency.condition": %w`, err)}
		}
	}
	if _, ok := vdc.mutation.Optional(); !ok {
		return &ValidationError{Name: "optional", err: errors.New(`ent: missing required field "VersionDependency.optional"`)}
	}
	if _, ok := vdc.mutation.VersionID(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required edge "VersionDependency.version"`)}
	}
	if _, ok := vdc.mutation.ModID(); !ok {
		return &ValidationError{Name: "mod", err: errors.New(`ent: missing required edge "VersionDependency.mod"`)}
	}
	return nil
}

func (vdc *VersionDependencyCreate) sqlSave(ctx context.Context) (*VersionDependency, error) {
	if err := vdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (vdc *VersionDependencyCreate) createSpec() (*VersionDependency, *sqlgraph.CreateSpec) {
	var (
		_node = &VersionDependency{config: vdc.config}
		_spec = sqlgraph.NewCreateSpec(versiondependency.Table, nil)
	)
	if value, ok := vdc.mutation.CreatedAt(); ok {
		_spec.SetField(versiondependency.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vdc.mutation.UpdatedAt(); ok {
		_spec.SetField(versiondependency.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vdc.mutation.DeletedAt(); ok {
		_spec.SetField(versiondependency.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := vdc.mutation.Condition(); ok {
		_spec.SetField(versiondependency.FieldCondition, field.TypeString, value)
		_node.Condition = value
	}
	if value, ok := vdc.mutation.Optional(); ok {
		_spec.SetField(versiondependency.FieldOptional, field.TypeBool, value)
		_node.Optional = value
	}
	if nodes := vdc.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.VersionTable,
			Columns: []string{versiondependency.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.VersionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vdc.mutation.ModIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.ModTable,
			Columns: []string{versiondependency.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VersionDependencyCreateBulk is the builder for creating many VersionDependency entities in bulk.
type VersionDependencyCreateBulk struct {
	config
	err      error
	builders []*VersionDependencyCreate
}

// Save creates the VersionDependency entities in the database.
func (vdcb *VersionDependencyCreateBulk) Save(ctx context.Context) ([]*VersionDependency, error) {
	if vdcb.err != nil {
		return nil, vdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vdcb.builders))
	nodes := make([]*VersionDependency, len(vdcb.builders))
	mutators := make([]Mutator, len(vdcb.builders))
	for i := range vdcb.builders {
		func(i int, root context.Context) {
			builder := vdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VersionDependencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vdcb *VersionDependencyCreateBulk) SaveX(ctx context.Context) []*VersionDependency {
	v, err := vdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vdcb *VersionDependencyCreateBulk) Exec(ctx context.Context) error {
	_, err := vdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdcb *VersionDependencyCreateBulk) ExecX(ctx context.Context) {
	if err := vdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
