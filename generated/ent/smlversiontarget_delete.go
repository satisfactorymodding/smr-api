// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/smlversiontarget"
)

// SmlVersionTargetDelete is the builder for deleting a SmlVersionTarget entity.
type SmlVersionTargetDelete struct {
	config
	hooks    []Hook
	mutation *SmlVersionTargetMutation
}

// Where appends a list predicates to the SmlVersionTargetDelete builder.
func (svtd *SmlVersionTargetDelete) Where(ps ...predicate.SmlVersionTarget) *SmlVersionTargetDelete {
	svtd.mutation.Where(ps...)
	return svtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (svtd *SmlVersionTargetDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, svtd.sqlExec, svtd.mutation, svtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (svtd *SmlVersionTargetDelete) ExecX(ctx context.Context) int {
	n, err := svtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (svtd *SmlVersionTargetDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(smlversiontarget.Table, sqlgraph.NewFieldSpec(smlversiontarget.FieldID, field.TypeString))
	if ps := svtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, svtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	svtd.mutation.done = true
	return affected, err
}

// SmlVersionTargetDeleteOne is the builder for deleting a single SmlVersionTarget entity.
type SmlVersionTargetDeleteOne struct {
	svtd *SmlVersionTargetDelete
}

// Where appends a list predicates to the SmlVersionTargetDelete builder.
func (svtdo *SmlVersionTargetDeleteOne) Where(ps ...predicate.SmlVersionTarget) *SmlVersionTargetDeleteOne {
	svtdo.svtd.mutation.Where(ps...)
	return svtdo
}

// Exec executes the deletion query.
func (svtdo *SmlVersionTargetDeleteOne) Exec(ctx context.Context) error {
	n, err := svtdo.svtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{smlversiontarget.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (svtdo *SmlVersionTargetDeleteOne) ExecX(ctx context.Context) {
	if err := svtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
