// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiontarget"
)

// VersionTarget is the model entity for the VersionTarget schema.
type VersionTarget struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// VersionID holds the value of the "version_id" field.
	VersionID string `json:"version_id,omitempty"`
	// TargetName holds the value of the "target_name" field.
	TargetName string `json:"target_name,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Size holds the value of the "size" field.
	Size int64 `json:"size,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VersionTargetQuery when eager-loading is set.
	Edges        VersionTargetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VersionTargetEdges holds the relations/edges for other nodes in the graph.
type VersionTargetEdges struct {
	// SmlVersion holds the value of the sml_version edge.
	SmlVersion *Version `json:"sml_version,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SmlVersionOrErr returns the SmlVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VersionTargetEdges) SmlVersionOrErr() (*Version, error) {
	if e.SmlVersion != nil {
		return e.SmlVersion, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: version.Label}
	}
	return nil, &NotLoadedError{edge: "sml_version"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VersionTarget) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case versiontarget.FieldSize:
			values[i] = new(sql.NullInt64)
		case versiontarget.FieldID, versiontarget.FieldVersionID, versiontarget.FieldTargetName, versiontarget.FieldKey, versiontarget.FieldHash:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VersionTarget fields.
func (vt *VersionTarget) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case versiontarget.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vt.ID = value.String
			}
		case versiontarget.FieldVersionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_id", values[i])
			} else if value.Valid {
				vt.VersionID = value.String
			}
		case versiontarget.FieldTargetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_name", values[i])
			} else if value.Valid {
				vt.TargetName = value.String
			}
		case versiontarget.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				vt.Key = value.String
			}
		case versiontarget.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				vt.Hash = value.String
			}
		case versiontarget.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				vt.Size = value.Int64
			}
		default:
			vt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VersionTarget.
// This includes values selected through modifiers, order, etc.
func (vt *VersionTarget) Value(name string) (ent.Value, error) {
	return vt.selectValues.Get(name)
}

// QuerySmlVersion queries the "sml_version" edge of the VersionTarget entity.
func (vt *VersionTarget) QuerySmlVersion() *VersionQuery {
	return NewVersionTargetClient(vt.config).QuerySmlVersion(vt)
}

// Update returns a builder for updating this VersionTarget.
// Note that you need to call VersionTarget.Unwrap() before calling this method if this VersionTarget
// was returned from a transaction, and the transaction was committed or rolled back.
func (vt *VersionTarget) Update() *VersionTargetUpdateOne {
	return NewVersionTargetClient(vt.config).UpdateOne(vt)
}

// Unwrap unwraps the VersionTarget entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vt *VersionTarget) Unwrap() *VersionTarget {
	_tx, ok := vt.config.driver.(*txDriver)
	if !ok {
		panic("ent: VersionTarget is not a transactional entity")
	}
	vt.config.driver = _tx.drv
	return vt
}

// String implements the fmt.Stringer.
func (vt *VersionTarget) String() string {
	var builder strings.Builder
	builder.WriteString("VersionTarget(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vt.ID))
	builder.WriteString("version_id=")
	builder.WriteString(vt.VersionID)
	builder.WriteString(", ")
	builder.WriteString("target_name=")
	builder.WriteString(vt.TargetName)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(vt.Key)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(vt.Hash)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", vt.Size))
	builder.WriteByte(')')
	return builder.String()
}

// VersionTargets is a parsable slice of VersionTarget.
type VersionTargets []*VersionTarget
