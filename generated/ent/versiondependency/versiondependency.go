// Code generated by ent, DO NOT EDIT.

package versiondependency

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the versiondependency type in the database.
	Label = "version_dependency"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldVersionID holds the string denoting the version_id field in the database.
	FieldVersionID = "version_id"
	// FieldModID holds the string denoting the mod_id field in the database.
	FieldModID = "mod_id"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// FieldOptional holds the string denoting the optional field in the database.
	FieldOptional = "optional"
	// EdgeVersion holds the string denoting the version edge name in mutations.
	EdgeVersion = "version"
	// EdgeMod holds the string denoting the mod edge name in mutations.
	EdgeMod = "mod"
	// VersionFieldID holds the string denoting the ID field of the Version.
	VersionFieldID = "id"
	// ModFieldID holds the string denoting the ID field of the Mod.
	ModFieldID = "id"
	// Table holds the table name of the versiondependency in the database.
	Table = "version_dependencies"
	// VersionTable is the table that holds the version relation/edge.
	VersionTable = "version_dependencies"
	// VersionInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	VersionInverseTable = "versions"
	// VersionColumn is the table column denoting the version relation/edge.
	VersionColumn = "version_id"
	// ModTable is the table that holds the mod relation/edge.
	ModTable = "version_dependencies"
	// ModInverseTable is the table name for the Mod entity.
	// It exists in this package in order to avoid circular dependency with the "mod" package.
	ModInverseTable = "mods"
	// ModColumn is the table column denoting the mod relation/edge.
	ModColumn = "mod_id"
)

// Columns holds all SQL columns for versiondependency fields.
var Columns = []string{
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldVersionID,
	FieldModID,
	FieldCondition,
	FieldOptional,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/satisfactorymodding/smr-api/generated/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ConditionValidator is a validator for the "condition" field. It is called by the builders before save.
	ConditionValidator func(string) error
)

// OrderOption defines the ordering options for the VersionDependency queries.
type OrderOption func(*sql.Selector)

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByVersionID orders the results by the version_id field.
func ByVersionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersionID, opts...).ToFunc()
}

// ByModID orders the results by the mod_id field.
func ByModID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModID, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByOptional orders the results by the optional field.
func ByOptional(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptional, opts...).ToFunc()
}

// ByVersionField orders the results by version field.
func ByVersionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVersionStep(), sql.OrderByField(field, opts...))
	}
}

// ByModField orders the results by mod field.
func ByModField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModStep(), sql.OrderByField(field, opts...))
	}
}
func newVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, VersionColumn),
		sqlgraph.To(VersionInverseTable, VersionFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, VersionTable, VersionColumn),
	)
}
func newModStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ModColumn),
		sqlgraph.To(ModInverseTable, ModFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ModTable, ModColumn),
	)
}
