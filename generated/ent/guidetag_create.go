// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/guide"
	"github.com/satisfactorymodding/smr-api/generated/ent/guidetag"
	"github.com/satisfactorymodding/smr-api/generated/ent/tag"
)

// GuideTagCreate is the builder for creating a GuideTag entity.
type GuideTagCreate struct {
	config
	mutation *GuideTagMutation
	hooks    []Hook
}

// SetGuideTag sets the "guide_tag" field.
func (gtc *GuideTagCreate) SetGuideTag(s string) *GuideTagCreate {
	gtc.mutation.SetGuideTag(s)
	return gtc
}

// SetTagID sets the "tag_id" field.
func (gtc *GuideTagCreate) SetTagID(s string) *GuideTagCreate {
	gtc.mutation.SetTagID(s)
	return gtc
}

// SetGuideID sets the "guide" edge to the Guide entity by ID.
func (gtc *GuideTagCreate) SetGuideID(id string) *GuideTagCreate {
	gtc.mutation.SetGuideID(id)
	return gtc
}

// SetGuide sets the "guide" edge to the Guide entity.
func (gtc *GuideTagCreate) SetGuide(g *Guide) *GuideTagCreate {
	return gtc.SetGuideID(g.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (gtc *GuideTagCreate) SetTag(t *Tag) *GuideTagCreate {
	return gtc.SetTagID(t.ID)
}

// Mutation returns the GuideTagMutation object of the builder.
func (gtc *GuideTagCreate) Mutation() *GuideTagMutation {
	return gtc.mutation
}

// Save creates the GuideTag in the database.
func (gtc *GuideTagCreate) Save(ctx context.Context) (*GuideTag, error) {
	return withHooks(ctx, gtc.sqlSave, gtc.mutation, gtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gtc *GuideTagCreate) SaveX(ctx context.Context) *GuideTag {
	v, err := gtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtc *GuideTagCreate) Exec(ctx context.Context) error {
	_, err := gtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtc *GuideTagCreate) ExecX(ctx context.Context) {
	if err := gtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gtc *GuideTagCreate) check() error {
	if _, ok := gtc.mutation.GuideTag(); !ok {
		return &ValidationError{Name: "guide_tag", err: errors.New(`ent: missing required field "GuideTag.guide_tag"`)}
	}
	if _, ok := gtc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "GuideTag.tag_id"`)}
	}
	if _, ok := gtc.mutation.GuideID(); !ok {
		return &ValidationError{Name: "guide", err: errors.New(`ent: missing required edge "GuideTag.guide"`)}
	}
	if _, ok := gtc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "GuideTag.tag"`)}
	}
	return nil
}

func (gtc *GuideTagCreate) sqlSave(ctx context.Context) (*GuideTag, error) {
	if err := gtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (gtc *GuideTagCreate) createSpec() (*GuideTag, *sqlgraph.CreateSpec) {
	var (
		_node = &GuideTag{config: gtc.config}
		_spec = sqlgraph.NewCreateSpec(guidetag.Table, nil)
	)
	if nodes := gtc.mutation.GuideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   guidetag.GuideTable,
			Columns: []string{guidetag.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GuideTag = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gtc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   guidetag.TagTable,
			Columns: []string{guidetag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuideTagCreateBulk is the builder for creating many GuideTag entities in bulk.
type GuideTagCreateBulk struct {
	config
	err      error
	builders []*GuideTagCreate
}

// Save creates the GuideTag entities in the database.
func (gtcb *GuideTagCreateBulk) Save(ctx context.Context) ([]*GuideTag, error) {
	if gtcb.err != nil {
		return nil, gtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gtcb.builders))
	nodes := make([]*GuideTag, len(gtcb.builders))
	mutators := make([]Mutator, len(gtcb.builders))
	for i := range gtcb.builders {
		func(i int, root context.Context) {
			builder := gtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuideTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gtcb *GuideTagCreateBulk) SaveX(ctx context.Context) []*GuideTag {
	v, err := gtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gtcb *GuideTagCreateBulk) Exec(ctx context.Context) error {
	_, err := gtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gtcb *GuideTagCreateBulk) ExecX(ctx context.Context) {
	if err := gtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
