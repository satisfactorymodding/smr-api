// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/user"
	"github.com/satisfactorymodding/smr-api/generated/ent/usermod"
)

// UserModQuery is the builder for querying UserMod entities.
type UserModQuery struct {
	config
	ctx        *QueryContext
	order      []usermod.OrderOption
	inters     []Interceptor
	predicates []predicate.UserMod
	withUser   *UserQuery
	withMod    *ModQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserModQuery builder.
func (umq *UserModQuery) Where(ps ...predicate.UserMod) *UserModQuery {
	umq.predicates = append(umq.predicates, ps...)
	return umq
}

// Limit the number of records to be returned by this query.
func (umq *UserModQuery) Limit(limit int) *UserModQuery {
	umq.ctx.Limit = &limit
	return umq
}

// Offset to start from.
func (umq *UserModQuery) Offset(offset int) *UserModQuery {
	umq.ctx.Offset = &offset
	return umq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (umq *UserModQuery) Unique(unique bool) *UserModQuery {
	umq.ctx.Unique = &unique
	return umq
}

// Order specifies how the records should be ordered.
func (umq *UserModQuery) Order(o ...usermod.OrderOption) *UserModQuery {
	umq.order = append(umq.order, o...)
	return umq
}

// QueryUser chains the current query on the "user" edge.
func (umq *UserModQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermod.Table, usermod.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usermod.UserTable, usermod.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMod chains the current query on the "mod" edge.
func (umq *UserModQuery) QueryMod() *ModQuery {
	query := (&ModClient{config: umq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := umq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := umq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usermod.Table, usermod.ModColumn, selector),
			sqlgraph.To(mod.Table, mod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usermod.ModTable, usermod.ModColumn),
		)
		fromU = sqlgraph.SetNeighbors(umq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserMod entity from the query.
// Returns a *NotFoundError when no UserMod was found.
func (umq *UserModQuery) First(ctx context.Context) (*UserMod, error) {
	nodes, err := umq.Limit(1).All(setContextOp(ctx, umq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usermod.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (umq *UserModQuery) FirstX(ctx context.Context) *UserMod {
	node, err := umq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single UserMod entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserMod entity is found.
// Returns a *NotFoundError when no UserMod entities are found.
func (umq *UserModQuery) Only(ctx context.Context) (*UserMod, error) {
	nodes, err := umq.Limit(2).All(setContextOp(ctx, umq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usermod.Label}
	default:
		return nil, &NotSingularError{usermod.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (umq *UserModQuery) OnlyX(ctx context.Context) *UserMod {
	node, err := umq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of UserMods.
func (umq *UserModQuery) All(ctx context.Context) ([]*UserMod, error) {
	ctx = setContextOp(ctx, umq.ctx, ent.OpQueryAll)
	if err := umq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserMod, *UserModQuery]()
	return withInterceptors[[]*UserMod](ctx, umq, qr, umq.inters)
}

// AllX is like All, but panics if an error occurs.
func (umq *UserModQuery) AllX(ctx context.Context) []*UserMod {
	nodes, err := umq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (umq *UserModQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, umq.ctx, ent.OpQueryCount)
	if err := umq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, umq, querierCount[*UserModQuery](), umq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (umq *UserModQuery) CountX(ctx context.Context) int {
	count, err := umq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (umq *UserModQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, umq.ctx, ent.OpQueryExist)
	switch _, err := umq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (umq *UserModQuery) ExistX(ctx context.Context) bool {
	exist, err := umq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserModQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (umq *UserModQuery) Clone() *UserModQuery {
	if umq == nil {
		return nil
	}
	return &UserModQuery{
		config:     umq.config,
		ctx:        umq.ctx.Clone(),
		order:      append([]usermod.OrderOption{}, umq.order...),
		inters:     append([]Interceptor{}, umq.inters...),
		predicates: append([]predicate.UserMod{}, umq.predicates...),
		withUser:   umq.withUser.Clone(),
		withMod:    umq.withMod.Clone(),
		// clone intermediate query.
		sql:  umq.sql.Clone(),
		path: umq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserModQuery) WithUser(opts ...func(*UserQuery)) *UserModQuery {
	query := (&UserClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withUser = query
	return umq
}

// WithMod tells the query-builder to eager-load the nodes that are connected to
// the "mod" edge. The optional arguments are used to configure the query builder of the edge.
func (umq *UserModQuery) WithMod(opts ...func(*ModQuery)) *UserModQuery {
	query := (&ModClient{config: umq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	umq.withMod = query
	return umq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserMod.Query().
//		GroupBy(usermod.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (umq *UserModQuery) GroupBy(field string, fields ...string) *UserModGroupBy {
	umq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserModGroupBy{build: umq}
	grbuild.flds = &umq.ctx.Fields
	grbuild.label = usermod.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id,omitempty"`
//	}
//
//	client.UserMod.Query().
//		Select(usermod.FieldUserID).
//		Scan(ctx, &v)
func (umq *UserModQuery) Select(fields ...string) *UserModSelect {
	umq.ctx.Fields = append(umq.ctx.Fields, fields...)
	sbuild := &UserModSelect{UserModQuery: umq}
	sbuild.label = usermod.Label
	sbuild.flds, sbuild.scan = &umq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserModSelect configured with the given aggregations.
func (umq *UserModQuery) Aggregate(fns ...AggregateFunc) *UserModSelect {
	return umq.Select().Aggregate(fns...)
}

func (umq *UserModQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range umq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, umq); err != nil {
				return err
			}
		}
	}
	for _, f := range umq.ctx.Fields {
		if !usermod.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if umq.path != nil {
		prev, err := umq.path(ctx)
		if err != nil {
			return err
		}
		umq.sql = prev
	}
	return nil
}

func (umq *UserModQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserMod, error) {
	var (
		nodes       = []*UserMod{}
		_spec       = umq.querySpec()
		loadedTypes = [2]bool{
			umq.withUser != nil,
			umq.withMod != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserMod).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserMod{config: umq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(umq.modifiers) > 0 {
		_spec.Modifiers = umq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, umq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := umq.withUser; query != nil {
		if err := umq.loadUser(ctx, query, nodes, nil,
			func(n *UserMod, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := umq.withMod; query != nil {
		if err := umq.loadMod(ctx, query, nodes, nil,
			func(n *UserMod, e *Mod) { n.Edges.Mod = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (umq *UserModQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserMod, init func(*UserMod), assign func(*UserMod, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*UserMod)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (umq *UserModQuery) loadMod(ctx context.Context, query *ModQuery, nodes []*UserMod, init func(*UserMod), assign func(*UserMod, *Mod)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*UserMod)
	for i := range nodes {
		fk := nodes[i].ModID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(mod.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mod_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (umq *UserModQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := umq.querySpec()
	if len(umq.modifiers) > 0 {
		_spec.Modifiers = umq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, umq.driver, _spec)
}

func (umq *UserModQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usermod.Table, usermod.Columns, nil)
	_spec.From = umq.sql
	if unique := umq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if umq.path != nil {
		_spec.Unique = true
	}
	if fields := umq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if umq.withUser != nil {
			_spec.Node.AddColumnOnce(usermod.FieldUserID)
		}
		if umq.withMod != nil {
			_spec.Node.AddColumnOnce(usermod.FieldModID)
		}
	}
	if ps := umq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := umq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := umq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := umq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (umq *UserModQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(umq.driver.Dialect())
	t1 := builder.Table(usermod.Table)
	columns := umq.ctx.Fields
	if len(columns) == 0 {
		columns = usermod.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if umq.sql != nil {
		selector = umq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if umq.ctx.Unique != nil && *umq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range umq.modifiers {
		m(selector)
	}
	for _, p := range umq.predicates {
		p(selector)
	}
	for _, p := range umq.order {
		p(selector)
	}
	if offset := umq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := umq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (umq *UserModQuery) Modify(modifiers ...func(s *sql.Selector)) *UserModSelect {
	umq.modifiers = append(umq.modifiers, modifiers...)
	return umq.Select()
}

// UserModGroupBy is the group-by builder for UserMod entities.
type UserModGroupBy struct {
	selector
	build *UserModQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (umgb *UserModGroupBy) Aggregate(fns ...AggregateFunc) *UserModGroupBy {
	umgb.fns = append(umgb.fns, fns...)
	return umgb
}

// Scan applies the selector query and scans the result into the given value.
func (umgb *UserModGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, umgb.build.ctx, ent.OpQueryGroupBy)
	if err := umgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserModQuery, *UserModGroupBy](ctx, umgb.build, umgb, umgb.build.inters, v)
}

func (umgb *UserModGroupBy) sqlScan(ctx context.Context, root *UserModQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(umgb.fns))
	for _, fn := range umgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*umgb.flds)+len(umgb.fns))
		for _, f := range *umgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*umgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := umgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserModSelect is the builder for selecting fields of UserMod entities.
type UserModSelect struct {
	*UserModQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ums *UserModSelect) Aggregate(fns ...AggregateFunc) *UserModSelect {
	ums.fns = append(ums.fns, fns...)
	return ums
}

// Scan applies the selector query and scans the result into the given value.
func (ums *UserModSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ums.ctx, ent.OpQuerySelect)
	if err := ums.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserModQuery, *UserModSelect](ctx, ums.UserModQuery, ums, ums.inters, v)
}

func (ums *UserModSelect) sqlScan(ctx context.Context, root *UserModQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ums.fns))
	for _, fn := range ums.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ums.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ums.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ums *UserModSelect) Modify(modifiers ...func(s *sql.Selector)) *UserModSelect {
	ums.modifiers = append(ums.modifiers, modifiers...)
	return ums
}
