// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/virustotalresult"
)

// VirustotalResult is the model entity for the VirustotalResult schema.
type VirustotalResult struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Safe holds the value of the "safe" field.
	Safe bool `json:"safe,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName string `json:"file_name,omitempty"`
	// VersionID holds the value of the "version_id" field.
	VersionID string `json:"version_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VirustotalResultQuery when eager-loading is set.
	Edges        VirustotalResultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VirustotalResultEdges holds the relations/edges for other nodes in the graph.
type VirustotalResultEdges struct {
	// Version holds the value of the version edge.
	Version *Version `json:"version,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VersionOrErr returns the Version value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VirustotalResultEdges) VersionOrErr() (*Version, error) {
	if e.Version != nil {
		return e.Version, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: version.Label}
	}
	return nil, &NotLoadedError{edge: "version"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VirustotalResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case virustotalresult.FieldSafe:
			values[i] = new(sql.NullBool)
		case virustotalresult.FieldID, virustotalresult.FieldHash, virustotalresult.FieldFileName, virustotalresult.FieldVersionID:
			values[i] = new(sql.NullString)
		case virustotalresult.FieldCreatedAt, virustotalresult.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VirustotalResult fields.
func (vr *VirustotalResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case virustotalresult.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				vr.ID = value.String
			}
		case virustotalresult.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vr.CreatedAt = value.Time
			}
		case virustotalresult.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vr.UpdatedAt = value.Time
			}
		case virustotalresult.FieldSafe:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field safe", values[i])
			} else if value.Valid {
				vr.Safe = value.Bool
			}
		case virustotalresult.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				vr.Hash = value.String
			}
		case virustotalresult.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				vr.FileName = value.String
			}
		case virustotalresult.FieldVersionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_id", values[i])
			} else if value.Valid {
				vr.VersionID = value.String
			}
		default:
			vr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VirustotalResult.
// This includes values selected through modifiers, order, etc.
func (vr *VirustotalResult) Value(name string) (ent.Value, error) {
	return vr.selectValues.Get(name)
}

// QueryVersion queries the "version" edge of the VirustotalResult entity.
func (vr *VirustotalResult) QueryVersion() *VersionQuery {
	return NewVirustotalResultClient(vr.config).QueryVersion(vr)
}

// Update returns a builder for updating this VirustotalResult.
// Note that you need to call VirustotalResult.Unwrap() before calling this method if this VirustotalResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (vr *VirustotalResult) Update() *VirustotalResultUpdateOne {
	return NewVirustotalResultClient(vr.config).UpdateOne(vr)
}

// Unwrap unwraps the VirustotalResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vr *VirustotalResult) Unwrap() *VirustotalResult {
	_tx, ok := vr.config.driver.(*txDriver)
	if !ok {
		panic("ent: VirustotalResult is not a transactional entity")
	}
	vr.config.driver = _tx.drv
	return vr
}

// String implements the fmt.Stringer.
func (vr *VirustotalResult) String() string {
	var builder strings.Builder
	builder.WriteString("VirustotalResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("safe=")
	builder.WriteString(fmt.Sprintf("%v", vr.Safe))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(vr.Hash)
	builder.WriteString(", ")
	builder.WriteString("file_name=")
	builder.WriteString(vr.FileName)
	builder.WriteString(", ")
	builder.WriteString("version_id=")
	builder.WriteString(vr.VersionID)
	builder.WriteByte(')')
	return builder.String()
}

// VirustotalResults is a parsable slice of VirustotalResult.
type VirustotalResults []*VirustotalResult
