// Code generated by ent, DO NOT EDIT.

package mod

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldName, v))
}

// ShortDescription applies equality check predicate on the "short_description" field. It's identical to ShortDescriptionEQ.
func ShortDescription(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldShortDescription, v))
}

// FullDescription applies equality check predicate on the "full_description" field. It's identical to FullDescriptionEQ.
func FullDescription(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldFullDescription, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldLogo, v))
}

// SourceURL applies equality check predicate on the "source_url" field. It's identical to SourceURLEQ.
func SourceURL(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldSourceURL, v))
}

// CreatorID applies equality check predicate on the "creator_id" field. It's identical to CreatorIDEQ.
func CreatorID(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldCreatorID, v))
}

// Approved applies equality check predicate on the "approved" field. It's identical to ApprovedEQ.
func Approved(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldApproved, v))
}

// Views applies equality check predicate on the "views" field. It's identical to ViewsEQ.
func Views(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldViews, v))
}

// Hotness applies equality check predicate on the "hotness" field. It's identical to HotnessEQ.
func Hotness(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldHotness, v))
}

// Popularity applies equality check predicate on the "popularity" field. It's identical to PopularityEQ.
func Popularity(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldPopularity, v))
}

// Downloads applies equality check predicate on the "downloads" field. It's identical to DownloadsEQ.
func Downloads(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDownloads, v))
}

// Denied applies equality check predicate on the "denied" field. It's identical to DeniedEQ.
func Denied(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDenied, v))
}

// LastVersionDate applies equality check predicate on the "last_version_date" field. It's identical to LastVersionDateEQ.
func LastVersionDate(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldLastVersionDate, v))
}

// ModReference applies equality check predicate on the "mod_reference" field. It's identical to ModReferenceEQ.
func ModReference(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldModReference, v))
}

// Hidden applies equality check predicate on the "hidden" field. It's identical to HiddenEQ.
func Hidden(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldHidden, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldName, v))
}

// ShortDescriptionEQ applies the EQ predicate on the "short_description" field.
func ShortDescriptionEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldShortDescription, v))
}

// ShortDescriptionNEQ applies the NEQ predicate on the "short_description" field.
func ShortDescriptionNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldShortDescription, v))
}

// ShortDescriptionIn applies the In predicate on the "short_description" field.
func ShortDescriptionIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldShortDescription, vs...))
}

// ShortDescriptionNotIn applies the NotIn predicate on the "short_description" field.
func ShortDescriptionNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldShortDescription, vs...))
}

// ShortDescriptionGT applies the GT predicate on the "short_description" field.
func ShortDescriptionGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldShortDescription, v))
}

// ShortDescriptionGTE applies the GTE predicate on the "short_description" field.
func ShortDescriptionGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldShortDescription, v))
}

// ShortDescriptionLT applies the LT predicate on the "short_description" field.
func ShortDescriptionLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldShortDescription, v))
}

// ShortDescriptionLTE applies the LTE predicate on the "short_description" field.
func ShortDescriptionLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldShortDescription, v))
}

// ShortDescriptionContains applies the Contains predicate on the "short_description" field.
func ShortDescriptionContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldShortDescription, v))
}

// ShortDescriptionHasPrefix applies the HasPrefix predicate on the "short_description" field.
func ShortDescriptionHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldShortDescription, v))
}

// ShortDescriptionHasSuffix applies the HasSuffix predicate on the "short_description" field.
func ShortDescriptionHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldShortDescription, v))
}

// ShortDescriptionEqualFold applies the EqualFold predicate on the "short_description" field.
func ShortDescriptionEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldShortDescription, v))
}

// ShortDescriptionContainsFold applies the ContainsFold predicate on the "short_description" field.
func ShortDescriptionContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldShortDescription, v))
}

// FullDescriptionEQ applies the EQ predicate on the "full_description" field.
func FullDescriptionEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldFullDescription, v))
}

// FullDescriptionNEQ applies the NEQ predicate on the "full_description" field.
func FullDescriptionNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldFullDescription, v))
}

// FullDescriptionIn applies the In predicate on the "full_description" field.
func FullDescriptionIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldFullDescription, vs...))
}

// FullDescriptionNotIn applies the NotIn predicate on the "full_description" field.
func FullDescriptionNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldFullDescription, vs...))
}

// FullDescriptionGT applies the GT predicate on the "full_description" field.
func FullDescriptionGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldFullDescription, v))
}

// FullDescriptionGTE applies the GTE predicate on the "full_description" field.
func FullDescriptionGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldFullDescription, v))
}

// FullDescriptionLT applies the LT predicate on the "full_description" field.
func FullDescriptionLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldFullDescription, v))
}

// FullDescriptionLTE applies the LTE predicate on the "full_description" field.
func FullDescriptionLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldFullDescription, v))
}

// FullDescriptionContains applies the Contains predicate on the "full_description" field.
func FullDescriptionContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldFullDescription, v))
}

// FullDescriptionHasPrefix applies the HasPrefix predicate on the "full_description" field.
func FullDescriptionHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldFullDescription, v))
}

// FullDescriptionHasSuffix applies the HasSuffix predicate on the "full_description" field.
func FullDescriptionHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldFullDescription, v))
}

// FullDescriptionEqualFold applies the EqualFold predicate on the "full_description" field.
func FullDescriptionEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldFullDescription, v))
}

// FullDescriptionContainsFold applies the ContainsFold predicate on the "full_description" field.
func FullDescriptionContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldFullDescription, v))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldLogo, v))
}

// LogoContains applies the Contains predicate on the "logo" field.
func LogoContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldLogo, v))
}

// LogoHasPrefix applies the HasPrefix predicate on the "logo" field.
func LogoHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldLogo, v))
}

// LogoHasSuffix applies the HasSuffix predicate on the "logo" field.
func LogoHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldLogo, v))
}

// LogoEqualFold applies the EqualFold predicate on the "logo" field.
func LogoEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldLogo, v))
}

// LogoContainsFold applies the ContainsFold predicate on the "logo" field.
func LogoContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldLogo, v))
}

// SourceURLEQ applies the EQ predicate on the "source_url" field.
func SourceURLEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldSourceURL, v))
}

// SourceURLNEQ applies the NEQ predicate on the "source_url" field.
func SourceURLNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldSourceURL, v))
}

// SourceURLIn applies the In predicate on the "source_url" field.
func SourceURLIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldSourceURL, vs...))
}

// SourceURLNotIn applies the NotIn predicate on the "source_url" field.
func SourceURLNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldSourceURL, vs...))
}

// SourceURLGT applies the GT predicate on the "source_url" field.
func SourceURLGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldSourceURL, v))
}

// SourceURLGTE applies the GTE predicate on the "source_url" field.
func SourceURLGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldSourceURL, v))
}

// SourceURLLT applies the LT predicate on the "source_url" field.
func SourceURLLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldSourceURL, v))
}

// SourceURLLTE applies the LTE predicate on the "source_url" field.
func SourceURLLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldSourceURL, v))
}

// SourceURLContains applies the Contains predicate on the "source_url" field.
func SourceURLContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldSourceURL, v))
}

// SourceURLHasPrefix applies the HasPrefix predicate on the "source_url" field.
func SourceURLHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldSourceURL, v))
}

// SourceURLHasSuffix applies the HasSuffix predicate on the "source_url" field.
func SourceURLHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldSourceURL, v))
}

// SourceURLIsNil applies the IsNil predicate on the "source_url" field.
func SourceURLIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldSourceURL))
}

// SourceURLNotNil applies the NotNil predicate on the "source_url" field.
func SourceURLNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldSourceURL))
}

// SourceURLEqualFold applies the EqualFold predicate on the "source_url" field.
func SourceURLEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldSourceURL, v))
}

// SourceURLContainsFold applies the ContainsFold predicate on the "source_url" field.
func SourceURLContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldSourceURL, v))
}

// CreatorIDEQ applies the EQ predicate on the "creator_id" field.
func CreatorIDEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldCreatorID, v))
}

// CreatorIDNEQ applies the NEQ predicate on the "creator_id" field.
func CreatorIDNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldCreatorID, v))
}

// CreatorIDIn applies the In predicate on the "creator_id" field.
func CreatorIDIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldCreatorID, vs...))
}

// CreatorIDNotIn applies the NotIn predicate on the "creator_id" field.
func CreatorIDNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldCreatorID, vs...))
}

// CreatorIDGT applies the GT predicate on the "creator_id" field.
func CreatorIDGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldCreatorID, v))
}

// CreatorIDGTE applies the GTE predicate on the "creator_id" field.
func CreatorIDGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldCreatorID, v))
}

// CreatorIDLT applies the LT predicate on the "creator_id" field.
func CreatorIDLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldCreatorID, v))
}

// CreatorIDLTE applies the LTE predicate on the "creator_id" field.
func CreatorIDLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldCreatorID, v))
}

// CreatorIDContains applies the Contains predicate on the "creator_id" field.
func CreatorIDContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldCreatorID, v))
}

// CreatorIDHasPrefix applies the HasPrefix predicate on the "creator_id" field.
func CreatorIDHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldCreatorID, v))
}

// CreatorIDHasSuffix applies the HasSuffix predicate on the "creator_id" field.
func CreatorIDHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldCreatorID, v))
}

// CreatorIDEqualFold applies the EqualFold predicate on the "creator_id" field.
func CreatorIDEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldCreatorID, v))
}

// CreatorIDContainsFold applies the ContainsFold predicate on the "creator_id" field.
func CreatorIDContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldCreatorID, v))
}

// ApprovedEQ applies the EQ predicate on the "approved" field.
func ApprovedEQ(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldApproved, v))
}

// ApprovedNEQ applies the NEQ predicate on the "approved" field.
func ApprovedNEQ(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldApproved, v))
}

// ViewsEQ applies the EQ predicate on the "views" field.
func ViewsEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldViews, v))
}

// ViewsNEQ applies the NEQ predicate on the "views" field.
func ViewsNEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldViews, v))
}

// ViewsIn applies the In predicate on the "views" field.
func ViewsIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldViews, vs...))
}

// ViewsNotIn applies the NotIn predicate on the "views" field.
func ViewsNotIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldViews, vs...))
}

// ViewsGT applies the GT predicate on the "views" field.
func ViewsGT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldViews, v))
}

// ViewsGTE applies the GTE predicate on the "views" field.
func ViewsGTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldViews, v))
}

// ViewsLT applies the LT predicate on the "views" field.
func ViewsLT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldViews, v))
}

// ViewsLTE applies the LTE predicate on the "views" field.
func ViewsLTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldViews, v))
}

// HotnessEQ applies the EQ predicate on the "hotness" field.
func HotnessEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldHotness, v))
}

// HotnessNEQ applies the NEQ predicate on the "hotness" field.
func HotnessNEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldHotness, v))
}

// HotnessIn applies the In predicate on the "hotness" field.
func HotnessIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldHotness, vs...))
}

// HotnessNotIn applies the NotIn predicate on the "hotness" field.
func HotnessNotIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldHotness, vs...))
}

// HotnessGT applies the GT predicate on the "hotness" field.
func HotnessGT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldHotness, v))
}

// HotnessGTE applies the GTE predicate on the "hotness" field.
func HotnessGTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldHotness, v))
}

// HotnessLT applies the LT predicate on the "hotness" field.
func HotnessLT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldHotness, v))
}

// HotnessLTE applies the LTE predicate on the "hotness" field.
func HotnessLTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldHotness, v))
}

// PopularityEQ applies the EQ predicate on the "popularity" field.
func PopularityEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldPopularity, v))
}

// PopularityNEQ applies the NEQ predicate on the "popularity" field.
func PopularityNEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldPopularity, v))
}

// PopularityIn applies the In predicate on the "popularity" field.
func PopularityIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldPopularity, vs...))
}

// PopularityNotIn applies the NotIn predicate on the "popularity" field.
func PopularityNotIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldPopularity, vs...))
}

// PopularityGT applies the GT predicate on the "popularity" field.
func PopularityGT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldPopularity, v))
}

// PopularityGTE applies the GTE predicate on the "popularity" field.
func PopularityGTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldPopularity, v))
}

// PopularityLT applies the LT predicate on the "popularity" field.
func PopularityLT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldPopularity, v))
}

// PopularityLTE applies the LTE predicate on the "popularity" field.
func PopularityLTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldPopularity, v))
}

// DownloadsEQ applies the EQ predicate on the "downloads" field.
func DownloadsEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDownloads, v))
}

// DownloadsNEQ applies the NEQ predicate on the "downloads" field.
func DownloadsNEQ(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldDownloads, v))
}

// DownloadsIn applies the In predicate on the "downloads" field.
func DownloadsIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldDownloads, vs...))
}

// DownloadsNotIn applies the NotIn predicate on the "downloads" field.
func DownloadsNotIn(vs ...uint) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldDownloads, vs...))
}

// DownloadsGT applies the GT predicate on the "downloads" field.
func DownloadsGT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldDownloads, v))
}

// DownloadsGTE applies the GTE predicate on the "downloads" field.
func DownloadsGTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldDownloads, v))
}

// DownloadsLT applies the LT predicate on the "downloads" field.
func DownloadsLT(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldDownloads, v))
}

// DownloadsLTE applies the LTE predicate on the "downloads" field.
func DownloadsLTE(v uint) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldDownloads, v))
}

// DeniedEQ applies the EQ predicate on the "denied" field.
func DeniedEQ(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDenied, v))
}

// DeniedNEQ applies the NEQ predicate on the "denied" field.
func DeniedNEQ(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldDenied, v))
}

// LastVersionDateEQ applies the EQ predicate on the "last_version_date" field.
func LastVersionDateEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldLastVersionDate, v))
}

// LastVersionDateNEQ applies the NEQ predicate on the "last_version_date" field.
func LastVersionDateNEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldLastVersionDate, v))
}

// LastVersionDateIn applies the In predicate on the "last_version_date" field.
func LastVersionDateIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldLastVersionDate, vs...))
}

// LastVersionDateNotIn applies the NotIn predicate on the "last_version_date" field.
func LastVersionDateNotIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldLastVersionDate, vs...))
}

// LastVersionDateGT applies the GT predicate on the "last_version_date" field.
func LastVersionDateGT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldLastVersionDate, v))
}

// LastVersionDateGTE applies the GTE predicate on the "last_version_date" field.
func LastVersionDateGTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldLastVersionDate, v))
}

// LastVersionDateLT applies the LT predicate on the "last_version_date" field.
func LastVersionDateLT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldLastVersionDate, v))
}

// LastVersionDateLTE applies the LTE predicate on the "last_version_date" field.
func LastVersionDateLTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldLastVersionDate, v))
}

// LastVersionDateIsNil applies the IsNil predicate on the "last_version_date" field.
func LastVersionDateIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldLastVersionDate))
}

// LastVersionDateNotNil applies the NotNil predicate on the "last_version_date" field.
func LastVersionDateNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldLastVersionDate))
}

// ModReferenceEQ applies the EQ predicate on the "mod_reference" field.
func ModReferenceEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldModReference, v))
}

// ModReferenceNEQ applies the NEQ predicate on the "mod_reference" field.
func ModReferenceNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldModReference, v))
}

// ModReferenceIn applies the In predicate on the "mod_reference" field.
func ModReferenceIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldModReference, vs...))
}

// ModReferenceNotIn applies the NotIn predicate on the "mod_reference" field.
func ModReferenceNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldModReference, vs...))
}

// ModReferenceGT applies the GT predicate on the "mod_reference" field.
func ModReferenceGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldModReference, v))
}

// ModReferenceGTE applies the GTE predicate on the "mod_reference" field.
func ModReferenceGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldModReference, v))
}

// ModReferenceLT applies the LT predicate on the "mod_reference" field.
func ModReferenceLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldModReference, v))
}

// ModReferenceLTE applies the LTE predicate on the "mod_reference" field.
func ModReferenceLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldModReference, v))
}

// ModReferenceContains applies the Contains predicate on the "mod_reference" field.
func ModReferenceContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldModReference, v))
}

// ModReferenceHasPrefix applies the HasPrefix predicate on the "mod_reference" field.
func ModReferenceHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldModReference, v))
}

// ModReferenceHasSuffix applies the HasSuffix predicate on the "mod_reference" field.
func ModReferenceHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldModReference, v))
}

// ModReferenceEqualFold applies the EqualFold predicate on the "mod_reference" field.
func ModReferenceEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldModReference, v))
}

// ModReferenceContainsFold applies the ContainsFold predicate on the "mod_reference" field.
func ModReferenceContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldModReference, v))
}

// HiddenEQ applies the EQ predicate on the "hidden" field.
func HiddenEQ(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldHidden, v))
}

// HiddenNEQ applies the NEQ predicate on the "hidden" field.
func HiddenNEQ(v bool) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldHidden, v))
}

// CompatibilityIsNil applies the IsNil predicate on the "compatibility" field.
func CompatibilityIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldCompatibility))
}

// CompatibilityNotNil applies the NotNil predicate on the "compatibility" field.
func CompatibilityNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldCompatibility))
}

// HasVersions applies the HasEdge predicate on the "versions" edge.
func HasVersions() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VersionsTable, VersionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionsWith applies the HasEdge predicate on the "versions" edge with a given conditions (other predicates).
func HasVersionsWith(preds ...predicate.Version) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newVersionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthors applies the HasEdge predicate on the "authors" edge.
func HasAuthors() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AuthorsTable, AuthorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorsWith applies the HasEdge predicate on the "authors" edge with a given conditions (other predicates).
func HasAuthorsWith(preds ...predicate.User) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newAuthorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependents applies the HasEdge predicate on the "dependents" edge.
func HasDependents() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DependentsTable, DependentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependentsWith applies the HasEdge predicate on the "dependents" edge with a given conditions (other predicates).
func HasDependentsWith(preds ...predicate.Version) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newDependentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserMods applies the HasEdge predicate on the "user_mods" edge.
func HasUserMods() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UserModsTable, UserModsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserModsWith applies the HasEdge predicate on the "user_mods" edge with a given conditions (other predicates).
func HasUserModsWith(preds ...predicate.UserMod) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newUserModsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModTags applies the HasEdge predicate on the "mod_tags" edge.
func HasModTags() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ModTagsTable, ModTagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModTagsWith applies the HasEdge predicate on the "mod_tags" edge with a given conditions (other predicates).
func HasModTagsWith(preds ...predicate.ModTag) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newModTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVersionDependencies applies the HasEdge predicate on the "version_dependencies" edge.
func HasVersionDependencies() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, VersionDependenciesTable, VersionDependenciesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVersionDependenciesWith applies the HasEdge predicate on the "version_dependencies" edge with a given conditions (other predicates).
func HasVersionDependenciesWith(preds ...predicate.VersionDependency) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newVersionDependenciesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mod) predicate.Mod {
	return predicate.Mod(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mod) predicate.Mod {
	return predicate.Mod(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mod) predicate.Mod {
	return predicate.Mod(sql.NotPredicates(p))
}
