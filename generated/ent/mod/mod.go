// Code generated by ent, DO NOT EDIT.

package mod

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the mod type in the database.
	Label = "mod"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldShortDescription holds the string denoting the short_description field in the database.
	FieldShortDescription = "short_description"
	// FieldFullDescription holds the string denoting the full_description field in the database.
	FieldFullDescription = "full_description"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldLogoThumbhash holds the string denoting the logo_thumbhash field in the database.
	FieldLogoThumbhash = "logo_thumbhash"
	// FieldSourceURL holds the string denoting the source_url field in the database.
	FieldSourceURL = "source_url"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// FieldViews holds the string denoting the views field in the database.
	FieldViews = "views"
	// FieldHotness holds the string denoting the hotness field in the database.
	FieldHotness = "hotness"
	// FieldPopularity holds the string denoting the popularity field in the database.
	FieldPopularity = "popularity"
	// FieldDownloads holds the string denoting the downloads field in the database.
	FieldDownloads = "downloads"
	// FieldDenied holds the string denoting the denied field in the database.
	FieldDenied = "denied"
	// FieldLastVersionDate holds the string denoting the last_version_date field in the database.
	FieldLastVersionDate = "last_version_date"
	// FieldModReference holds the string denoting the mod_reference field in the database.
	FieldModReference = "mod_reference"
	// FieldHidden holds the string denoting the hidden field in the database.
	FieldHidden = "hidden"
	// FieldCompatibility holds the string denoting the compatibility field in the database.
	FieldCompatibility = "compatibility"
	// EdgeVersions holds the string denoting the versions edge name in mutations.
	EdgeVersions = "versions"
	// EdgeAuthors holds the string denoting the authors edge name in mutations.
	EdgeAuthors = "authors"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeDependents holds the string denoting the dependents edge name in mutations.
	EdgeDependents = "dependents"
	// EdgeUserMods holds the string denoting the user_mods edge name in mutations.
	EdgeUserMods = "user_mods"
	// EdgeModTags holds the string denoting the mod_tags edge name in mutations.
	EdgeModTags = "mod_tags"
	// EdgeVersionDependencies holds the string denoting the version_dependencies edge name in mutations.
	EdgeVersionDependencies = "version_dependencies"
	// Table holds the table name of the mod in the database.
	Table = "mods"
	// VersionsTable is the table that holds the versions relation/edge.
	VersionsTable = "versions"
	// VersionsInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	VersionsInverseTable = "versions"
	// VersionsColumn is the table column denoting the versions relation/edge.
	VersionsColumn = "mod_id"
	// AuthorsTable is the table that holds the authors relation/edge. The primary key declared below.
	AuthorsTable = "user_mods"
	// AuthorsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorsInverseTable = "users"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "mod_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// DependentsTable is the table that holds the dependents relation/edge. The primary key declared below.
	DependentsTable = "version_dependencies"
	// DependentsInverseTable is the table name for the Version entity.
	// It exists in this package in order to avoid circular dependency with the "version" package.
	DependentsInverseTable = "versions"
	// UserModsTable is the table that holds the user_mods relation/edge.
	UserModsTable = "user_mods"
	// UserModsInverseTable is the table name for the UserMod entity.
	// It exists in this package in order to avoid circular dependency with the "usermod" package.
	UserModsInverseTable = "user_mods"
	// UserModsColumn is the table column denoting the user_mods relation/edge.
	UserModsColumn = "mod_id"
	// ModTagsTable is the table that holds the mod_tags relation/edge.
	ModTagsTable = "mod_tags"
	// ModTagsInverseTable is the table name for the ModTag entity.
	// It exists in this package in order to avoid circular dependency with the "modtag" package.
	ModTagsInverseTable = "mod_tags"
	// ModTagsColumn is the table column denoting the mod_tags relation/edge.
	ModTagsColumn = "mod_id"
	// VersionDependenciesTable is the table that holds the version_dependencies relation/edge.
	VersionDependenciesTable = "version_dependencies"
	// VersionDependenciesInverseTable is the table name for the VersionDependency entity.
	// It exists in this package in order to avoid circular dependency with the "versiondependency" package.
	VersionDependenciesInverseTable = "version_dependencies"
	// VersionDependenciesColumn is the table column denoting the version_dependencies relation/edge.
	VersionDependenciesColumn = "mod_id"
)

// Columns holds all SQL columns for mod fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldShortDescription,
	FieldFullDescription,
	FieldLogo,
	FieldLogoThumbhash,
	FieldSourceURL,
	FieldCreatorID,
	FieldApproved,
	FieldViews,
	FieldHotness,
	FieldPopularity,
	FieldDownloads,
	FieldDenied,
	FieldLastVersionDate,
	FieldModReference,
	FieldHidden,
	FieldCompatibility,
}

var (
	// AuthorsPrimaryKey and AuthorsColumn2 are the table columns denoting the
	// primary key for the authors relation (M2M).
	AuthorsPrimaryKey = []string{"user_id", "mod_id"}
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"mod_id", "tag_id"}
	// DependentsPrimaryKey and DependentsColumn2 are the table columns denoting the
	// primary key for the dependents relation (M2M).
	DependentsPrimaryKey = []string{"version_id", "mod_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/satisfactorymodding/smr-api/generated/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ShortDescriptionValidator is a validator for the "short_description" field. It is called by the builders before save.
	ShortDescriptionValidator func(string) error
	// DefaultApproved holds the default value on creation for the "approved" field.
	DefaultApproved bool
	// DefaultViews holds the default value on creation for the "views" field.
	DefaultViews uint
	// DefaultHotness holds the default value on creation for the "hotness" field.
	DefaultHotness uint
	// DefaultPopularity holds the default value on creation for the "popularity" field.
	DefaultPopularity uint
	// DefaultDownloads holds the default value on creation for the "downloads" field.
	DefaultDownloads uint
	// DefaultDenied holds the default value on creation for the "denied" field.
	DefaultDenied bool
	// ModReferenceValidator is a validator for the "mod_reference" field. It is called by the builders before save.
	ModReferenceValidator func(string) error
	// DefaultHidden holds the default value on creation for the "hidden" field.
	DefaultHidden bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Mod queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByShortDescription orders the results by the short_description field.
func ByShortDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortDescription, opts...).ToFunc()
}

// ByFullDescription orders the results by the full_description field.
func ByFullDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullDescription, opts...).ToFunc()
}

// ByLogo orders the results by the logo field.
func ByLogo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogo, opts...).ToFunc()
}

// ByLogoThumbhash orders the results by the logo_thumbhash field.
func ByLogoThumbhash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoThumbhash, opts...).ToFunc()
}

// BySourceURL orders the results by the source_url field.
func BySourceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceURL, opts...).ToFunc()
}

// ByCreatorID orders the results by the creator_id field.
func ByCreatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorID, opts...).ToFunc()
}

// ByApproved orders the results by the approved field.
func ByApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproved, opts...).ToFunc()
}

// ByViews orders the results by the views field.
func ByViews(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViews, opts...).ToFunc()
}

// ByHotness orders the results by the hotness field.
func ByHotness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHotness, opts...).ToFunc()
}

// ByPopularity orders the results by the popularity field.
func ByPopularity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPopularity, opts...).ToFunc()
}

// ByDownloads orders the results by the downloads field.
func ByDownloads(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloads, opts...).ToFunc()
}

// ByDenied orders the results by the denied field.
func ByDenied(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDenied, opts...).ToFunc()
}

// ByLastVersionDate orders the results by the last_version_date field.
func ByLastVersionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastVersionDate, opts...).ToFunc()
}

// ByModReference orders the results by the mod_reference field.
func ByModReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModReference, opts...).ToFunc()
}

// ByHidden orders the results by the hidden field.
func ByHidden(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHidden, opts...).ToFunc()
}

// ByVersionsCount orders the results by versions count.
func ByVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVersionsStep(), opts...)
	}
}

// ByVersions orders the results by versions terms.
func ByVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthorsCount orders the results by authors count.
func ByAuthorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorsStep(), opts...)
	}
}

// ByAuthors orders the results by authors terms.
func ByAuthors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDependentsCount orders the results by dependents count.
func ByDependentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDependentsStep(), opts...)
	}
}

// ByDependents orders the results by dependents terms.
func ByDependents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserModsCount orders the results by user_mods count.
func ByUserModsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserModsStep(), opts...)
	}
}

// ByUserMods orders the results by user_mods terms.
func ByUserMods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserModsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByModTagsCount orders the results by mod_tags count.
func ByModTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModTagsStep(), opts...)
	}
}

// ByModTags orders the results by mod_tags terms.
func ByModTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVersionDependenciesCount orders the results by version_dependencies count.
func ByVersionDependenciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVersionDependenciesStep(), opts...)
	}
}

// ByVersionDependencies orders the results by version_dependencies terms.
func ByVersionDependencies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVersionDependenciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, VersionsTable, VersionsColumn),
	)
}
func newAuthorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AuthorsTable, AuthorsPrimaryKey...),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
	)
}
func newDependentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DependentsTable, DependentsPrimaryKey...),
	)
}
func newUserModsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserModsInverseTable, UserModsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, UserModsTable, UserModsColumn),
	)
}
func newModTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModTagsInverseTable, ModTagsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ModTagsTable, ModTagsColumn),
	)
}
func newVersionDependenciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VersionDependenciesInverseTable, VersionDependenciesColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, VersionDependenciesTable, VersionDependenciesColumn),
	)
}
