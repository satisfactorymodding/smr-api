// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiondependency"
)

// VersionDependency is the model entity for the VersionDependency schema.
type VersionDependency struct {
	config `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// VersionID holds the value of the "version_id" field.
	VersionID string `json:"version_id,omitempty"`
	// ModID holds the value of the "mod_id" field.
	ModID string `json:"mod_id,omitempty"`
	// Condition holds the value of the "condition" field.
	Condition string `json:"condition,omitempty"`
	// Optional holds the value of the "optional" field.
	Optional bool `json:"optional,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VersionDependencyQuery when eager-loading is set.
	Edges        VersionDependencyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// VersionDependencyEdges holds the relations/edges for other nodes in the graph.
type VersionDependencyEdges struct {
	// Version holds the value of the version edge.
	Version *Version `json:"version,omitempty"`
	// Mod holds the value of the mod edge.
	Mod *Mod `json:"mod,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VersionOrErr returns the Version value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VersionDependencyEdges) VersionOrErr() (*Version, error) {
	if e.Version != nil {
		return e.Version, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: version.Label}
	}
	return nil, &NotLoadedError{edge: "version"}
}

// ModOrErr returns the Mod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VersionDependencyEdges) ModOrErr() (*Mod, error) {
	if e.Mod != nil {
		return e.Mod, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: mod.Label}
	}
	return nil, &NotLoadedError{edge: "mod"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VersionDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case versiondependency.FieldOptional:
			values[i] = new(sql.NullBool)
		case versiondependency.FieldVersionID, versiondependency.FieldModID, versiondependency.FieldCondition:
			values[i] = new(sql.NullString)
		case versiondependency.FieldCreatedAt, versiondependency.FieldUpdatedAt, versiondependency.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VersionDependency fields.
func (vd *VersionDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case versiondependency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vd.CreatedAt = value.Time
			}
		case versiondependency.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vd.UpdatedAt = value.Time
			}
		case versiondependency.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				vd.DeletedAt = value.Time
			}
		case versiondependency.FieldVersionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version_id", values[i])
			} else if value.Valid {
				vd.VersionID = value.String
			}
		case versiondependency.FieldModID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mod_id", values[i])
			} else if value.Valid {
				vd.ModID = value.String
			}
		case versiondependency.FieldCondition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				vd.Condition = value.String
			}
		case versiondependency.FieldOptional:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field optional", values[i])
			} else if value.Valid {
				vd.Optional = value.Bool
			}
		default:
			vd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VersionDependency.
// This includes values selected through modifiers, order, etc.
func (vd *VersionDependency) Value(name string) (ent.Value, error) {
	return vd.selectValues.Get(name)
}

// QueryVersion queries the "version" edge of the VersionDependency entity.
func (vd *VersionDependency) QueryVersion() *VersionQuery {
	return NewVersionDependencyClient(vd.config).QueryVersion(vd)
}

// QueryMod queries the "mod" edge of the VersionDependency entity.
func (vd *VersionDependency) QueryMod() *ModQuery {
	return NewVersionDependencyClient(vd.config).QueryMod(vd)
}

// Update returns a builder for updating this VersionDependency.
// Note that you need to call VersionDependency.Unwrap() before calling this method if this VersionDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (vd *VersionDependency) Update() *VersionDependencyUpdateOne {
	return NewVersionDependencyClient(vd.config).UpdateOne(vd)
}

// Unwrap unwraps the VersionDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vd *VersionDependency) Unwrap() *VersionDependency {
	_tx, ok := vd.config.driver.(*txDriver)
	if !ok {
		panic("ent: VersionDependency is not a transactional entity")
	}
	vd.config.driver = _tx.drv
	return vd
}

// String implements the fmt.Stringer.
func (vd *VersionDependency) String() string {
	var builder strings.Builder
	builder.WriteString("VersionDependency(")
	builder.WriteString("created_at=")
	builder.WriteString(vd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(vd.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version_id=")
	builder.WriteString(vd.VersionID)
	builder.WriteString(", ")
	builder.WriteString("mod_id=")
	builder.WriteString(vd.ModID)
	builder.WriteString(", ")
	builder.WriteString("condition=")
	builder.WriteString(vd.Condition)
	builder.WriteString(", ")
	builder.WriteString("optional=")
	builder.WriteString(fmt.Sprintf("%v", vd.Optional))
	builder.WriteByte(')')
	return builder.String()
}

// VersionDependencies is a parsable slice of VersionDependency.
type VersionDependencies []*VersionDependency
