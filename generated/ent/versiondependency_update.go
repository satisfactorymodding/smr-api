// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/satisfactorymodding/smr-api/generated/ent/mod"
	"github.com/satisfactorymodding/smr-api/generated/ent/predicate"
	"github.com/satisfactorymodding/smr-api/generated/ent/version"
	"github.com/satisfactorymodding/smr-api/generated/ent/versiondependency"
)

// VersionDependencyUpdate is the builder for updating VersionDependency entities.
type VersionDependencyUpdate struct {
	config
	hooks     []Hook
	mutation  *VersionDependencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VersionDependencyUpdate builder.
func (vdu *VersionDependencyUpdate) Where(ps ...predicate.VersionDependency) *VersionDependencyUpdate {
	vdu.mutation.Where(ps...)
	return vdu
}

// SetUpdatedAt sets the "updated_at" field.
func (vdu *VersionDependencyUpdate) SetUpdatedAt(t time.Time) *VersionDependencyUpdate {
	vdu.mutation.SetUpdatedAt(t)
	return vdu
}

// SetDeletedAt sets the "deleted_at" field.
func (vdu *VersionDependencyUpdate) SetDeletedAt(t time.Time) *VersionDependencyUpdate {
	vdu.mutation.SetDeletedAt(t)
	return vdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vdu *VersionDependencyUpdate) SetNillableDeletedAt(t *time.Time) *VersionDependencyUpdate {
	if t != nil {
		vdu.SetDeletedAt(*t)
	}
	return vdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vdu *VersionDependencyUpdate) ClearDeletedAt() *VersionDependencyUpdate {
	vdu.mutation.ClearDeletedAt()
	return vdu
}

// SetVersionID sets the "version_id" field.
func (vdu *VersionDependencyUpdate) SetVersionID(s string) *VersionDependencyUpdate {
	vdu.mutation.SetVersionID(s)
	return vdu
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (vdu *VersionDependencyUpdate) SetNillableVersionID(s *string) *VersionDependencyUpdate {
	if s != nil {
		vdu.SetVersionID(*s)
	}
	return vdu
}

// SetModID sets the "mod_id" field.
func (vdu *VersionDependencyUpdate) SetModID(s string) *VersionDependencyUpdate {
	vdu.mutation.SetModID(s)
	return vdu
}

// SetNillableModID sets the "mod_id" field if the given value is not nil.
func (vdu *VersionDependencyUpdate) SetNillableModID(s *string) *VersionDependencyUpdate {
	if s != nil {
		vdu.SetModID(*s)
	}
	return vdu
}

// SetCondition sets the "condition" field.
func (vdu *VersionDependencyUpdate) SetCondition(s string) *VersionDependencyUpdate {
	vdu.mutation.SetCondition(s)
	return vdu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (vdu *VersionDependencyUpdate) SetNillableCondition(s *string) *VersionDependencyUpdate {
	if s != nil {
		vdu.SetCondition(*s)
	}
	return vdu
}

// SetOptional sets the "optional" field.
func (vdu *VersionDependencyUpdate) SetOptional(b bool) *VersionDependencyUpdate {
	vdu.mutation.SetOptional(b)
	return vdu
}

// SetNillableOptional sets the "optional" field if the given value is not nil.
func (vdu *VersionDependencyUpdate) SetNillableOptional(b *bool) *VersionDependencyUpdate {
	if b != nil {
		vdu.SetOptional(*b)
	}
	return vdu
}

// SetVersion sets the "version" edge to the Version entity.
func (vdu *VersionDependencyUpdate) SetVersion(v *Version) *VersionDependencyUpdate {
	return vdu.SetVersionID(v.ID)
}

// SetMod sets the "mod" edge to the Mod entity.
func (vdu *VersionDependencyUpdate) SetMod(m *Mod) *VersionDependencyUpdate {
	return vdu.SetModID(m.ID)
}

// Mutation returns the VersionDependencyMutation object of the builder.
func (vdu *VersionDependencyUpdate) Mutation() *VersionDependencyMutation {
	return vdu.mutation
}

// ClearVersion clears the "version" edge to the Version entity.
func (vdu *VersionDependencyUpdate) ClearVersion() *VersionDependencyUpdate {
	vdu.mutation.ClearVersion()
	return vdu
}

// ClearMod clears the "mod" edge to the Mod entity.
func (vdu *VersionDependencyUpdate) ClearMod() *VersionDependencyUpdate {
	vdu.mutation.ClearMod()
	return vdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vdu *VersionDependencyUpdate) Save(ctx context.Context) (int, error) {
	if err := vdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vdu.sqlSave, vdu.mutation, vdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vdu *VersionDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := vdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vdu *VersionDependencyUpdate) Exec(ctx context.Context) error {
	_, err := vdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vdu *VersionDependencyUpdate) ExecX(ctx context.Context) {
	if err := vdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vdu *VersionDependencyUpdate) defaults() error {
	if _, ok := vdu.mutation.UpdatedAt(); !ok {
		if versiondependency.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized versiondependency.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := versiondependency.UpdateDefaultUpdatedAt()
		vdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vdu *VersionDependencyUpdate) check() error {
	if v, ok := vdu.mutation.Condition(); ok {
		if err := versiondependency.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf(`ent: validator failed for field "VersionDependency.condition": %w`, err)}
		}
	}
	if vdu.mutation.VersionCleared() && len(vdu.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VersionDependency.version"`)
	}
	if vdu.mutation.ModCleared() && len(vdu.mutation.ModIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VersionDependency.mod"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vdu *VersionDependencyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionDependencyUpdate {
	vdu.modifiers = append(vdu.modifiers, modifiers...)
	return vdu
}

func (vdu *VersionDependencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(versiondependency.Table, versiondependency.Columns, sqlgraph.NewFieldSpec(versiondependency.FieldVersionID, field.TypeString), sqlgraph.NewFieldSpec(versiondependency.FieldModID, field.TypeString))
	if ps := vdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vdu.mutation.UpdatedAt(); ok {
		_spec.SetField(versiondependency.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vdu.mutation.DeletedAt(); ok {
		_spec.SetField(versiondependency.FieldDeletedAt, field.TypeTime, value)
	}
	if vdu.mutation.DeletedAtCleared() {
		_spec.ClearField(versiondependency.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vdu.mutation.Condition(); ok {
		_spec.SetField(versiondependency.FieldCondition, field.TypeString, value)
	}
	if value, ok := vdu.mutation.Optional(); ok {
		_spec.SetField(versiondependency.FieldOptional, field.TypeBool, value)
	}
	if vdu.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.VersionTable,
			Columns: []string{versiondependency.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.VersionTable,
			Columns: []string{versiondependency.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vdu.mutation.ModCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.ModTable,
			Columns: []string{versiondependency.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vdu.mutation.ModIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.ModTable,
			Columns: []string{versiondependency.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{versiondependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vdu.mutation.done = true
	return n, nil
}

// VersionDependencyUpdateOne is the builder for updating a single VersionDependency entity.
type VersionDependencyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VersionDependencyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vduo *VersionDependencyUpdateOne) SetUpdatedAt(t time.Time) *VersionDependencyUpdateOne {
	vduo.mutation.SetUpdatedAt(t)
	return vduo
}

// SetDeletedAt sets the "deleted_at" field.
func (vduo *VersionDependencyUpdateOne) SetDeletedAt(t time.Time) *VersionDependencyUpdateOne {
	vduo.mutation.SetDeletedAt(t)
	return vduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vduo *VersionDependencyUpdateOne) SetNillableDeletedAt(t *time.Time) *VersionDependencyUpdateOne {
	if t != nil {
		vduo.SetDeletedAt(*t)
	}
	return vduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vduo *VersionDependencyUpdateOne) ClearDeletedAt() *VersionDependencyUpdateOne {
	vduo.mutation.ClearDeletedAt()
	return vduo
}

// SetVersionID sets the "version_id" field.
func (vduo *VersionDependencyUpdateOne) SetVersionID(s string) *VersionDependencyUpdateOne {
	vduo.mutation.SetVersionID(s)
	return vduo
}

// SetNillableVersionID sets the "version_id" field if the given value is not nil.
func (vduo *VersionDependencyUpdateOne) SetNillableVersionID(s *string) *VersionDependencyUpdateOne {
	if s != nil {
		vduo.SetVersionID(*s)
	}
	return vduo
}

// SetModID sets the "mod_id" field.
func (vduo *VersionDependencyUpdateOne) SetModID(s string) *VersionDependencyUpdateOne {
	vduo.mutation.SetModID(s)
	return vduo
}

// SetNillableModID sets the "mod_id" field if the given value is not nil.
func (vduo *VersionDependencyUpdateOne) SetNillableModID(s *string) *VersionDependencyUpdateOne {
	if s != nil {
		vduo.SetModID(*s)
	}
	return vduo
}

// SetCondition sets the "condition" field.
func (vduo *VersionDependencyUpdateOne) SetCondition(s string) *VersionDependencyUpdateOne {
	vduo.mutation.SetCondition(s)
	return vduo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (vduo *VersionDependencyUpdateOne) SetNillableCondition(s *string) *VersionDependencyUpdateOne {
	if s != nil {
		vduo.SetCondition(*s)
	}
	return vduo
}

// SetOptional sets the "optional" field.
func (vduo *VersionDependencyUpdateOne) SetOptional(b bool) *VersionDependencyUpdateOne {
	vduo.mutation.SetOptional(b)
	return vduo
}

// SetNillableOptional sets the "optional" field if the given value is not nil.
func (vduo *VersionDependencyUpdateOne) SetNillableOptional(b *bool) *VersionDependencyUpdateOne {
	if b != nil {
		vduo.SetOptional(*b)
	}
	return vduo
}

// SetVersion sets the "version" edge to the Version entity.
func (vduo *VersionDependencyUpdateOne) SetVersion(v *Version) *VersionDependencyUpdateOne {
	return vduo.SetVersionID(v.ID)
}

// SetMod sets the "mod" edge to the Mod entity.
func (vduo *VersionDependencyUpdateOne) SetMod(m *Mod) *VersionDependencyUpdateOne {
	return vduo.SetModID(m.ID)
}

// Mutation returns the VersionDependencyMutation object of the builder.
func (vduo *VersionDependencyUpdateOne) Mutation() *VersionDependencyMutation {
	return vduo.mutation
}

// ClearVersion clears the "version" edge to the Version entity.
func (vduo *VersionDependencyUpdateOne) ClearVersion() *VersionDependencyUpdateOne {
	vduo.mutation.ClearVersion()
	return vduo
}

// ClearMod clears the "mod" edge to the Mod entity.
func (vduo *VersionDependencyUpdateOne) ClearMod() *VersionDependencyUpdateOne {
	vduo.mutation.ClearMod()
	return vduo
}

// Where appends a list predicates to the VersionDependencyUpdate builder.
func (vduo *VersionDependencyUpdateOne) Where(ps ...predicate.VersionDependency) *VersionDependencyUpdateOne {
	vduo.mutation.Where(ps...)
	return vduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vduo *VersionDependencyUpdateOne) Select(field string, fields ...string) *VersionDependencyUpdateOne {
	vduo.fields = append([]string{field}, fields...)
	return vduo
}

// Save executes the query and returns the updated VersionDependency entity.
func (vduo *VersionDependencyUpdateOne) Save(ctx context.Context) (*VersionDependency, error) {
	if err := vduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vduo.sqlSave, vduo.mutation, vduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vduo *VersionDependencyUpdateOne) SaveX(ctx context.Context) *VersionDependency {
	node, err := vduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vduo *VersionDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := vduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vduo *VersionDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := vduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vduo *VersionDependencyUpdateOne) defaults() error {
	if _, ok := vduo.mutation.UpdatedAt(); !ok {
		if versiondependency.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized versiondependency.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := versiondependency.UpdateDefaultUpdatedAt()
		vduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vduo *VersionDependencyUpdateOne) check() error {
	if v, ok := vduo.mutation.Condition(); ok {
		if err := versiondependency.ConditionValidator(v); err != nil {
			return &ValidationError{Name: "condition", err: fmt.Errorf(`ent: validator failed for field "VersionDependency.condition": %w`, err)}
		}
	}
	if vduo.mutation.VersionCleared() && len(vduo.mutation.VersionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VersionDependency.version"`)
	}
	if vduo.mutation.ModCleared() && len(vduo.mutation.ModIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "VersionDependency.mod"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vduo *VersionDependencyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionDependencyUpdateOne {
	vduo.modifiers = append(vduo.modifiers, modifiers...)
	return vduo
}

func (vduo *VersionDependencyUpdateOne) sqlSave(ctx context.Context) (_node *VersionDependency, err error) {
	if err := vduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(versiondependency.Table, versiondependency.Columns, sqlgraph.NewFieldSpec(versiondependency.FieldVersionID, field.TypeString), sqlgraph.NewFieldSpec(versiondependency.FieldModID, field.TypeString))
	if id, ok := vduo.mutation.VersionID(); !ok {
		return nil, &ValidationError{Name: "version_id", err: errors.New(`ent: missing "VersionDependency.version_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := vduo.mutation.ModID(); !ok {
		return nil, &ValidationError{Name: "mod_id", err: errors.New(`ent: missing "VersionDependency.mod_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := vduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !versiondependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := vduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vduo.mutation.UpdatedAt(); ok {
		_spec.SetField(versiondependency.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vduo.mutation.DeletedAt(); ok {
		_spec.SetField(versiondependency.FieldDeletedAt, field.TypeTime, value)
	}
	if vduo.mutation.DeletedAtCleared() {
		_spec.ClearField(versiondependency.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := vduo.mutation.Condition(); ok {
		_spec.SetField(versiondependency.FieldCondition, field.TypeString, value)
	}
	if value, ok := vduo.mutation.Optional(); ok {
		_spec.SetField(versiondependency.FieldOptional, field.TypeBool, value)
	}
	if vduo.mutation.VersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.VersionTable,
			Columns: []string{versiondependency.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.VersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.VersionTable,
			Columns: []string{versiondependency.VersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(version.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vduo.mutation.ModCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.ModTable,
			Columns: []string{versiondependency.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vduo.mutation.ModIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   versiondependency.ModTable,
			Columns: []string{versiondependency.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(vduo.modifiers...)
	_node = &VersionDependency{config: vduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{versiondependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vduo.mutation.done = true
	return _node, nil
}
