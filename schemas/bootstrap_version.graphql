### Types

scalar BootstrapVersionID

type BootstrapVersion {
    id: BootstrapVersionID!
    version: String!
    satisfactory_version: Int!
    stability: VersionStabilities!
    link: String!
    changelog: String!
    date: Date!

    updated_at: Date!
    created_at: Date!
}

type GetBootstrapVersions {
    bootstrap_versions: [BootstrapVersion!]!
    count: Int!
}

enum BootstrapVersionFields {
    name
    created_at
    updated_at
    satisfactory_version
    date
}

### Inputs

input NewBootstrapVersion {
    version: String!
    satisfactory_version: Int!
    stability: VersionStabilities!
    link: String!
    changelog: String!
    date: Date!
}

input UpdateBootstrapVersion {
    version: String
    satisfactory_version: Int
    stability: VersionStabilities
    link: String
    changelog: String
    date: Date
}

input BootstrapVersionFilter {
    limit: Int
    offset: Int
    order_by: BootstrapVersionFields
    order: Order
    search: String
    ids: [String!]
}

### Queries

extend type Query {
    getBootstrapVersion(bootstrapVersionID: BootstrapVersionID!): BootstrapVersion
    getBootstrapVersions(filter: BootstrapVersionFilter): GetBootstrapVersions!
}

### Mutations

extend type Mutation {
    createBootstrapVersion(bootstrapVersion: NewBootstrapVersion!): BootstrapVersion @canEditBootstrapVersions @isLoggedIn
    updateBootstrapVersion(bootstrapVersionId: BootstrapVersionID!, bootstrapVersion: UpdateBootstrapVersion!): BootstrapVersion! @canEditBootstrapVersions @isLoggedIn
    deleteBootstrapVersion(bootstrapVersionId: BootstrapVersionID!): Boolean! @canEditBootstrapVersions @isLoggedIn
}
